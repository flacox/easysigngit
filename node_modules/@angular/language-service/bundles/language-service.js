
/**
 * @license Angular v18.0.1
 * Copyright Google LLC All Rights Reserved.
 * License: MIT
 */

let $deferred;
function define(modules, callback) {
  $deferred = {modules, callback};
}
module.exports = function(provided) {
  const ts = provided['typescript'];
  if (!ts) {
    throw new Error('Caller does not provide typescript module');
  }
  const results = {};
  const resolvedModules = $deferred.modules.map(m => {
    if (m === 'exports') {
      return results;
    }
    if (m === 'typescript') {
      return ts;
    }
    return require(m);
  });
  $deferred.callback(...resolvedModules);
  return results;
};

define(['module', 'exports', 'typescript', 'os', 'fs', 'module', 'path', 'url'], (function (module, exports, ts, os, fs$1, module$1, p, url) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var ts__default = /*#__PURE__*/_interopDefaultLegacy(ts);
    var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs$1);
    var p__namespace = /*#__PURE__*/_interopNamespace(p);

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    function isNgLanguageService(ls) {
        return 'getTcb' in ls;
    }

    /**
     * The default `FileSystem` that will always fail.
     *
     * This is a way of ensuring that the developer consciously chooses and
     * configures the `FileSystem` before using it; particularly important when
     * considering static functions like `absoluteFrom()` which rely on
     * the `FileSystem` under the hood.
     */
    class InvalidFileSystem {
        exists(path) {
            throw makeError();
        }
        readFile(path) {
            throw makeError();
        }
        readFileBuffer(path) {
            throw makeError();
        }
        writeFile(path, data, exclusive) {
            throw makeError();
        }
        removeFile(path) {
            throw makeError();
        }
        symlink(target, path) {
            throw makeError();
        }
        readdir(path) {
            throw makeError();
        }
        lstat(path) {
            throw makeError();
        }
        stat(path) {
            throw makeError();
        }
        pwd() {
            throw makeError();
        }
        chdir(path) {
            throw makeError();
        }
        extname(path) {
            throw makeError();
        }
        copyFile(from, to) {
            throw makeError();
        }
        moveFile(from, to) {
            throw makeError();
        }
        ensureDir(path) {
            throw makeError();
        }
        removeDeep(path) {
            throw makeError();
        }
        isCaseSensitive() {
            throw makeError();
        }
        resolve(...paths) {
            throw makeError();
        }
        dirname(file) {
            throw makeError();
        }
        join(basePath, ...paths) {
            throw makeError();
        }
        isRoot(path) {
            throw makeError();
        }
        isRooted(path) {
            throw makeError();
        }
        relative(from, to) {
            throw makeError();
        }
        basename(filePath, extension) {
            throw makeError();
        }
        realpath(filePath) {
            throw makeError();
        }
        getDefaultLibLocation() {
            throw makeError();
        }
        normalize(path) {
            throw makeError();
        }
    }
    function makeError() {
        return new Error('FileSystem has not been configured. Please call `setFileSystem()` before calling this method.');
    }

    const TS_DTS_JS_EXTENSION = /(?:\.d)?\.ts$|\.js$/;
    /**
     * Remove a .ts, .d.ts, or .js extension from a file name.
     */
    function stripExtension(path) {
        return path.replace(TS_DTS_JS_EXTENSION, '');
    }
    function getSourceFileOrError(program, fileName) {
        const sf = program.getSourceFile(fileName);
        if (sf === undefined) {
            throw new Error(`Program does not contain "${fileName}" - available files are ${program
            .getSourceFiles()
            .map((sf) => sf.fileName)
            .join(', ')}`);
        }
        return sf;
    }

    let fs = new InvalidFileSystem();
    function getFileSystem() {
        return fs;
    }
    function setFileSystem(fileSystem) {
        fs = fileSystem;
    }
    /**
     * Convert the path `path` to an `AbsoluteFsPath`, throwing an error if it's not an absolute path.
     */
    function absoluteFrom(path) {
        if (!fs.isRooted(path)) {
            throw new Error(`Internal Error: absoluteFrom(${path}): path is not absolute`);
        }
        return fs.resolve(path);
    }
    const ABSOLUTE_PATH = Symbol('AbsolutePath');
    /**
     * Extract an `AbsoluteFsPath` from a `ts.SourceFile`-like object.
     */
    function absoluteFromSourceFile(sf) {
        const sfWithPatch = sf;
        if (sfWithPatch[ABSOLUTE_PATH] === undefined) {
            sfWithPatch[ABSOLUTE_PATH] = fs.resolve(sfWithPatch.fileName);
        }
        // Non-null assertion needed since TS doesn't narrow the type of fields that use a symbol as a key
        // apparently.
        return sfWithPatch[ABSOLUTE_PATH];
    }
    /**
     * Static access to `dirname`.
     */
    function dirname(file) {
        return fs.dirname(file);
    }
    /**
     * Static access to `join`.
     */
    function join(basePath, ...paths) {
        return fs.join(basePath, ...paths);
    }
    /**
     * Static access to `resolve`s.
     */
    function resolve(basePath, ...paths) {
        return fs.resolve(basePath, ...paths);
    }
    /**
     * Static access to `isRooted`.
     */
    function isRooted(path) {
        return fs.isRooted(path);
    }
    /**
     * Static access to `relative`.
     */
    function relative(from, to) {
        return fs.relative(from, to);
    }
    /**
     * Returns true if the given path is locally relative.
     *
     * This is used to work out if the given path is relative (i.e. not absolute) but also is not
     * escaping the current directory.
     */
    function isLocalRelativePath(relativePath) {
        return !isRooted(relativePath) && !relativePath.startsWith('..');
    }
    /**
     * Converts a path to a form suitable for use as a relative module import specifier.
     *
     * In other words it adds the `./` to the path if it is locally relative.
     */
    function toRelativeImport(relativePath) {
        return isLocalRelativePath(relativePath) ? `./${relativePath}` : relativePath;
    }

    const LogicalProjectPath = {
        /**
         * Get the relative path between two `LogicalProjectPath`s.
         *
         * This will return a `PathSegment` which would be a valid module specifier to use in `from` when
         * importing from `to`.
         */
        relativePathBetween: function (from, to) {
            const relativePath = relative(dirname(resolve(from)), resolve(to));
            return toRelativeImport(relativePath);
        },
    };
    /**
     * A utility class which can translate absolute paths to source files into logical paths in
     * TypeScript's logical file system, based on the root directories of the project.
     */
    class LogicalFileSystem {
        constructor(rootDirs, compilerHost) {
            this.compilerHost = compilerHost;
            /**
             * A cache of file paths to project paths, because computation of these paths is slightly
             * expensive.
             */
            this.cache = new Map();
            // Make a copy and sort it by length in reverse order (longest first). This speeds up lookups,
            // since there's no need to keep going through the array once a match is found.
            this.rootDirs = rootDirs.concat([]).sort((a, b) => b.length - a.length);
            this.canonicalRootDirs = this.rootDirs.map((dir) => this.compilerHost.getCanonicalFileName(dir));
        }
        /**
         * Get the logical path in the project of a `ts.SourceFile`.
         *
         * This method is provided as a convenient alternative to calling
         * `logicalPathOfFile(absoluteFromSourceFile(sf))`.
         */
        logicalPathOfSf(sf) {
            return this.logicalPathOfFile(absoluteFromSourceFile(sf));
        }
        /**
         * Get the logical path in the project of a source file.
         *
         * @returns A `LogicalProjectPath` to the source file, or `null` if the source file is not in any
         * of the TS project's root directories.
         */
        logicalPathOfFile(physicalFile) {
            if (!this.cache.has(physicalFile)) {
                const canonicalFilePath = this.compilerHost.getCanonicalFileName(physicalFile);
                let logicalFile = null;
                for (let i = 0; i < this.rootDirs.length; i++) {
                    const rootDir = this.rootDirs[i];
                    const canonicalRootDir = this.canonicalRootDirs[i];
                    if (isWithinBasePath(canonicalRootDir, canonicalFilePath)) {
                        // Note that we match against canonical paths but then create the logical path from
                        // original paths.
                        logicalFile = this.createLogicalProjectPath(physicalFile, rootDir);
                        // The logical project does not include any special "node_modules" nested directories.
                        if (logicalFile.indexOf('/node_modules/') !== -1) {
                            logicalFile = null;
                        }
                        else {
                            break;
                        }
                    }
                }
                this.cache.set(physicalFile, logicalFile);
            }
            return this.cache.get(physicalFile);
        }
        createLogicalProjectPath(file, rootDir) {
            const logicalPath = stripExtension(file.slice(rootDir.length));
            return (logicalPath.startsWith('/') ? logicalPath : '/' + logicalPath);
        }
    }
    /**
     * Is the `path` a descendant of the `base`?
     * E.g. `foo/bar/zee` is within `foo/bar` but not within `foo/car`.
     */
    function isWithinBasePath(base, path) {
        return isLocalRelativePath(relative(base, path));
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A wrapper around the Node.js file-system that supports path manipulation.
     */
    class NodeJSPathManipulation {
        pwd() {
            return this.normalize(process.cwd());
        }
        chdir(dir) {
            process.chdir(dir);
        }
        resolve(...paths) {
            return this.normalize(p__namespace.resolve(...paths));
        }
        dirname(file) {
            return this.normalize(p__namespace.dirname(file));
        }
        join(basePath, ...paths) {
            return this.normalize(p__namespace.join(basePath, ...paths));
        }
        isRoot(path) {
            return this.dirname(path) === this.normalize(path);
        }
        isRooted(path) {
            return p__namespace.isAbsolute(path);
        }
        relative(from, to) {
            return this.normalize(p__namespace.relative(from, to));
        }
        basename(filePath, extension) {
            return p__namespace.basename(filePath, extension);
        }
        extname(path) {
            return p__namespace.extname(path);
        }
        normalize(path) {
            // Convert backslashes to forward slashes
            return path.replace(/\\/g, '/');
        }
    }
    // G3-ESM-MARKER: G3 uses CommonJS, but externally everything in ESM.
    // CommonJS/ESM interop for determining the current file name and containing dir.
    const isCommonJS = typeof __filename !== 'undefined';
    const currentFileUrl = isCommonJS ? null : new URL(module.uri, document.baseURI).href;
    const currentFileName = isCommonJS ? __filename : url.fileURLToPath(currentFileUrl);
    /**
     * A wrapper around the Node.js file-system that supports readonly operations and path manipulation.
     */
    class NodeJSReadonlyFileSystem extends NodeJSPathManipulation {
        constructor() {
            super(...arguments);
            this._caseSensitive = undefined;
        }
        isCaseSensitive() {
            if (this._caseSensitive === undefined) {
                // Note the use of the real file-system is intentional:
                // `this.exists()` relies upon `isCaseSensitive()` so that would cause an infinite recursion.
                this._caseSensitive = !fs__default["default"].existsSync(this.normalize(toggleCase(currentFileName)));
            }
            return this._caseSensitive;
        }
        exists(path) {
            return fs__default["default"].existsSync(path);
        }
        readFile(path) {
            return fs__default["default"].readFileSync(path, 'utf8');
        }
        readFileBuffer(path) {
            return fs__default["default"].readFileSync(path);
        }
        readdir(path) {
            return fs__default["default"].readdirSync(path);
        }
        lstat(path) {
            return fs__default["default"].lstatSync(path);
        }
        stat(path) {
            return fs__default["default"].statSync(path);
        }
        realpath(path) {
            return this.resolve(fs__default["default"].realpathSync(path));
        }
        getDefaultLibLocation() {
            // G3-ESM-MARKER: G3 uses CommonJS, but externally everything in ESM.
            const requireFn = isCommonJS ? require : module$1.createRequire(currentFileUrl);
            return this.resolve(requireFn.resolve('typescript'), '..');
        }
    }
    /**
     * A wrapper around the Node.js file-system (i.e. the `fs` package).
     */
    class NodeJSFileSystem extends NodeJSReadonlyFileSystem {
        writeFile(path, data, exclusive = false) {
            fs__default["default"].writeFileSync(path, data, exclusive ? { flag: 'wx' } : undefined);
        }
        removeFile(path) {
            fs__default["default"].unlinkSync(path);
        }
        symlink(target, path) {
            fs__default["default"].symlinkSync(target, path);
        }
        copyFile(from, to) {
            fs__default["default"].copyFileSync(from, to);
        }
        moveFile(from, to) {
            fs__default["default"].renameSync(from, to);
        }
        ensureDir(path) {
            fs__default["default"].mkdirSync(path, { recursive: true });
        }
        removeDeep(path) {
            fs__default["default"].rmdirSync(path, { recursive: true });
        }
    }
    /**
     * Toggle the case of each character in a string.
     */
    function toggleCase(str) {
        return str.replace(/\w/g, (ch) => ch.toUpperCase() === ch ? ch.toLowerCase() : ch.toUpperCase());
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    const _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' + // 1: ":not("
        '(([\\.\\#]?)[-\\w]+)|' + // 2: "tag"; 3: "."/"#";
        // "-" should appear first in the regexp below as FF31 parses "[.-\w]" as a range
        // 4: attribute; 5: attribute_string; 6: attribute_value
        '(?:\\[([-.\\w*\\\\$]+)(?:=(["\']?)([^\\]"\']*)\\5)?\\])|' + // "[name]", "[name=value]",
        // "[name="value"]",
        // "[name='value']"
        '(\\))|' + // 7: ")"
        '(\\s*,\\s*)', // 8: ","
    'g');
    /**
     * A css selector contains an element name,
     * css classes and attribute/value pairs with the purpose
     * of selecting subsets out of them.
     */
    class CssSelector {
        constructor() {
            this.element = null;
            this.classNames = [];
            /**
             * The selectors are encoded in pairs where:
             * - even locations are attribute names
             * - odd locations are attribute values.
             *
             * Example:
             * Selector: `[key1=value1][key2]` would parse to:
             * ```
             * ['key1', 'value1', 'key2', '']
             * ```
             */
            this.attrs = [];
            this.notSelectors = [];
        }
        static parse(selector) {
            const results = [];
            const _addResult = (res, cssSel) => {
                if (cssSel.notSelectors.length > 0 &&
                    !cssSel.element &&
                    cssSel.classNames.length == 0 &&
                    cssSel.attrs.length == 0) {
                    cssSel.element = '*';
                }
                res.push(cssSel);
            };
            let cssSelector = new CssSelector();
            let match;
            let current = cssSelector;
            let inNot = false;
            _SELECTOR_REGEXP.lastIndex = 0;
            while ((match = _SELECTOR_REGEXP.exec(selector))) {
                if (match[1 /* SelectorRegexp.NOT */]) {
                    if (inNot) {
                        throw new Error('Nesting :not in a selector is not allowed');
                    }
                    inNot = true;
                    current = new CssSelector();
                    cssSelector.notSelectors.push(current);
                }
                const tag = match[2 /* SelectorRegexp.TAG */];
                if (tag) {
                    const prefix = match[3 /* SelectorRegexp.PREFIX */];
                    if (prefix === '#') {
                        // #hash
                        current.addAttribute('id', tag.slice(1));
                    }
                    else if (prefix === '.') {
                        // Class
                        current.addClassName(tag.slice(1));
                    }
                    else {
                        // Element
                        current.setElement(tag);
                    }
                }
                const attribute = match[4 /* SelectorRegexp.ATTRIBUTE */];
                if (attribute) {
                    current.addAttribute(current.unescapeAttribute(attribute), match[6 /* SelectorRegexp.ATTRIBUTE_VALUE */]);
                }
                if (match[7 /* SelectorRegexp.NOT_END */]) {
                    inNot = false;
                    current = cssSelector;
                }
                if (match[8 /* SelectorRegexp.SEPARATOR */]) {
                    if (inNot) {
                        throw new Error('Multiple selectors in :not are not supported');
                    }
                    _addResult(results, cssSelector);
                    cssSelector = current = new CssSelector();
                }
            }
            _addResult(results, cssSelector);
            return results;
        }
        /**
         * Unescape `\$` sequences from the CSS attribute selector.
         *
         * This is needed because `$` can have a special meaning in CSS selectors,
         * but we might want to match an attribute that contains `$`.
         * [MDN web link for more
         * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).
         * @param attr the attribute to unescape.
         * @returns the unescaped string.
         */
        unescapeAttribute(attr) {
            let result = '';
            let escaping = false;
            for (let i = 0; i < attr.length; i++) {
                const char = attr.charAt(i);
                if (char === '\\') {
                    escaping = true;
                    continue;
                }
                if (char === '$' && !escaping) {
                    throw new Error(`Error in attribute selector "${attr}". ` +
                        `Unescaped "$" is not supported. Please escape with "\\$".`);
                }
                escaping = false;
                result += char;
            }
            return result;
        }
        /**
         * Escape `$` sequences from the CSS attribute selector.
         *
         * This is needed because `$` can have a special meaning in CSS selectors,
         * with this method we are escaping `$` with `\$'.
         * [MDN web link for more
         * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).
         * @param attr the attribute to escape.
         * @returns the escaped string.
         */
        escapeAttribute(attr) {
            return attr.replace(/\\/g, '\\\\').replace(/\$/g, '\\$');
        }
        isElementSelector() {
            return (this.hasElementSelector() &&
                this.classNames.length == 0 &&
                this.attrs.length == 0 &&
                this.notSelectors.length === 0);
        }
        hasElementSelector() {
            return !!this.element;
        }
        setElement(element = null) {
            this.element = element;
        }
        getAttrs() {
            const result = [];
            if (this.classNames.length > 0) {
                result.push('class', this.classNames.join(' '));
            }
            return result.concat(this.attrs);
        }
        addAttribute(name, value = '') {
            this.attrs.push(name, (value && value.toLowerCase()) || '');
        }
        addClassName(name) {
            this.classNames.push(name.toLowerCase());
        }
        toString() {
            let res = this.element || '';
            if (this.classNames) {
                this.classNames.forEach((klass) => (res += `.${klass}`));
            }
            if (this.attrs) {
                for (let i = 0; i < this.attrs.length; i += 2) {
                    const name = this.escapeAttribute(this.attrs[i]);
                    const value = this.attrs[i + 1];
                    res += `[${name}${value ? '=' + value : ''}]`;
                }
            }
            this.notSelectors.forEach((notSelector) => (res += `:not(${notSelector})`));
            return res;
        }
    }
    /**
     * Reads a list of CssSelectors and allows to calculate which ones
     * are contained in a given CssSelector.
     */
    class SelectorMatcher {
        constructor() {
            this._elementMap = new Map();
            this._elementPartialMap = new Map();
            this._classMap = new Map();
            this._classPartialMap = new Map();
            this._attrValueMap = new Map();
            this._attrValuePartialMap = new Map();
            this._listContexts = [];
        }
        static createNotMatcher(notSelectors) {
            const notMatcher = new SelectorMatcher();
            notMatcher.addSelectables(notSelectors, null);
            return notMatcher;
        }
        addSelectables(cssSelectors, callbackCtxt) {
            let listContext = null;
            if (cssSelectors.length > 1) {
                listContext = new SelectorListContext(cssSelectors);
                this._listContexts.push(listContext);
            }
            for (let i = 0; i < cssSelectors.length; i++) {
                this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
            }
        }
        /**
         * Add an object that can be found later on by calling `match`.
         * @param cssSelector A css selector
         * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
         */
        _addSelectable(cssSelector, callbackCtxt, listContext) {
            let matcher = this;
            const element = cssSelector.element;
            const classNames = cssSelector.classNames;
            const attrs = cssSelector.attrs;
            const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
            if (element) {
                const isTerminal = attrs.length === 0 && classNames.length === 0;
                if (isTerminal) {
                    this._addTerminal(matcher._elementMap, element, selectable);
                }
                else {
                    matcher = this._addPartial(matcher._elementPartialMap, element);
                }
            }
            if (classNames) {
                for (let i = 0; i < classNames.length; i++) {
                    const isTerminal = attrs.length === 0 && i === classNames.length - 1;
                    const className = classNames[i];
                    if (isTerminal) {
                        this._addTerminal(matcher._classMap, className, selectable);
                    }
                    else {
                        matcher = this._addPartial(matcher._classPartialMap, className);
                    }
                }
            }
            if (attrs) {
                for (let i = 0; i < attrs.length; i += 2) {
                    const isTerminal = i === attrs.length - 2;
                    const name = attrs[i];
                    const value = attrs[i + 1];
                    if (isTerminal) {
                        const terminalMap = matcher._attrValueMap;
                        let terminalValuesMap = terminalMap.get(name);
                        if (!terminalValuesMap) {
                            terminalValuesMap = new Map();
                            terminalMap.set(name, terminalValuesMap);
                        }
                        this._addTerminal(terminalValuesMap, value, selectable);
                    }
                    else {
                        const partialMap = matcher._attrValuePartialMap;
                        let partialValuesMap = partialMap.get(name);
                        if (!partialValuesMap) {
                            partialValuesMap = new Map();
                            partialMap.set(name, partialValuesMap);
                        }
                        matcher = this._addPartial(partialValuesMap, value);
                    }
                }
            }
        }
        _addTerminal(map, name, selectable) {
            let terminalList = map.get(name);
            if (!terminalList) {
                terminalList = [];
                map.set(name, terminalList);
            }
            terminalList.push(selectable);
        }
        _addPartial(map, name) {
            let matcher = map.get(name);
            if (!matcher) {
                matcher = new SelectorMatcher();
                map.set(name, matcher);
            }
            return matcher;
        }
        /**
         * Find the objects that have been added via `addSelectable`
         * whose css selector is contained in the given css selector.
         * @param cssSelector A css selector
         * @param matchedCallback This callback will be called with the object handed into `addSelectable`
         * @return boolean true if a match was found
         */
        match(cssSelector, matchedCallback) {
            let result = false;
            const element = cssSelector.element;
            const classNames = cssSelector.classNames;
            const attrs = cssSelector.attrs;
            for (let i = 0; i < this._listContexts.length; i++) {
                this._listContexts[i].alreadyMatched = false;
            }
            result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
            result =
                this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
            if (classNames) {
                for (let i = 0; i < classNames.length; i++) {
                    const className = classNames[i];
                    result =
                        this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
                    result =
                        this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
                            result;
                }
            }
            if (attrs) {
                for (let i = 0; i < attrs.length; i += 2) {
                    const name = attrs[i];
                    const value = attrs[i + 1];
                    const terminalValuesMap = this._attrValueMap.get(name);
                    if (value) {
                        result =
                            this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
                    }
                    result =
                        this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
                    const partialValuesMap = this._attrValuePartialMap.get(name);
                    if (value) {
                        result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
                    }
                    result =
                        this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
                }
            }
            return result;
        }
        /** @internal */
        _matchTerminal(map, name, cssSelector, matchedCallback) {
            if (!map || typeof name !== 'string') {
                return false;
            }
            let selectables = map.get(name) || [];
            const starSelectables = map.get('*');
            if (starSelectables) {
                selectables = selectables.concat(starSelectables);
            }
            if (selectables.length === 0) {
                return false;
            }
            let selectable;
            let result = false;
            for (let i = 0; i < selectables.length; i++) {
                selectable = selectables[i];
                result = selectable.finalize(cssSelector, matchedCallback) || result;
            }
            return result;
        }
        /** @internal */
        _matchPartial(map, name, cssSelector, matchedCallback) {
            if (!map || typeof name !== 'string') {
                return false;
            }
            const nestedSelector = map.get(name);
            if (!nestedSelector) {
                return false;
            }
            // TODO(perf): get rid of recursion and measure again
            // TODO(perf): don't pass the whole selector into the recursion,
            // but only the not processed parts
            return nestedSelector.match(cssSelector, matchedCallback);
        }
    }
    class SelectorListContext {
        constructor(selectors) {
            this.selectors = selectors;
            this.alreadyMatched = false;
        }
    }
    // Store context to pass back selector and context when a selector is matched
    class SelectorContext {
        constructor(selector, cbContext, listContext) {
            this.selector = selector;
            this.cbContext = cbContext;
            this.listContext = listContext;
            this.notSelectors = selector.notSelectors;
        }
        finalize(cssSelector, callback) {
            let result = true;
            if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
                const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
                result = !notMatcher.match(cssSelector, null);
            }
            if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
                if (this.listContext) {
                    this.listContext.alreadyMatched = true;
                }
                callback(this.selector, this.cbContext);
            }
            return result;
        }
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not
    // explicitly set.
    const emitDistinctChangesOnlyDefaultValue = true;
    var ViewEncapsulation;
    (function (ViewEncapsulation) {
        ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
        // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.
        ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
        ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
    })(ViewEncapsulation || (ViewEncapsulation = {}));
    var ChangeDetectionStrategy;
    (function (ChangeDetectionStrategy) {
        ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
        ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
    })(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
    /** Flags describing an input for a directive. */
    var InputFlags;
    (function (InputFlags) {
        InputFlags[InputFlags["None"] = 0] = "None";
        InputFlags[InputFlags["SignalBased"] = 1] = "SignalBased";
        InputFlags[InputFlags["HasDecoratorInputTransform"] = 2] = "HasDecoratorInputTransform";
    })(InputFlags || (InputFlags = {}));
    const CUSTOM_ELEMENTS_SCHEMA = {
        name: 'custom-elements',
    };
    const NO_ERRORS_SCHEMA = {
        name: 'no-errors-schema',
    };
    var SecurityContext;
    (function (SecurityContext) {
        SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
        SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
        SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
        SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
        SecurityContext[SecurityContext["URL"] = 4] = "URL";
        SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
    })(SecurityContext || (SecurityContext = {}));
    var MissingTranslationStrategy;
    (function (MissingTranslationStrategy) {
        MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
        MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
        MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
    })(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
    function parserSelectorToSimpleSelector(selector) {
        const classes = selector.classNames && selector.classNames.length
            ? [8 /* SelectorFlags.CLASS */, ...selector.classNames]
            : [];
        const elementName = selector.element && selector.element !== '*' ? selector.element : '';
        return [elementName, ...selector.attrs, ...classes];
    }
    function parserSelectorToNegativeSelector(selector) {
        const classes = selector.classNames && selector.classNames.length
            ? [8 /* SelectorFlags.CLASS */, ...selector.classNames]
            : [];
        if (selector.element) {
            return [
                1 /* SelectorFlags.NOT */ | 4 /* SelectorFlags.ELEMENT */,
                selector.element,
                ...selector.attrs,
                ...classes,
            ];
        }
        else if (selector.attrs.length) {
            return [1 /* SelectorFlags.NOT */ | 2 /* SelectorFlags.ATTRIBUTE */, ...selector.attrs, ...classes];
        }
        else {
            return selector.classNames && selector.classNames.length
                ? [1 /* SelectorFlags.NOT */ | 8 /* SelectorFlags.CLASS */, ...selector.classNames]
                : [];
        }
    }
    function parserSelectorToR3Selector(selector) {
        const positive = parserSelectorToSimpleSelector(selector);
        const negative = selector.notSelectors && selector.notSelectors.length
            ? selector.notSelectors.map((notSelector) => parserSelectorToNegativeSelector(notSelector))
            : [];
        return positive.concat(...negative);
    }
    function parseSelectorToR3Selector(selector) {
        return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A lazily created TextEncoder instance for converting strings into UTF-8 bytes
     */
    let textEncoder;
    /**
     * Compute the message id using the XLIFF1 digest.
     */
    function computeDigest(message) {
        return sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);
    }
    /**
     * Return the message id or compute it using the XLIFF2/XMB/$localize digest.
     */
    function decimalDigest(message) {
        return message.id || computeDecimalDigest(message);
    }
    /**
     * Compute the message id using the XLIFF2/XMB/$localize digest.
     */
    function computeDecimalDigest(message) {
        const visitor = new _SerializerIgnoreIcuExpVisitor();
        const parts = message.nodes.map((a) => a.visit(visitor, null));
        return computeMsgId(parts.join(''), message.meaning);
    }
    /**
     * Serialize the i18n ast to something xml-like in order to generate an UID.
     *
     * The visitor is also used in the i18n parser tests
     *
     * @internal
     */
    class _SerializerVisitor {
        visitText(text, context) {
            return text.value;
        }
        visitContainer(container, context) {
            return `[${container.children.map((child) => child.visit(this)).join(', ')}]`;
        }
        visitIcu(icu, context) {
            const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
            return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;
        }
        visitTagPlaceholder(ph, context) {
            return ph.isVoid
                ? `<ph tag name="${ph.startName}"/>`
                : `<ph tag name="${ph.startName}">${ph.children
                .map((child) => child.visit(this))
                .join(', ')}</ph name="${ph.closeName}">`;
        }
        visitPlaceholder(ph, context) {
            return ph.value ? `<ph name="${ph.name}">${ph.value}</ph>` : `<ph name="${ph.name}"/>`;
        }
        visitIcuPlaceholder(ph, context) {
            return `<ph icu name="${ph.name}">${ph.value.visit(this)}</ph>`;
        }
        visitBlockPlaceholder(ph, context) {
            return `<ph block name="${ph.startName}">${ph.children
            .map((child) => child.visit(this))
            .join(', ')}</ph name="${ph.closeName}">`;
        }
    }
    const serializerVisitor$1 = new _SerializerVisitor();
    function serializeNodes(nodes) {
        return nodes.map((a) => a.visit(serializerVisitor$1, null));
    }
    /**
     * Serialize the i18n ast to something xml-like in order to generate an UID.
     *
     * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
     *
     * @internal
     */
    class _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {
        visitIcu(icu, context) {
            let strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
            // Do not take the expression into account
            return `{${icu.type}, ${strCases.join(', ')}}`;
        }
    }
    /**
     * Compute the SHA1 of the given string
     *
     * see https://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
     *
     * WARNING: this function has not been designed not tested with security in mind.
     *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
     */
    function sha1(str) {
        textEncoder ??= new TextEncoder();
        const utf8 = [...textEncoder.encode(str)];
        const words32 = bytesToWords32(utf8, Endian.Big);
        const len = utf8.length * 8;
        const w = new Uint32Array(80);
        let a = 0x67452301, b = 0xefcdab89, c = 0x98badcfe, d = 0x10325476, e = 0xc3d2e1f0;
        words32[len >> 5] |= 0x80 << (24 - (len % 32));
        words32[(((len + 64) >> 9) << 4) + 15] = len;
        for (let i = 0; i < words32.length; i += 16) {
            const h0 = a, h1 = b, h2 = c, h3 = d, h4 = e;
            for (let j = 0; j < 80; j++) {
                if (j < 16) {
                    w[j] = words32[i + j];
                }
                else {
                    w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
                }
                const fkVal = fk(j, b, c, d);
                const f = fkVal[0];
                const k = fkVal[1];
                const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
                e = d;
                d = c;
                c = rol32(b, 30);
                b = a;
                a = temp;
            }
            a = add32(a, h0);
            b = add32(b, h1);
            c = add32(c, h2);
            d = add32(d, h3);
            e = add32(e, h4);
        }
        // Convert the output parts to a 160-bit hexadecimal string
        return toHexU32(a) + toHexU32(b) + toHexU32(c) + toHexU32(d) + toHexU32(e);
    }
    /**
     * Convert and format a number as a string representing a 32-bit unsigned hexadecimal number.
     * @param value The value to format as a string.
     * @returns A hexadecimal string representing the value.
     */
    function toHexU32(value) {
        // unsigned right shift of zero ensures an unsigned 32-bit number
        return (value >>> 0).toString(16).padStart(8, '0');
    }
    function fk(index, b, c, d) {
        if (index < 20) {
            return [(b & c) | (~b & d), 0x5a827999];
        }
        if (index < 40) {
            return [b ^ c ^ d, 0x6ed9eba1];
        }
        if (index < 60) {
            return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
        }
        return [b ^ c ^ d, 0xca62c1d6];
    }
    /**
     * Compute the fingerprint of the given string
     *
     * The output is 64 bit number encoded as a decimal string
     *
     * based on:
     * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
     */
    function fingerprint(str) {
        textEncoder ??= new TextEncoder();
        const utf8 = textEncoder.encode(str);
        const view = new DataView(utf8.buffer, utf8.byteOffset, utf8.byteLength);
        let hi = hash32(view, utf8.length, 0);
        let lo = hash32(view, utf8.length, 102072);
        if (hi == 0 && (lo == 0 || lo == 1)) {
            hi = hi ^ 0x130f9bef;
            lo = lo ^ -0x6b5f56d8;
        }
        return (BigInt.asUintN(32, BigInt(hi)) << BigInt(32)) | BigInt.asUintN(32, BigInt(lo));
    }
    function computeMsgId(msg, meaning = '') {
        let msgFingerprint = fingerprint(msg);
        if (meaning) {
            // Rotate the 64-bit message fingerprint one bit to the left and then add the meaning
            // fingerprint.
            msgFingerprint =
                BigInt.asUintN(64, msgFingerprint << BigInt(1)) |
                    ((msgFingerprint >> BigInt(63)) & BigInt(1));
            msgFingerprint += fingerprint(meaning);
        }
        return BigInt.asUintN(63, msgFingerprint).toString();
    }
    function hash32(view, length, c) {
        let a = 0x9e3779b9, b = 0x9e3779b9;
        let index = 0;
        const end = length - 12;
        for (; index <= end; index += 12) {
            a += view.getUint32(index, true);
            b += view.getUint32(index + 4, true);
            c += view.getUint32(index + 8, true);
            const res = mix(a, b, c);
            (a = res[0]), (b = res[1]), (c = res[2]);
        }
        const remainder = length - index;
        // the first byte of c is reserved for the length
        c += length;
        if (remainder >= 4) {
            a += view.getUint32(index, true);
            index += 4;
            if (remainder >= 8) {
                b += view.getUint32(index, true);
                index += 4;
                // Partial 32-bit word for c
                if (remainder >= 9) {
                    c += view.getUint8(index++) << 8;
                }
                if (remainder >= 10) {
                    c += view.getUint8(index++) << 16;
                }
                if (remainder === 11) {
                    c += view.getUint8(index++) << 24;
                }
            }
            else {
                // Partial 32-bit word for b
                if (remainder >= 5) {
                    b += view.getUint8(index++);
                }
                if (remainder >= 6) {
                    b += view.getUint8(index++) << 8;
                }
                if (remainder === 7) {
                    b += view.getUint8(index++) << 16;
                }
            }
        }
        else {
            // Partial 32-bit word for a
            if (remainder >= 1) {
                a += view.getUint8(index++);
            }
            if (remainder >= 2) {
                a += view.getUint8(index++) << 8;
            }
            if (remainder === 3) {
                a += view.getUint8(index++) << 16;
            }
        }
        return mix(a, b, c)[2];
    }
    function mix(a, b, c) {
        a -= b;
        a -= c;
        a ^= c >>> 13;
        b -= c;
        b -= a;
        b ^= a << 8;
        c -= a;
        c -= b;
        c ^= b >>> 13;
        a -= b;
        a -= c;
        a ^= c >>> 12;
        b -= c;
        b -= a;
        b ^= a << 16;
        c -= a;
        c -= b;
        c ^= b >>> 5;
        a -= b;
        a -= c;
        a ^= c >>> 3;
        b -= c;
        b -= a;
        b ^= a << 10;
        c -= a;
        c -= b;
        c ^= b >>> 15;
        return [a, b, c];
    }
    // Utils
    var Endian;
    (function (Endian) {
        Endian[Endian["Little"] = 0] = "Little";
        Endian[Endian["Big"] = 1] = "Big";
    })(Endian || (Endian = {}));
    function add32(a, b) {
        return add32to64(a, b)[1];
    }
    function add32to64(a, b) {
        const low = (a & 0xffff) + (b & 0xffff);
        const high = (a >>> 16) + (b >>> 16) + (low >>> 16);
        return [high >>> 16, (high << 16) | (low & 0xffff)];
    }
    // Rotate a 32b number left `count` position
    function rol32(a, count) {
        return (a << count) | (a >>> (32 - count));
    }
    function bytesToWords32(bytes, endian) {
        const size = (bytes.length + 3) >>> 2;
        const words32 = [];
        for (let i = 0; i < size; i++) {
            words32[i] = wordAt(bytes, i * 4, endian);
        }
        return words32;
    }
    function byteAt(bytes, index) {
        return index >= bytes.length ? 0 : bytes[index];
    }
    function wordAt(bytes, index, endian) {
        let word = 0;
        if (endian === Endian.Big) {
            for (let i = 0; i < 4; i++) {
                word += byteAt(bytes, index + i) << (24 - 8 * i);
            }
        }
        else {
            for (let i = 0; i < 4; i++) {
                word += byteAt(bytes, index + i) << (8 * i);
            }
        }
        return word;
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    //// Types
    var TypeModifier;
    (function (TypeModifier) {
        TypeModifier[TypeModifier["None"] = 0] = "None";
        TypeModifier[TypeModifier["Const"] = 1] = "Const";
    })(TypeModifier || (TypeModifier = {}));
    class Type {
        constructor(modifiers = TypeModifier.None) {
            this.modifiers = modifiers;
        }
        hasModifier(modifier) {
            return (this.modifiers & modifier) !== 0;
        }
    }
    var BuiltinTypeName;
    (function (BuiltinTypeName) {
        BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
        BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
        BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
        BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
        BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
        BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
        BuiltinTypeName[BuiltinTypeName["Inferred"] = 6] = "Inferred";
        BuiltinTypeName[BuiltinTypeName["None"] = 7] = "None";
    })(BuiltinTypeName || (BuiltinTypeName = {}));
    class BuiltinType extends Type {
        constructor(name, modifiers) {
            super(modifiers);
            this.name = name;
        }
        visitType(visitor, context) {
            return visitor.visitBuiltinType(this, context);
        }
    }
    class ExpressionType extends Type {
        constructor(value, modifiers, typeParams = null) {
            super(modifiers);
            this.value = value;
            this.typeParams = typeParams;
        }
        visitType(visitor, context) {
            return visitor.visitExpressionType(this, context);
        }
    }
    class TransplantedType extends Type {
        constructor(type, modifiers) {
            super(modifiers);
            this.type = type;
        }
        visitType(visitor, context) {
            return visitor.visitTransplantedType(this, context);
        }
    }
    const DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
    const INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
    const BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
    new BuiltinType(BuiltinTypeName.Int);
    const NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
    const STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
    new BuiltinType(BuiltinTypeName.Function);
    const NONE_TYPE = new BuiltinType(BuiltinTypeName.None);
    ///// Expressions
    var UnaryOperator;
    (function (UnaryOperator) {
        UnaryOperator[UnaryOperator["Minus"] = 0] = "Minus";
        UnaryOperator[UnaryOperator["Plus"] = 1] = "Plus";
    })(UnaryOperator || (UnaryOperator = {}));
    var BinaryOperator;
    (function (BinaryOperator) {
        BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
        BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
        BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
        BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
        BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
        BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
        BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
        BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
        BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
        BinaryOperator[BinaryOperator["And"] = 9] = "And";
        BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
        BinaryOperator[BinaryOperator["BitwiseOr"] = 11] = "BitwiseOr";
        BinaryOperator[BinaryOperator["BitwiseAnd"] = 12] = "BitwiseAnd";
        BinaryOperator[BinaryOperator["Lower"] = 13] = "Lower";
        BinaryOperator[BinaryOperator["LowerEquals"] = 14] = "LowerEquals";
        BinaryOperator[BinaryOperator["Bigger"] = 15] = "Bigger";
        BinaryOperator[BinaryOperator["BiggerEquals"] = 16] = "BiggerEquals";
        BinaryOperator[BinaryOperator["NullishCoalesce"] = 17] = "NullishCoalesce";
    })(BinaryOperator || (BinaryOperator = {}));
    function nullSafeIsEquivalent(base, other) {
        if (base == null || other == null) {
            return base == other;
        }
        return base.isEquivalent(other);
    }
    function areAllEquivalentPredicate(base, other, equivalentPredicate) {
        const len = base.length;
        if (len !== other.length) {
            return false;
        }
        for (let i = 0; i < len; i++) {
            if (!equivalentPredicate(base[i], other[i])) {
                return false;
            }
        }
        return true;
    }
    function areAllEquivalent(base, other) {
        return areAllEquivalentPredicate(base, other, (baseElement, otherElement) => baseElement.isEquivalent(otherElement));
    }
    class Expression {
        constructor(type, sourceSpan) {
            this.type = type || null;
            this.sourceSpan = sourceSpan || null;
        }
        prop(name, sourceSpan) {
            return new ReadPropExpr(this, name, null, sourceSpan);
        }
        key(index, type, sourceSpan) {
            return new ReadKeyExpr(this, index, type, sourceSpan);
        }
        callFn(params, sourceSpan, pure) {
            return new InvokeFunctionExpr(this, params, null, sourceSpan, pure);
        }
        instantiate(params, type, sourceSpan) {
            return new InstantiateExpr(this, params, type, sourceSpan);
        }
        conditional(trueCase, falseCase = null, sourceSpan) {
            return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
        }
        equals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
        }
        notEquals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
        }
        identical(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
        }
        notIdentical(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
        }
        minus(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
        }
        plus(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
        }
        divide(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
        }
        multiply(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
        }
        modulo(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
        }
        and(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
        }
        bitwiseOr(rhs, sourceSpan, parens = true) {
            return new BinaryOperatorExpr(BinaryOperator.BitwiseOr, this, rhs, null, sourceSpan, parens);
        }
        bitwiseAnd(rhs, sourceSpan, parens = true) {
            return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);
        }
        or(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
        }
        lower(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
        }
        lowerEquals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
        }
        bigger(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
        }
        biggerEquals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
        }
        isBlank(sourceSpan) {
            // Note: We use equals by purpose here to compare to null and undefined in JS.
            // We use the typed null to allow strictNullChecks to narrow types.
            return this.equals(TYPED_NULL_EXPR, sourceSpan);
        }
        nullishCoalesce(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.NullishCoalesce, this, rhs, null, sourceSpan);
        }
        toStmt() {
            return new ExpressionStatement(this, null);
        }
    }
    class ReadVarExpr extends Expression {
        constructor(name, type, sourceSpan) {
            super(type, sourceSpan);
            this.name = name;
        }
        isEquivalent(e) {
            return e instanceof ReadVarExpr && this.name === e.name;
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitReadVarExpr(this, context);
        }
        clone() {
            return new ReadVarExpr(this.name, this.type, this.sourceSpan);
        }
        set(value) {
            return new WriteVarExpr(this.name, value, null, this.sourceSpan);
        }
    }
    class TypeofExpr extends Expression {
        constructor(expr, type, sourceSpan) {
            super(type, sourceSpan);
            this.expr = expr;
        }
        visitExpression(visitor, context) {
            return visitor.visitTypeofExpr(this, context);
        }
        isEquivalent(e) {
            return e instanceof TypeofExpr && e.expr.isEquivalent(this.expr);
        }
        isConstant() {
            return this.expr.isConstant();
        }
        clone() {
            return new TypeofExpr(this.expr.clone());
        }
    }
    class WrappedNodeExpr extends Expression {
        constructor(node, type, sourceSpan) {
            super(type, sourceSpan);
            this.node = node;
        }
        isEquivalent(e) {
            return e instanceof WrappedNodeExpr && this.node === e.node;
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitWrappedNodeExpr(this, context);
        }
        clone() {
            return new WrappedNodeExpr(this.node, this.type, this.sourceSpan);
        }
    }
    class WriteVarExpr extends Expression {
        constructor(name, value, type, sourceSpan) {
            super(type || value.type, sourceSpan);
            this.name = name;
            this.value = value;
        }
        isEquivalent(e) {
            return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitWriteVarExpr(this, context);
        }
        clone() {
            return new WriteVarExpr(this.name, this.value.clone(), this.type, this.sourceSpan);
        }
        toDeclStmt(type, modifiers) {
            return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
        }
        toConstDecl() {
            return this.toDeclStmt(INFERRED_TYPE, StmtModifier.Final);
        }
    }
    class WriteKeyExpr extends Expression {
        constructor(receiver, index, value, type, sourceSpan) {
            super(type || value.type, sourceSpan);
            this.receiver = receiver;
            this.index = index;
            this.value = value;
        }
        isEquivalent(e) {
            return (e instanceof WriteKeyExpr &&
                this.receiver.isEquivalent(e.receiver) &&
                this.index.isEquivalent(e.index) &&
                this.value.isEquivalent(e.value));
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitWriteKeyExpr(this, context);
        }
        clone() {
            return new WriteKeyExpr(this.receiver.clone(), this.index.clone(), this.value.clone(), this.type, this.sourceSpan);
        }
    }
    class WritePropExpr extends Expression {
        constructor(receiver, name, value, type, sourceSpan) {
            super(type || value.type, sourceSpan);
            this.receiver = receiver;
            this.name = name;
            this.value = value;
        }
        isEquivalent(e) {
            return (e instanceof WritePropExpr &&
                this.receiver.isEquivalent(e.receiver) &&
                this.name === e.name &&
                this.value.isEquivalent(e.value));
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitWritePropExpr(this, context);
        }
        clone() {
            return new WritePropExpr(this.receiver.clone(), this.name, this.value.clone(), this.type, this.sourceSpan);
        }
    }
    class InvokeFunctionExpr extends Expression {
        constructor(fn, args, type, sourceSpan, pure = false) {
            super(type, sourceSpan);
            this.fn = fn;
            this.args = args;
            this.pure = pure;
        }
        // An alias for fn, which allows other logic to handle calls and property reads together.
        get receiver() {
            return this.fn;
        }
        isEquivalent(e) {
            return (e instanceof InvokeFunctionExpr &&
                this.fn.isEquivalent(e.fn) &&
                areAllEquivalent(this.args, e.args) &&
                this.pure === e.pure);
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitInvokeFunctionExpr(this, context);
        }
        clone() {
            return new InvokeFunctionExpr(this.fn.clone(), this.args.map((arg) => arg.clone()), this.type, this.sourceSpan, this.pure);
        }
    }
    class TaggedTemplateExpr extends Expression {
        constructor(tag, template, type, sourceSpan) {
            super(type, sourceSpan);
            this.tag = tag;
            this.template = template;
        }
        isEquivalent(e) {
            return (e instanceof TaggedTemplateExpr &&
                this.tag.isEquivalent(e.tag) &&
                areAllEquivalentPredicate(this.template.elements, e.template.elements, (a, b) => a.text === b.text) &&
                areAllEquivalent(this.template.expressions, e.template.expressions));
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitTaggedTemplateExpr(this, context);
        }
        clone() {
            return new TaggedTemplateExpr(this.tag.clone(), this.template.clone(), this.type, this.sourceSpan);
        }
    }
    class InstantiateExpr extends Expression {
        constructor(classExpr, args, type, sourceSpan) {
            super(type, sourceSpan);
            this.classExpr = classExpr;
            this.args = args;
        }
        isEquivalent(e) {
            return (e instanceof InstantiateExpr &&
                this.classExpr.isEquivalent(e.classExpr) &&
                areAllEquivalent(this.args, e.args));
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitInstantiateExpr(this, context);
        }
        clone() {
            return new InstantiateExpr(this.classExpr.clone(), this.args.map((arg) => arg.clone()), this.type, this.sourceSpan);
        }
    }
    class LiteralExpr extends Expression {
        constructor(value, type, sourceSpan) {
            super(type, sourceSpan);
            this.value = value;
        }
        isEquivalent(e) {
            return e instanceof LiteralExpr && this.value === e.value;
        }
        isConstant() {
            return true;
        }
        visitExpression(visitor, context) {
            return visitor.visitLiteralExpr(this, context);
        }
        clone() {
            return new LiteralExpr(this.value, this.type, this.sourceSpan);
        }
    }
    class TemplateLiteral {
        constructor(elements, expressions) {
            this.elements = elements;
            this.expressions = expressions;
        }
        clone() {
            return new TemplateLiteral(this.elements.map((el) => el.clone()), this.expressions.map((expr) => expr.clone()));
        }
    }
    class TemplateLiteralElement {
        constructor(text, sourceSpan, rawText) {
            this.text = text;
            this.sourceSpan = sourceSpan;
            // If `rawText` is not provided, try to extract the raw string from its
            // associated `sourceSpan`. If that is also not available, "fake" the raw
            // string instead by escaping the following control sequences:
            // - "\" would otherwise indicate that the next character is a control character.
            // - "`" and "${" are template string control sequences that would otherwise prematurely
            // indicate the end of the template literal element.
            this.rawText =
                rawText ?? sourceSpan?.toString() ?? escapeForTemplateLiteral(escapeSlashes(text));
        }
        clone() {
            return new TemplateLiteralElement(this.text, this.sourceSpan, this.rawText);
        }
    }
    class LiteralPiece {
        constructor(text, sourceSpan) {
            this.text = text;
            this.sourceSpan = sourceSpan;
        }
    }
    class PlaceholderPiece {
        /**
         * Create a new instance of a `PlaceholderPiece`.
         *
         * @param text the name of this placeholder (e.g. `PH_1`).
         * @param sourceSpan the location of this placeholder in its localized message the source code.
         * @param associatedMessage reference to another message that this placeholder is associated with.
         * The `associatedMessage` is mainly used to provide a relationship to an ICU message that has
         * been extracted out from the message containing the placeholder.
         */
        constructor(text, sourceSpan, associatedMessage) {
            this.text = text;
            this.sourceSpan = sourceSpan;
            this.associatedMessage = associatedMessage;
        }
    }
    const MEANING_SEPARATOR = '|';
    const ID_SEPARATOR = '@@';
    const LEGACY_ID_INDICATOR = '␟';
    class LocalizedString extends Expression {
        constructor(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {
            super(STRING_TYPE, sourceSpan);
            this.metaBlock = metaBlock;
            this.messageParts = messageParts;
            this.placeHolderNames = placeHolderNames;
            this.expressions = expressions;
        }
        isEquivalent(e) {
            // return e instanceof LocalizedString && this.message === e.message;
            return false;
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitLocalizedString(this, context);
        }
        clone() {
            return new LocalizedString(this.metaBlock, this.messageParts, this.placeHolderNames, this.expressions.map((expr) => expr.clone()), this.sourceSpan);
        }
        /**
         * Serialize the given `meta` and `messagePart` into "cooked" and "raw" strings that can be used
         * in a `$localize` tagged string. The format of the metadata is the same as that parsed by
         * `parseI18nMeta()`.
         *
         * @param meta The metadata to serialize
         * @param messagePart The first part of the tagged string
         */
        serializeI18nHead() {
            let metaBlock = this.metaBlock.description || '';
            if (this.metaBlock.meaning) {
                metaBlock = `${this.metaBlock.meaning}${MEANING_SEPARATOR}${metaBlock}`;
            }
            if (this.metaBlock.customId) {
                metaBlock = `${metaBlock}${ID_SEPARATOR}${this.metaBlock.customId}`;
            }
            if (this.metaBlock.legacyIds) {
                this.metaBlock.legacyIds.forEach((legacyId) => {
                    metaBlock = `${metaBlock}${LEGACY_ID_INDICATOR}${legacyId}`;
                });
            }
            return createCookedRawString(metaBlock, this.messageParts[0].text, this.getMessagePartSourceSpan(0));
        }
        getMessagePartSourceSpan(i) {
            return this.messageParts[i]?.sourceSpan ?? this.sourceSpan;
        }
        getPlaceholderSourceSpan(i) {
            return (this.placeHolderNames[i]?.sourceSpan ?? this.expressions[i]?.sourceSpan ?? this.sourceSpan);
        }
        /**
         * Serialize the given `placeholderName` and `messagePart` into "cooked" and "raw" strings that
         * can be used in a `$localize` tagged string.
         *
         * The format is `:<placeholder-name>[@@<associated-id>]:`.
         *
         * The `associated-id` is the message id of the (usually an ICU) message to which this placeholder
         * refers.
         *
         * @param partIndex The index of the message part to serialize.
         */
        serializeI18nTemplatePart(partIndex) {
            const placeholder = this.placeHolderNames[partIndex - 1];
            const messagePart = this.messageParts[partIndex];
            let metaBlock = placeholder.text;
            if (placeholder.associatedMessage?.legacyIds.length === 0) {
                metaBlock += `${ID_SEPARATOR}${computeMsgId(placeholder.associatedMessage.messageString, placeholder.associatedMessage.meaning)}`;
            }
            return createCookedRawString(metaBlock, messagePart.text, this.getMessagePartSourceSpan(partIndex));
        }
    }
    const escapeSlashes = (str) => str.replace(/\\/g, '\\\\');
    const escapeStartingColon = (str) => str.replace(/^:/, '\\:');
    const escapeColons = (str) => str.replace(/:/g, '\\:');
    const escapeForTemplateLiteral = (str) => str.replace(/`/g, '\\`').replace(/\${/g, '$\\{');
    /**
     * Creates a `{cooked, raw}` object from the `metaBlock` and `messagePart`.
     *
     * The `raw` text must have various character sequences escaped:
     * * "\" would otherwise indicate that the next character is a control character.
     * * "`" and "${" are template string control sequences that would otherwise prematurely indicate
     *   the end of a message part.
     * * ":" inside a metablock would prematurely indicate the end of the metablock.
     * * ":" at the start of a messagePart with no metablock would erroneously indicate the start of a
     *   metablock.
     *
     * @param metaBlock Any metadata that should be prepended to the string
     * @param messagePart The message part of the string
     */
    function createCookedRawString(metaBlock, messagePart, range) {
        if (metaBlock === '') {
            return {
                cooked: messagePart,
                raw: escapeForTemplateLiteral(escapeStartingColon(escapeSlashes(messagePart))),
                range,
            };
        }
        else {
            return {
                cooked: `:${metaBlock}:${messagePart}`,
                raw: escapeForTemplateLiteral(`:${escapeColons(escapeSlashes(metaBlock))}:${escapeSlashes(messagePart)}`),
                range,
            };
        }
    }
    class ExternalExpr extends Expression {
        constructor(value, type, typeParams = null, sourceSpan) {
            super(type, sourceSpan);
            this.value = value;
            this.typeParams = typeParams;
        }
        isEquivalent(e) {
            return (e instanceof ExternalExpr &&
                this.value.name === e.value.name &&
                this.value.moduleName === e.value.moduleName &&
                this.value.runtime === e.value.runtime);
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitExternalExpr(this, context);
        }
        clone() {
            return new ExternalExpr(this.value, this.type, this.typeParams, this.sourceSpan);
        }
    }
    class ExternalReference {
        constructor(moduleName, name, runtime) {
            this.moduleName = moduleName;
            this.name = name;
            this.runtime = runtime;
        }
    }
    class ConditionalExpr extends Expression {
        constructor(condition, trueCase, falseCase = null, type, sourceSpan) {
            super(type || trueCase.type, sourceSpan);
            this.condition = condition;
            this.falseCase = falseCase;
            this.trueCase = trueCase;
        }
        isEquivalent(e) {
            return (e instanceof ConditionalExpr &&
                this.condition.isEquivalent(e.condition) &&
                this.trueCase.isEquivalent(e.trueCase) &&
                nullSafeIsEquivalent(this.falseCase, e.falseCase));
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitConditionalExpr(this, context);
        }
        clone() {
            return new ConditionalExpr(this.condition.clone(), this.trueCase.clone(), this.falseCase?.clone(), this.type, this.sourceSpan);
        }
    }
    class DynamicImportExpr extends Expression {
        constructor(url, sourceSpan) {
            super(null, sourceSpan);
            this.url = url;
        }
        isEquivalent(e) {
            return e instanceof DynamicImportExpr && this.url === e.url;
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitDynamicImportExpr(this, context);
        }
        clone() {
            return new DynamicImportExpr(this.url, this.sourceSpan);
        }
    }
    class NotExpr extends Expression {
        constructor(condition, sourceSpan) {
            super(BOOL_TYPE, sourceSpan);
            this.condition = condition;
        }
        isEquivalent(e) {
            return e instanceof NotExpr && this.condition.isEquivalent(e.condition);
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitNotExpr(this, context);
        }
        clone() {
            return new NotExpr(this.condition.clone(), this.sourceSpan);
        }
    }
    class FnParam {
        constructor(name, type = null) {
            this.name = name;
            this.type = type;
        }
        isEquivalent(param) {
            return this.name === param.name;
        }
        clone() {
            return new FnParam(this.name, this.type);
        }
    }
    class FunctionExpr extends Expression {
        constructor(params, statements, type, sourceSpan, name) {
            super(type, sourceSpan);
            this.params = params;
            this.statements = statements;
            this.name = name;
        }
        isEquivalent(e) {
            return ((e instanceof FunctionExpr || e instanceof DeclareFunctionStmt) &&
                areAllEquivalent(this.params, e.params) &&
                areAllEquivalent(this.statements, e.statements));
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitFunctionExpr(this, context);
        }
        toDeclStmt(name, modifiers) {
            return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
        }
        clone() {
            // TODO: Should we deep clone statements?
            return new FunctionExpr(this.params.map((p) => p.clone()), this.statements, this.type, this.sourceSpan, this.name);
        }
    }
    class ArrowFunctionExpr extends Expression {
        // Note that `body: Expression` represents `() => expr` whereas
        // `body: Statement[]` represents `() => { expr }`.
        constructor(params, body, type, sourceSpan) {
            super(type, sourceSpan);
            this.params = params;
            this.body = body;
        }
        isEquivalent(e) {
            if (!(e instanceof ArrowFunctionExpr) || !areAllEquivalent(this.params, e.params)) {
                return false;
            }
            if (this.body instanceof Expression && e.body instanceof Expression) {
                return this.body.isEquivalent(e.body);
            }
            if (Array.isArray(this.body) && Array.isArray(e.body)) {
                return areAllEquivalent(this.body, e.body);
            }
            return false;
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitArrowFunctionExpr(this, context);
        }
        clone() {
            // TODO: Should we deep clone statements?
            return new ArrowFunctionExpr(this.params.map((p) => p.clone()), Array.isArray(this.body) ? this.body : this.body.clone(), this.type, this.sourceSpan);
        }
        toDeclStmt(name, modifiers) {
            return new DeclareVarStmt(name, this, INFERRED_TYPE, modifiers, this.sourceSpan);
        }
    }
    class UnaryOperatorExpr extends Expression {
        constructor(operator, expr, type, sourceSpan, parens = true) {
            super(type || NUMBER_TYPE, sourceSpan);
            this.operator = operator;
            this.expr = expr;
            this.parens = parens;
        }
        isEquivalent(e) {
            return (e instanceof UnaryOperatorExpr &&
                this.operator === e.operator &&
                this.expr.isEquivalent(e.expr));
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitUnaryOperatorExpr(this, context);
        }
        clone() {
            return new UnaryOperatorExpr(this.operator, this.expr.clone(), this.type, this.sourceSpan, this.parens);
        }
    }
    class BinaryOperatorExpr extends Expression {
        constructor(operator, lhs, rhs, type, sourceSpan, parens = true) {
            super(type || lhs.type, sourceSpan);
            this.operator = operator;
            this.rhs = rhs;
            this.parens = parens;
            this.lhs = lhs;
        }
        isEquivalent(e) {
            return (e instanceof BinaryOperatorExpr &&
                this.operator === e.operator &&
                this.lhs.isEquivalent(e.lhs) &&
                this.rhs.isEquivalent(e.rhs));
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitBinaryOperatorExpr(this, context);
        }
        clone() {
            return new BinaryOperatorExpr(this.operator, this.lhs.clone(), this.rhs.clone(), this.type, this.sourceSpan, this.parens);
        }
    }
    class ReadPropExpr extends Expression {
        constructor(receiver, name, type, sourceSpan) {
            super(type, sourceSpan);
            this.receiver = receiver;
            this.name = name;
        }
        // An alias for name, which allows other logic to handle property reads and keyed reads together.
        get index() {
            return this.name;
        }
        isEquivalent(e) {
            return (e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name);
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitReadPropExpr(this, context);
        }
        set(value) {
            return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
        }
        clone() {
            return new ReadPropExpr(this.receiver.clone(), this.name, this.type, this.sourceSpan);
        }
    }
    class ReadKeyExpr extends Expression {
        constructor(receiver, index, type, sourceSpan) {
            super(type, sourceSpan);
            this.receiver = receiver;
            this.index = index;
        }
        isEquivalent(e) {
            return (e instanceof ReadKeyExpr &&
                this.receiver.isEquivalent(e.receiver) &&
                this.index.isEquivalent(e.index));
        }
        isConstant() {
            return false;
        }
        visitExpression(visitor, context) {
            return visitor.visitReadKeyExpr(this, context);
        }
        set(value) {
            return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
        }
        clone() {
            return new ReadKeyExpr(this.receiver.clone(), this.index.clone(), this.type, this.sourceSpan);
        }
    }
    class LiteralArrayExpr extends Expression {
        constructor(entries, type, sourceSpan) {
            super(type, sourceSpan);
            this.entries = entries;
        }
        isConstant() {
            return this.entries.every((e) => e.isConstant());
        }
        isEquivalent(e) {
            return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);
        }
        visitExpression(visitor, context) {
            return visitor.visitLiteralArrayExpr(this, context);
        }
        clone() {
            return new LiteralArrayExpr(this.entries.map((e) => e.clone()), this.type, this.sourceSpan);
        }
    }
    class LiteralMapEntry {
        constructor(key, value, quoted) {
            this.key = key;
            this.value = value;
            this.quoted = quoted;
        }
        isEquivalent(e) {
            return this.key === e.key && this.value.isEquivalent(e.value);
        }
        clone() {
            return new LiteralMapEntry(this.key, this.value.clone(), this.quoted);
        }
    }
    class LiteralMapExpr extends Expression {
        constructor(entries, type, sourceSpan) {
            super(type, sourceSpan);
            this.entries = entries;
            this.valueType = null;
            if (type) {
                this.valueType = type.valueType;
            }
        }
        isEquivalent(e) {
            return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);
        }
        isConstant() {
            return this.entries.every((e) => e.value.isConstant());
        }
        visitExpression(visitor, context) {
            return visitor.visitLiteralMapExpr(this, context);
        }
        clone() {
            const entriesClone = this.entries.map((entry) => entry.clone());
            return new LiteralMapExpr(entriesClone, this.type, this.sourceSpan);
        }
    }
    const NULL_EXPR = new LiteralExpr(null, null, null);
    const TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);
    //// Statements
    var StmtModifier;
    (function (StmtModifier) {
        StmtModifier[StmtModifier["None"] = 0] = "None";
        StmtModifier[StmtModifier["Final"] = 1] = "Final";
        StmtModifier[StmtModifier["Private"] = 2] = "Private";
        StmtModifier[StmtModifier["Exported"] = 4] = "Exported";
        StmtModifier[StmtModifier["Static"] = 8] = "Static";
    })(StmtModifier || (StmtModifier = {}));
    class LeadingComment {
        constructor(text, multiline, trailingNewline) {
            this.text = text;
            this.multiline = multiline;
            this.trailingNewline = trailingNewline;
        }
        toString() {
            return this.multiline ? ` ${this.text} ` : this.text;
        }
    }
    class JSDocComment extends LeadingComment {
        constructor(tags) {
            super('', /* multiline */ true, /* trailingNewline */ true);
            this.tags = tags;
        }
        toString() {
            return serializeTags(this.tags);
        }
    }
    class Statement {
        constructor(modifiers = StmtModifier.None, sourceSpan = null, leadingComments) {
            this.modifiers = modifiers;
            this.sourceSpan = sourceSpan;
            this.leadingComments = leadingComments;
        }
        hasModifier(modifier) {
            return (this.modifiers & modifier) !== 0;
        }
        addLeadingComment(leadingComment) {
            this.leadingComments = this.leadingComments ?? [];
            this.leadingComments.push(leadingComment);
        }
    }
    class DeclareVarStmt extends Statement {
        constructor(name, value, type, modifiers, sourceSpan, leadingComments) {
            super(modifiers, sourceSpan, leadingComments);
            this.name = name;
            this.value = value;
            this.type = type || (value && value.type) || null;
        }
        isEquivalent(stmt) {
            return (stmt instanceof DeclareVarStmt &&
                this.name === stmt.name &&
                (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value));
        }
        visitStatement(visitor, context) {
            return visitor.visitDeclareVarStmt(this, context);
        }
    }
    class DeclareFunctionStmt extends Statement {
        constructor(name, params, statements, type, modifiers, sourceSpan, leadingComments) {
            super(modifiers, sourceSpan, leadingComments);
            this.name = name;
            this.params = params;
            this.statements = statements;
            this.type = type || null;
        }
        isEquivalent(stmt) {
            return (stmt instanceof DeclareFunctionStmt &&
                areAllEquivalent(this.params, stmt.params) &&
                areAllEquivalent(this.statements, stmt.statements));
        }
        visitStatement(visitor, context) {
            return visitor.visitDeclareFunctionStmt(this, context);
        }
    }
    class ExpressionStatement extends Statement {
        constructor(expr, sourceSpan, leadingComments) {
            super(StmtModifier.None, sourceSpan, leadingComments);
            this.expr = expr;
        }
        isEquivalent(stmt) {
            return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);
        }
        visitStatement(visitor, context) {
            return visitor.visitExpressionStmt(this, context);
        }
    }
    class ReturnStatement extends Statement {
        constructor(value, sourceSpan = null, leadingComments) {
            super(StmtModifier.None, sourceSpan, leadingComments);
            this.value = value;
        }
        isEquivalent(stmt) {
            return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);
        }
        visitStatement(visitor, context) {
            return visitor.visitReturnStmt(this, context);
        }
    }
    class IfStmt extends Statement {
        constructor(condition, trueCase, falseCase = [], sourceSpan, leadingComments) {
            super(StmtModifier.None, sourceSpan, leadingComments);
            this.condition = condition;
            this.trueCase = trueCase;
            this.falseCase = falseCase;
        }
        isEquivalent(stmt) {
            return (stmt instanceof IfStmt &&
                this.condition.isEquivalent(stmt.condition) &&
                areAllEquivalent(this.trueCase, stmt.trueCase) &&
                areAllEquivalent(this.falseCase, stmt.falseCase));
        }
        visitStatement(visitor, context) {
            return visitor.visitIfStmt(this, context);
        }
    }
    function jsDocComment(tags = []) {
        return new JSDocComment(tags);
    }
    function variable(name, type, sourceSpan) {
        return new ReadVarExpr(name, type, sourceSpan);
    }
    function importExpr(id, typeParams = null, sourceSpan) {
        return new ExternalExpr(id, null, typeParams, sourceSpan);
    }
    function expressionType(expr, typeModifiers, typeParams) {
        return new ExpressionType(expr, typeModifiers, typeParams);
    }
    function transplantedType(type, typeModifiers) {
        return new TransplantedType(type, typeModifiers);
    }
    function typeofExpr(expr) {
        return new TypeofExpr(expr);
    }
    function literalArr(values, type, sourceSpan) {
        return new LiteralArrayExpr(values, type, sourceSpan);
    }
    function literalMap(values, type = null) {
        return new LiteralMapExpr(values.map((e) => new LiteralMapEntry(e.key, e.value, e.quoted)), type, null);
    }
    function not(expr, sourceSpan) {
        return new NotExpr(expr, sourceSpan);
    }
    function fn(params, body, type, sourceSpan, name) {
        return new FunctionExpr(params, body, type, sourceSpan, name);
    }
    function arrowFn(params, body, type, sourceSpan) {
        return new ArrowFunctionExpr(params, body, type, sourceSpan);
    }
    function ifStmt(condition, thenClause, elseClause, sourceSpan, leadingComments) {
        return new IfStmt(condition, thenClause, elseClause, sourceSpan, leadingComments);
    }
    function taggedTemplate(tag, template, type, sourceSpan) {
        return new TaggedTemplateExpr(tag, template, type, sourceSpan);
    }
    function literal$1(value, type, sourceSpan) {
        return new LiteralExpr(value, type, sourceSpan);
    }
    function localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {
        return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);
    }
    /*
     * Serializes a `Tag` into a string.
     * Returns a string like " @foo {bar} baz" (note the leading whitespace before `@foo`).
     */
    function tagToString(tag) {
        let out = '';
        if (tag.tagName) {
            out += ` @${tag.tagName}`;
        }
        if (tag.text) {
            if (tag.text.match(/\/\*|\*\//)) {
                throw new Error('JSDoc text cannot contain "/*" and "*/"');
            }
            out += ' ' + tag.text.replace(/@/g, '\\@');
        }
        return out;
    }
    function serializeTags(tags) {
        if (tags.length === 0)
            return '';
        if (tags.length === 1 && tags[0].tagName && !tags[0].text) {
            // The JSDOC comment is a single simple tag: e.g `/** @tagname */`.
            return `*${tagToString(tags[0])} `;
        }
        let out = '*\n';
        for (const tag of tags) {
            out += ' *';
            // If the tagToString is multi-line, insert " * " prefixes on lines.
            out += tagToString(tag).replace(/\n/g, '\n * ');
            out += '\n';
        }
        out += ' ';
        return out;
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    const CONSTANT_PREFIX = '_c';
    /**
     * `ConstantPool` tries to reuse literal factories when two or more literals are identical.
     * We determine whether literals are identical by creating a key out of their AST using the
     * `KeyVisitor`. This constant is used to replace dynamic expressions which can't be safely
     * converted into a key. E.g. given an expression `{foo: bar()}`, since we don't know what
     * the result of `bar` will be, we create a key that looks like `{foo: <unknown>}`. Note
     * that we use a variable, rather than something like `null` in order to avoid collisions.
     */
    const UNKNOWN_VALUE_KEY = variable('<unknown>');
    /**
     * Context to use when producing a key.
     *
     * This ensures we see the constant not the reference variable when producing
     * a key.
     */
    const KEY_CONTEXT = {};
    /**
     * Generally all primitive values are excluded from the `ConstantPool`, but there is an exclusion
     * for strings that reach a certain length threshold. This constant defines the length threshold for
     * strings.
     */
    const POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;
    /**
     * A node that is a place-holder that allows the node to be replaced when the actual
     * node is known.
     *
     * This allows the constant pool to change an expression from a direct reference to
     * a constant to a shared constant. It returns a fix-up node that is later allowed to
     * change the referenced expression.
     */
    class FixupExpression extends Expression {
        constructor(resolved) {
            super(resolved.type);
            this.resolved = resolved;
            this.shared = false;
            this.original = resolved;
        }
        visitExpression(visitor, context) {
            if (context === KEY_CONTEXT) {
                // When producing a key we want to traverse the constant not the
                // variable used to refer to it.
                return this.original.visitExpression(visitor, context);
            }
            else {
                return this.resolved.visitExpression(visitor, context);
            }
        }
        isEquivalent(e) {
            return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);
        }
        isConstant() {
            return true;
        }
        clone() {
            throw new Error(`Not supported.`);
        }
        fixup(expression) {
            this.resolved = expression;
            this.shared = true;
        }
    }
    /**
     * A constant pool allows a code emitter to share constant in an output context.
     *
     * The constant pool also supports sharing access to ivy definitions references.
     */
    class ConstantPool {
        constructor(isClosureCompilerEnabled = false) {
            this.isClosureCompilerEnabled = isClosureCompilerEnabled;
            this.statements = [];
            this.literals = new Map();
            this.literalFactories = new Map();
            this.sharedConstants = new Map();
            /**
             * Constant pool also tracks claimed names from {@link uniqueName}.
             * This is useful to avoid collisions if variables are intended to be
             * named a certain way- but may conflict. We wouldn't want to always suffix
             * them with unique numbers.
             */
            this._claimedNames = new Map();
            this.nextNameIndex = 0;
        }
        getConstLiteral(literal, forceShared) {
            if ((literal instanceof LiteralExpr && !isLongStringLiteral(literal)) ||
                literal instanceof FixupExpression) {
                // Do no put simple literals into the constant pool or try to produce a constant for a
                // reference to a constant.
                return literal;
            }
            const key = GenericKeyFn.INSTANCE.keyOf(literal);
            let fixup = this.literals.get(key);
            let newValue = false;
            if (!fixup) {
                fixup = new FixupExpression(literal);
                this.literals.set(key, fixup);
                newValue = true;
            }
            if ((!newValue && !fixup.shared) || (newValue && forceShared)) {
                // Replace the expression with a variable
                const name = this.freshName();
                let definition;
                let usage;
                if (this.isClosureCompilerEnabled && isLongStringLiteral(literal)) {
                    // For string literals, Closure will **always** inline the string at
                    // **all** usages, duplicating it each time. For large strings, this
                    // unnecessarily bloats bundle size. To work around this restriction, we
                    // wrap the string in a function, and call that function for each usage.
                    // This tricks Closure into using inline logic for functions instead of
                    // string literals. Function calls are only inlined if the body is small
                    // enough to be worth it. By doing this, very large strings will be
                    // shared across multiple usages, rather than duplicating the string at
                    // each usage site.
                    //
                    // const myStr = function() { return "very very very long string"; };
                    // const usage1 = myStr();
                    // const usage2 = myStr();
                    definition = variable(name).set(new FunctionExpr([], // Params.
                    [
                        // Statements.
                        new ReturnStatement(literal),
                    ]));
                    usage = variable(name).callFn([]);
                }
                else {
                    // Just declare and use the variable directly, without a function call
                    // indirection. This saves a few bytes and avoids an unnecessary call.
                    definition = variable(name).set(literal);
                    usage = variable(name);
                }
                this.statements.push(definition.toDeclStmt(INFERRED_TYPE, StmtModifier.Final));
                fixup.fixup(usage);
            }
            return fixup;
        }
        getSharedConstant(def, expr) {
            const key = def.keyOf(expr);
            if (!this.sharedConstants.has(key)) {
                const id = this.freshName();
                this.sharedConstants.set(key, variable(id));
                this.statements.push(def.toSharedConstantDeclaration(id, expr));
            }
            return this.sharedConstants.get(key);
        }
        getLiteralFactory(literal) {
            // Create a pure function that builds an array of a mix of constant and variable expressions
            if (literal instanceof LiteralArrayExpr) {
                const argumentsForKey = literal.entries.map((e) => (e.isConstant() ? e : UNKNOWN_VALUE_KEY));
                const key = GenericKeyFn.INSTANCE.keyOf(literalArr(argumentsForKey));
                return this._getLiteralFactory(key, literal.entries, (entries) => literalArr(entries));
            }
            else {
                const expressionForKey = literalMap(literal.entries.map((e) => ({
                    key: e.key,
                    value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,
                    quoted: e.quoted,
                })));
                const key = GenericKeyFn.INSTANCE.keyOf(expressionForKey);
                return this._getLiteralFactory(key, literal.entries.map((e) => e.value), (entries) => literalMap(entries.map((value, index) => ({
                    key: literal.entries[index].key,
                    value,
                    quoted: literal.entries[index].quoted,
                }))));
            }
        }
        // TODO: useUniqueName(false) is necessary for naming compatibility with
        // TemplateDefinitionBuilder, but should be removed once Template Pipeline is the default.
        getSharedFunctionReference(fn, prefix, useUniqueName = true) {
            const isArrow = fn instanceof ArrowFunctionExpr;
            for (const current of this.statements) {
                // Arrow functions are saved as variables so we check if the
                // value of the variable is the same as the arrow function.
                if (isArrow && current instanceof DeclareVarStmt && current.value?.isEquivalent(fn)) {
                    return variable(current.name);
                }
                // Function declarations are saved as function statements
                // so we compare them directly to the passed-in function.
                if (!isArrow &&
                    current instanceof DeclareFunctionStmt &&
                    fn instanceof FunctionExpr &&
                    fn.isEquivalent(current)) {
                    return variable(current.name);
                }
            }
            // Otherwise declare the function.
            const name = useUniqueName ? this.uniqueName(prefix) : prefix;
            this.statements.push(fn instanceof FunctionExpr
                ? fn.toDeclStmt(name, StmtModifier.Final)
                : new DeclareVarStmt(name, fn, INFERRED_TYPE, StmtModifier.Final, fn.sourceSpan));
            return variable(name);
        }
        _getLiteralFactory(key, values, resultMap) {
            let literalFactory = this.literalFactories.get(key);
            const literalFactoryArguments = values.filter((e) => !e.isConstant());
            if (!literalFactory) {
                const resultExpressions = values.map((e, index) => e.isConstant() ? this.getConstLiteral(e, true) : variable(`a${index}`));
                const parameters = resultExpressions
                    .filter(isVariable)
                    .map((e) => new FnParam(e.name, DYNAMIC_TYPE));
                const pureFunctionDeclaration = arrowFn(parameters, resultMap(resultExpressions), INFERRED_TYPE);
                const name = this.freshName();
                this.statements.push(variable(name)
                    .set(pureFunctionDeclaration)
                    .toDeclStmt(INFERRED_TYPE, StmtModifier.Final));
                literalFactory = variable(name);
                this.literalFactories.set(key, literalFactory);
            }
            return { literalFactory, literalFactoryArguments };
        }
        /**
         * Produce a unique name in the context of this pool.
         *
         * The name might be unique among different prefixes if any of the prefixes end in
         * a digit so the prefix should be a constant string (not based on user input) and
         * must not end in a digit.
         */
        uniqueName(name, alwaysIncludeSuffix = true) {
            const count = this._claimedNames.get(name) ?? 0;
            const result = count === 0 && !alwaysIncludeSuffix ? `${name}` : `${name}${count}`;
            this._claimedNames.set(name, count + 1);
            return result;
        }
        freshName() {
            return this.uniqueName(CONSTANT_PREFIX);
        }
    }
    class GenericKeyFn {
        static { this.INSTANCE = new GenericKeyFn(); }
        keyOf(expr) {
            if (expr instanceof LiteralExpr && typeof expr.value === 'string') {
                return `"${expr.value}"`;
            }
            else if (expr instanceof LiteralExpr) {
                return String(expr.value);
            }
            else if (expr instanceof LiteralArrayExpr) {
                const entries = [];
                for (const entry of expr.entries) {
                    entries.push(this.keyOf(entry));
                }
                return `[${entries.join(',')}]`;
            }
            else if (expr instanceof LiteralMapExpr) {
                const entries = [];
                for (const entry of expr.entries) {
                    let key = entry.key;
                    if (entry.quoted) {
                        key = `"${key}"`;
                    }
                    entries.push(key + ':' + this.keyOf(entry.value));
                }
                return `{${entries.join(',')}}`;
            }
            else if (expr instanceof ExternalExpr) {
                return `import("${expr.value.moduleName}", ${expr.value.name})`;
            }
            else if (expr instanceof ReadVarExpr) {
                return `read(${expr.name})`;
            }
            else if (expr instanceof TypeofExpr) {
                return `typeof(${this.keyOf(expr.expr)})`;
            }
            else {
                throw new Error(`${this.constructor.name} does not handle expressions of type ${expr.constructor.name}`);
            }
        }
    }
    function isVariable(e) {
        return e instanceof ReadVarExpr;
    }
    function isLongStringLiteral(expr) {
        return (expr instanceof LiteralExpr &&
            typeof expr.value === 'string' &&
            expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS);
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    const CORE = '@angular/core';
    class Identifiers {
        /* Methods */
        static { this.NEW_METHOD = 'factory'; }
        static { this.TRANSFORM_METHOD = 'transform'; }
        static { this.PATCH_DEPS = 'patchedDeps'; }
        static { this.core = { name: null, moduleName: CORE }; }
        /* Instructions */
        static { this.namespaceHTML = { name: 'ɵɵnamespaceHTML', moduleName: CORE }; }
        static { this.namespaceMathML = { name: 'ɵɵnamespaceMathML', moduleName: CORE }; }
        static { this.namespaceSVG = { name: 'ɵɵnamespaceSVG', moduleName: CORE }; }
        static { this.element = { name: 'ɵɵelement', moduleName: CORE }; }
        static { this.elementStart = { name: 'ɵɵelementStart', moduleName: CORE }; }
        static { this.elementEnd = { name: 'ɵɵelementEnd', moduleName: CORE }; }
        static { this.advance = { name: 'ɵɵadvance', moduleName: CORE }; }
        static { this.syntheticHostProperty = {
            name: 'ɵɵsyntheticHostProperty',
            moduleName: CORE,
        }; }
        static { this.syntheticHostListener = {
            name: 'ɵɵsyntheticHostListener',
            moduleName: CORE,
        }; }
        static { this.attribute = { name: 'ɵɵattribute', moduleName: CORE }; }
        static { this.attributeInterpolate1 = {
            name: 'ɵɵattributeInterpolate1',
            moduleName: CORE,
        }; }
        static { this.attributeInterpolate2 = {
            name: 'ɵɵattributeInterpolate2',
            moduleName: CORE,
        }; }
        static { this.attributeInterpolate3 = {
            name: 'ɵɵattributeInterpolate3',
            moduleName: CORE,
        }; }
        static { this.attributeInterpolate4 = {
            name: 'ɵɵattributeInterpolate4',
            moduleName: CORE,
        }; }
        static { this.attributeInterpolate5 = {
            name: 'ɵɵattributeInterpolate5',
            moduleName: CORE,
        }; }
        static { this.attributeInterpolate6 = {
            name: 'ɵɵattributeInterpolate6',
            moduleName: CORE,
        }; }
        static { this.attributeInterpolate7 = {
            name: 'ɵɵattributeInterpolate7',
            moduleName: CORE,
        }; }
        static { this.attributeInterpolate8 = {
            name: 'ɵɵattributeInterpolate8',
            moduleName: CORE,
        }; }
        static { this.attributeInterpolateV = {
            name: 'ɵɵattributeInterpolateV',
            moduleName: CORE,
        }; }
        static { this.classProp = { name: 'ɵɵclassProp', moduleName: CORE }; }
        static { this.elementContainerStart = {
            name: 'ɵɵelementContainerStart',
            moduleName: CORE,
        }; }
        static { this.elementContainerEnd = {
            name: 'ɵɵelementContainerEnd',
            moduleName: CORE,
        }; }
        static { this.elementContainer = { name: 'ɵɵelementContainer', moduleName: CORE }; }
        static { this.styleMap = { name: 'ɵɵstyleMap', moduleName: CORE }; }
        static { this.styleMapInterpolate1 = {
            name: 'ɵɵstyleMapInterpolate1',
            moduleName: CORE,
        }; }
        static { this.styleMapInterpolate2 = {
            name: 'ɵɵstyleMapInterpolate2',
            moduleName: CORE,
        }; }
        static { this.styleMapInterpolate3 = {
            name: 'ɵɵstyleMapInterpolate3',
            moduleName: CORE,
        }; }
        static { this.styleMapInterpolate4 = {
            name: 'ɵɵstyleMapInterpolate4',
            moduleName: CORE,
        }; }
        static { this.styleMapInterpolate5 = {
            name: 'ɵɵstyleMapInterpolate5',
            moduleName: CORE,
        }; }
        static { this.styleMapInterpolate6 = {
            name: 'ɵɵstyleMapInterpolate6',
            moduleName: CORE,
        }; }
        static { this.styleMapInterpolate7 = {
            name: 'ɵɵstyleMapInterpolate7',
            moduleName: CORE,
        }; }
        static { this.styleMapInterpolate8 = {
            name: 'ɵɵstyleMapInterpolate8',
            moduleName: CORE,
        }; }
        static { this.styleMapInterpolateV = {
            name: 'ɵɵstyleMapInterpolateV',
            moduleName: CORE,
        }; }
        static { this.classMap = { name: 'ɵɵclassMap', moduleName: CORE }; }
        static { this.classMapInterpolate1 = {
            name: 'ɵɵclassMapInterpolate1',
            moduleName: CORE,
        }; }
        static { this.classMapInterpolate2 = {
            name: 'ɵɵclassMapInterpolate2',
            moduleName: CORE,
        }; }
        static { this.classMapInterpolate3 = {
            name: 'ɵɵclassMapInterpolate3',
            moduleName: CORE,
        }; }
        static { this.classMapInterpolate4 = {
            name: 'ɵɵclassMapInterpolate4',
            moduleName: CORE,
        }; }
        static { this.classMapInterpolate5 = {
            name: 'ɵɵclassMapInterpolate5',
            moduleName: CORE,
        }; }
        static { this.classMapInterpolate6 = {
            name: 'ɵɵclassMapInterpolate6',
            moduleName: CORE,
        }; }
        static { this.classMapInterpolate7 = {
            name: 'ɵɵclassMapInterpolate7',
            moduleName: CORE,
        }; }
        static { this.classMapInterpolate8 = {
            name: 'ɵɵclassMapInterpolate8',
            moduleName: CORE,
        }; }
        static { this.classMapInterpolateV = {
            name: 'ɵɵclassMapInterpolateV',
            moduleName: CORE,
        }; }
        static { this.styleProp = { name: 'ɵɵstyleProp', moduleName: CORE }; }
        static { this.stylePropInterpolate1 = {
            name: 'ɵɵstylePropInterpolate1',
            moduleName: CORE,
        }; }
        static { this.stylePropInterpolate2 = {
            name: 'ɵɵstylePropInterpolate2',
            moduleName: CORE,
        }; }
        static { this.stylePropInterpolate3 = {
            name: 'ɵɵstylePropInterpolate3',
            moduleName: CORE,
        }; }
        static { this.stylePropInterpolate4 = {
            name: 'ɵɵstylePropInterpolate4',
            moduleName: CORE,
        }; }
        static { this.stylePropInterpolate5 = {
            name: 'ɵɵstylePropInterpolate5',
            moduleName: CORE,
        }; }
        static { this.stylePropInterpolate6 = {
            name: 'ɵɵstylePropInterpolate6',
            moduleName: CORE,
        }; }
        static { this.stylePropInterpolate7 = {
            name: 'ɵɵstylePropInterpolate7',
            moduleName: CORE,
        }; }
        static { this.stylePropInterpolate8 = {
            name: 'ɵɵstylePropInterpolate8',
            moduleName: CORE,
        }; }
        static { this.stylePropInterpolateV = {
            name: 'ɵɵstylePropInterpolateV',
            moduleName: CORE,
        }; }
        static { this.nextContext = { name: 'ɵɵnextContext', moduleName: CORE }; }
        static { this.resetView = { name: 'ɵɵresetView', moduleName: CORE }; }
        static { this.templateCreate = { name: 'ɵɵtemplate', moduleName: CORE }; }
        static { this.defer = { name: 'ɵɵdefer', moduleName: CORE }; }
        static { this.deferWhen = { name: 'ɵɵdeferWhen', moduleName: CORE }; }
        static { this.deferOnIdle = { name: 'ɵɵdeferOnIdle', moduleName: CORE }; }
        static { this.deferOnImmediate = { name: 'ɵɵdeferOnImmediate', moduleName: CORE }; }
        static { this.deferOnTimer = { name: 'ɵɵdeferOnTimer', moduleName: CORE }; }
        static { this.deferOnHover = { name: 'ɵɵdeferOnHover', moduleName: CORE }; }
        static { this.deferOnInteraction = { name: 'ɵɵdeferOnInteraction', moduleName: CORE }; }
        static { this.deferOnViewport = { name: 'ɵɵdeferOnViewport', moduleName: CORE }; }
        static { this.deferPrefetchWhen = { name: 'ɵɵdeferPrefetchWhen', moduleName: CORE }; }
        static { this.deferPrefetchOnIdle = {
            name: 'ɵɵdeferPrefetchOnIdle',
            moduleName: CORE,
        }; }
        static { this.deferPrefetchOnImmediate = {
            name: 'ɵɵdeferPrefetchOnImmediate',
            moduleName: CORE,
        }; }
        static { this.deferPrefetchOnTimer = {
            name: 'ɵɵdeferPrefetchOnTimer',
            moduleName: CORE,
        }; }
        static { this.deferPrefetchOnHover = {
            name: 'ɵɵdeferPrefetchOnHover',
            moduleName: CORE,
        }; }
        static { this.deferPrefetchOnInteraction = {
            name: 'ɵɵdeferPrefetchOnInteraction',
            moduleName: CORE,
        }; }
        static { this.deferPrefetchOnViewport = {
            name: 'ɵɵdeferPrefetchOnViewport',
            moduleName: CORE,
        }; }
        static { this.deferEnableTimerScheduling = {
            name: 'ɵɵdeferEnableTimerScheduling',
            moduleName: CORE,
        }; }
        static { this.conditional = { name: 'ɵɵconditional', moduleName: CORE }; }
        static { this.repeater = { name: 'ɵɵrepeater', moduleName: CORE }; }
        static { this.repeaterCreate = { name: 'ɵɵrepeaterCreate', moduleName: CORE }; }
        static { this.repeaterTrackByIndex = {
            name: 'ɵɵrepeaterTrackByIndex',
            moduleName: CORE,
        }; }
        static { this.repeaterTrackByIdentity = {
            name: 'ɵɵrepeaterTrackByIdentity',
            moduleName: CORE,
        }; }
        static { this.componentInstance = { name: 'ɵɵcomponentInstance', moduleName: CORE }; }
        static { this.text = { name: 'ɵɵtext', moduleName: CORE }; }
        static { this.enableBindings = { name: 'ɵɵenableBindings', moduleName: CORE }; }
        static { this.disableBindings = { name: 'ɵɵdisableBindings', moduleName: CORE }; }
        static { this.getCurrentView = { name: 'ɵɵgetCurrentView', moduleName: CORE }; }
        static { this.textInterpolate = { name: 'ɵɵtextInterpolate', moduleName: CORE }; }
        static { this.textInterpolate1 = { name: 'ɵɵtextInterpolate1', moduleName: CORE }; }
        static { this.textInterpolate2 = { name: 'ɵɵtextInterpolate2', moduleName: CORE }; }
        static { this.textInterpolate3 = { name: 'ɵɵtextInterpolate3', moduleName: CORE }; }
        static { this.textInterpolate4 = { name: 'ɵɵtextInterpolate4', moduleName: CORE }; }
        static { this.textInterpolate5 = { name: 'ɵɵtextInterpolate5', moduleName: CORE }; }
        static { this.textInterpolate6 = { name: 'ɵɵtextInterpolate6', moduleName: CORE }; }
        static { this.textInterpolate7 = { name: 'ɵɵtextInterpolate7', moduleName: CORE }; }
        static { this.textInterpolate8 = { name: 'ɵɵtextInterpolate8', moduleName: CORE }; }
        static { this.textInterpolateV = { name: 'ɵɵtextInterpolateV', moduleName: CORE }; }
        static { this.restoreView = { name: 'ɵɵrestoreView', moduleName: CORE }; }
        static { this.pureFunction0 = { name: 'ɵɵpureFunction0', moduleName: CORE }; }
        static { this.pureFunction1 = { name: 'ɵɵpureFunction1', moduleName: CORE }; }
        static { this.pureFunction2 = { name: 'ɵɵpureFunction2', moduleName: CORE }; }
        static { this.pureFunction3 = { name: 'ɵɵpureFunction3', moduleName: CORE }; }
        static { this.pureFunction4 = { name: 'ɵɵpureFunction4', moduleName: CORE }; }
        static { this.pureFunction5 = { name: 'ɵɵpureFunction5', moduleName: CORE }; }
        static { this.pureFunction6 = { name: 'ɵɵpureFunction6', moduleName: CORE }; }
        static { this.pureFunction7 = { name: 'ɵɵpureFunction7', moduleName: CORE }; }
        static { this.pureFunction8 = { name: 'ɵɵpureFunction8', moduleName: CORE }; }
        static { this.pureFunctionV = { name: 'ɵɵpureFunctionV', moduleName: CORE }; }
        static { this.pipeBind1 = { name: 'ɵɵpipeBind1', moduleName: CORE }; }
        static { this.pipeBind2 = { name: 'ɵɵpipeBind2', moduleName: CORE }; }
        static { this.pipeBind3 = { name: 'ɵɵpipeBind3', moduleName: CORE }; }
        static { this.pipeBind4 = { name: 'ɵɵpipeBind4', moduleName: CORE }; }
        static { this.pipeBindV = { name: 'ɵɵpipeBindV', moduleName: CORE }; }
        static { this.hostProperty = { name: 'ɵɵhostProperty', moduleName: CORE }; }
        static { this.property = { name: 'ɵɵproperty', moduleName: CORE }; }
        static { this.propertyInterpolate = {
            name: 'ɵɵpropertyInterpolate',
            moduleName: CORE,
        }; }
        static { this.propertyInterpolate1 = {
            name: 'ɵɵpropertyInterpolate1',
            moduleName: CORE,
        }; }
        static { this.propertyInterpolate2 = {
            name: 'ɵɵpropertyInterpolate2',
            moduleName: CORE,
        }; }
        static { this.propertyInterpolate3 = {
            name: 'ɵɵpropertyInterpolate3',
            moduleName: CORE,
        }; }
        static { this.propertyInterpolate4 = {
            name: 'ɵɵpropertyInterpolate4',
            moduleName: CORE,
        }; }
        static { this.propertyInterpolate5 = {
            name: 'ɵɵpropertyInterpolate5',
            moduleName: CORE,
        }; }
        static { this.propertyInterpolate6 = {
            name: 'ɵɵpropertyInterpolate6',
            moduleName: CORE,
        }; }
        static { this.propertyInterpolate7 = {
            name: 'ɵɵpropertyInterpolate7',
            moduleName: CORE,
        }; }
        static { this.propertyInterpolate8 = {
            name: 'ɵɵpropertyInterpolate8',
            moduleName: CORE,
        }; }
        static { this.propertyInterpolateV = {
            name: 'ɵɵpropertyInterpolateV',
            moduleName: CORE,
        }; }
        static { this.i18n = { name: 'ɵɵi18n', moduleName: CORE }; }
        static { this.i18nAttributes = { name: 'ɵɵi18nAttributes', moduleName: CORE }; }
        static { this.i18nExp = { name: 'ɵɵi18nExp', moduleName: CORE }; }
        static { this.i18nStart = { name: 'ɵɵi18nStart', moduleName: CORE }; }
        static { this.i18nEnd = { name: 'ɵɵi18nEnd', moduleName: CORE }; }
        static { this.i18nApply = { name: 'ɵɵi18nApply', moduleName: CORE }; }
        static { this.i18nPostprocess = { name: 'ɵɵi18nPostprocess', moduleName: CORE }; }
        static { this.pipe = { name: 'ɵɵpipe', moduleName: CORE }; }
        static { this.projection = { name: 'ɵɵprojection', moduleName: CORE }; }
        static { this.projectionDef = { name: 'ɵɵprojectionDef', moduleName: CORE }; }
        static { this.reference = { name: 'ɵɵreference', moduleName: CORE }; }
        static { this.inject = { name: 'ɵɵinject', moduleName: CORE }; }
        static { this.injectAttribute = { name: 'ɵɵinjectAttribute', moduleName: CORE }; }
        static { this.directiveInject = { name: 'ɵɵdirectiveInject', moduleName: CORE }; }
        static { this.invalidFactory = { name: 'ɵɵinvalidFactory', moduleName: CORE }; }
        static { this.invalidFactoryDep = { name: 'ɵɵinvalidFactoryDep', moduleName: CORE }; }
        static { this.templateRefExtractor = {
            name: 'ɵɵtemplateRefExtractor',
            moduleName: CORE,
        }; }
        static { this.forwardRef = { name: 'forwardRef', moduleName: CORE }; }
        static { this.resolveForwardRef = { name: 'resolveForwardRef', moduleName: CORE }; }
        static { this.ɵɵdefineInjectable = { name: 'ɵɵdefineInjectable', moduleName: CORE }; }
        static { this.declareInjectable = { name: 'ɵɵngDeclareInjectable', moduleName: CORE }; }
        static { this.InjectableDeclaration = {
            name: 'ɵɵInjectableDeclaration',
            moduleName: CORE,
        }; }
        static { this.resolveWindow = { name: 'ɵɵresolveWindow', moduleName: CORE }; }
        static { this.resolveDocument = { name: 'ɵɵresolveDocument', moduleName: CORE }; }
        static { this.resolveBody = { name: 'ɵɵresolveBody', moduleName: CORE }; }
        static { this.getComponentDepsFactory = {
            name: 'ɵɵgetComponentDepsFactory',
            moduleName: CORE,
        }; }
        static { this.defineComponent = { name: 'ɵɵdefineComponent', moduleName: CORE }; }
        static { this.declareComponent = { name: 'ɵɵngDeclareComponent', moduleName: CORE }; }
        static { this.setComponentScope = { name: 'ɵɵsetComponentScope', moduleName: CORE }; }
        static { this.ChangeDetectionStrategy = {
            name: 'ChangeDetectionStrategy',
            moduleName: CORE,
        }; }
        static { this.ViewEncapsulation = {
            name: 'ViewEncapsulation',
            moduleName: CORE,
        }; }
        static { this.ComponentDeclaration = {
            name: 'ɵɵComponentDeclaration',
            moduleName: CORE,
        }; }
        static { this.FactoryDeclaration = {
            name: 'ɵɵFactoryDeclaration',
            moduleName: CORE,
        }; }
        static { this.declareFactory = { name: 'ɵɵngDeclareFactory', moduleName: CORE }; }
        static { this.FactoryTarget = { name: 'ɵɵFactoryTarget', moduleName: CORE }; }
        static { this.defineDirective = { name: 'ɵɵdefineDirective', moduleName: CORE }; }
        static { this.declareDirective = { name: 'ɵɵngDeclareDirective', moduleName: CORE }; }
        static { this.DirectiveDeclaration = {
            name: 'ɵɵDirectiveDeclaration',
            moduleName: CORE,
        }; }
        static { this.InjectorDef = { name: 'ɵɵInjectorDef', moduleName: CORE }; }
        static { this.InjectorDeclaration = {
            name: 'ɵɵInjectorDeclaration',
            moduleName: CORE,
        }; }
        static { this.defineInjector = { name: 'ɵɵdefineInjector', moduleName: CORE }; }
        static { this.declareInjector = { name: 'ɵɵngDeclareInjector', moduleName: CORE }; }
        static { this.NgModuleDeclaration = {
            name: 'ɵɵNgModuleDeclaration',
            moduleName: CORE,
        }; }
        static { this.ModuleWithProviders = {
            name: 'ModuleWithProviders',
            moduleName: CORE,
        }; }
        static { this.defineNgModule = { name: 'ɵɵdefineNgModule', moduleName: CORE }; }
        static { this.declareNgModule = { name: 'ɵɵngDeclareNgModule', moduleName: CORE }; }
        static { this.setNgModuleScope = { name: 'ɵɵsetNgModuleScope', moduleName: CORE }; }
        static { this.registerNgModuleType = {
            name: 'ɵɵregisterNgModuleType',
            moduleName: CORE,
        }; }
        static { this.PipeDeclaration = { name: 'ɵɵPipeDeclaration', moduleName: CORE }; }
        static { this.definePipe = { name: 'ɵɵdefinePipe', moduleName: CORE }; }
        static { this.declarePipe = { name: 'ɵɵngDeclarePipe', moduleName: CORE }; }
        static { this.declareClassMetadata = {
            name: 'ɵɵngDeclareClassMetadata',
            moduleName: CORE,
        }; }
        static { this.declareClassMetadataAsync = {
            name: 'ɵɵngDeclareClassMetadataAsync',
            moduleName: CORE,
        }; }
        static { this.setClassMetadata = { name: 'ɵsetClassMetadata', moduleName: CORE }; }
        static { this.setClassMetadataAsync = {
            name: 'ɵsetClassMetadataAsync',
            moduleName: CORE,
        }; }
        static { this.setClassDebugInfo = { name: 'ɵsetClassDebugInfo', moduleName: CORE }; }
        static { this.queryRefresh = { name: 'ɵɵqueryRefresh', moduleName: CORE }; }
        static { this.viewQuery = { name: 'ɵɵviewQuery', moduleName: CORE }; }
        static { this.loadQuery = { name: 'ɵɵloadQuery', moduleName: CORE }; }
        static { this.contentQuery = { name: 'ɵɵcontentQuery', moduleName: CORE }; }
        // Signal queries
        static { this.viewQuerySignal = { name: 'ɵɵviewQuerySignal', moduleName: CORE }; }
        static { this.contentQuerySignal = { name: 'ɵɵcontentQuerySignal', moduleName: CORE }; }
        static { this.queryAdvance = { name: 'ɵɵqueryAdvance', moduleName: CORE }; }
        // Two-way bindings
        static { this.twoWayProperty = { name: 'ɵɵtwoWayProperty', moduleName: CORE }; }
        static { this.twoWayBindingSet = { name: 'ɵɵtwoWayBindingSet', moduleName: CORE }; }
        static { this.twoWayListener = { name: 'ɵɵtwoWayListener', moduleName: CORE }; }
        static { this.NgOnChangesFeature = { name: 'ɵɵNgOnChangesFeature', moduleName: CORE }; }
        static { this.InheritDefinitionFeature = {
            name: 'ɵɵInheritDefinitionFeature',
            moduleName: CORE,
        }; }
        static { this.CopyDefinitionFeature = {
            name: 'ɵɵCopyDefinitionFeature',
            moduleName: CORE,
        }; }
        static { this.StandaloneFeature = { name: 'ɵɵStandaloneFeature', moduleName: CORE }; }
        static { this.ProvidersFeature = { name: 'ɵɵProvidersFeature', moduleName: CORE }; }
        static { this.HostDirectivesFeature = {
            name: 'ɵɵHostDirectivesFeature',
            moduleName: CORE,
        }; }
        static { this.InputTransformsFeatureFeature = {
            name: 'ɵɵInputTransformsFeature',
            moduleName: CORE,
        }; }
        static { this.listener = { name: 'ɵɵlistener', moduleName: CORE }; }
        static { this.getInheritedFactory = {
            name: 'ɵɵgetInheritedFactory',
            moduleName: CORE,
        }; }
        // sanitization-related functions
        static { this.sanitizeHtml = { name: 'ɵɵsanitizeHtml', moduleName: CORE }; }
        static { this.sanitizeStyle = { name: 'ɵɵsanitizeStyle', moduleName: CORE }; }
        static { this.sanitizeResourceUrl = {
            name: 'ɵɵsanitizeResourceUrl',
            moduleName: CORE,
        }; }
        static { this.sanitizeScript = { name: 'ɵɵsanitizeScript', moduleName: CORE }; }
        static { this.sanitizeUrl = { name: 'ɵɵsanitizeUrl', moduleName: CORE }; }
        static { this.sanitizeUrlOrResourceUrl = {
            name: 'ɵɵsanitizeUrlOrResourceUrl',
            moduleName: CORE,
        }; }
        static { this.trustConstantHtml = { name: 'ɵɵtrustConstantHtml', moduleName: CORE }; }
        static { this.trustConstantResourceUrl = {
            name: 'ɵɵtrustConstantResourceUrl',
            moduleName: CORE,
        }; }
        static { this.validateIframeAttribute = {
            name: 'ɵɵvalidateIframeAttribute',
            moduleName: CORE,
        }; }
        // type-checking
        static { this.InputSignalBrandWriteType = { name: 'ɵINPUT_SIGNAL_BRAND_WRITE_TYPE', moduleName: CORE }; }
        static { this.UnwrapDirectiveSignalInputs = { name: 'ɵUnwrapDirectiveSignalInputs', moduleName: CORE }; }
        static { this.unwrapWritableSignal = { name: 'ɵunwrapWritableSignal', moduleName: CORE }; }
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    const DASH_CASE_REGEXP = /-+([a-z0-9])/g;
    function dashCaseToCamelCase(input) {
        return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
    }
    function splitAtColon(input, defaultValues) {
        return _splitAt(input, ':', defaultValues);
    }
    function splitAtPeriod(input, defaultValues) {
        return _splitAt(input, '.', defaultValues);
    }
    function _splitAt(input, character, defaultValues) {
        const characterIndex = input.indexOf(character);
        if (characterIndex == -1)
            return defaultValues;
        return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
    }
    function utf8Encode(str) {
        let encoded = [];
        for (let index = 0; index < str.length; index++) {
            let codePoint = str.charCodeAt(index);
            // decode surrogate
            // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > index + 1) {
                const low = str.charCodeAt(index + 1);
                if (low >= 0xdc00 && low <= 0xdfff) {
                    index++;
                    codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;
                }
            }
            if (codePoint <= 0x7f) {
                encoded.push(codePoint);
            }
            else if (codePoint <= 0x7ff) {
                encoded.push(((codePoint >> 6) & 0x1f) | 0xc0, (codePoint & 0x3f) | 0x80);
            }
            else if (codePoint <= 0xffff) {
                encoded.push((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
            }
            else if (codePoint <= 0x1fffff) {
                encoded.push(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
            }
        }
        return encoded;
    }
    function stringify(token) {
        if (typeof token === 'string') {
            return token;
        }
        if (Array.isArray(token)) {
            return '[' + token.map(stringify).join(', ') + ']';
        }
        if (token == null) {
            return '' + token;
        }
        if (token.overriddenName) {
            return `${token.overriddenName}`;
        }
        if (token.name) {
            return `${token.name}`;
        }
        if (!token.toString) {
            return 'object';
        }
        // WARNING: do not try to `JSON.stringify(token)` here
        // see https://github.com/angular/angular/issues/23440
        const res = token.toString();
        if (res == null) {
            return '' + res;
        }
        const newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
    }
    class Version {
        constructor(full) {
            this.full = full;
            const splits = full.split('.');
            this.major = splits[0];
            this.minor = splits[1];
            this.patch = splits.slice(2).join('.');
        }
    }
    const _global = globalThis;

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit
    const VERSION = 3;
    const JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';
    class SourceMapGenerator {
        constructor(file = null) {
            this.file = file;
            this.sourcesContent = new Map();
            this.lines = [];
            this.lastCol0 = 0;
            this.hasMappings = false;
        }
        // The content is `null` when the content is expected to be loaded using the URL
        addSource(url, content = null) {
            if (!this.sourcesContent.has(url)) {
                this.sourcesContent.set(url, content);
            }
            return this;
        }
        addLine() {
            this.lines.push([]);
            this.lastCol0 = 0;
            return this;
        }
        addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {
            if (!this.currentLine) {
                throw new Error(`A line must be added before mappings can be added`);
            }
            if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
                throw new Error(`Unknown source file "${sourceUrl}"`);
            }
            if (col0 == null) {
                throw new Error(`The column in the generated code must be provided`);
            }
            if (col0 < this.lastCol0) {
                throw new Error(`Mapping should be added in output order`);
            }
            if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
                throw new Error(`The source location must be provided when a source url is provided`);
            }
            this.hasMappings = true;
            this.lastCol0 = col0;
            this.currentLine.push({ col0, sourceUrl, sourceLine0, sourceCol0 });
            return this;
        }
        /**
         * @internal strip this from published d.ts files due to
         * https://github.com/microsoft/TypeScript/issues/36216
         */
        get currentLine() {
            return this.lines.slice(-1)[0];
        }
        toJSON() {
            if (!this.hasMappings) {
                return null;
            }
            const sourcesIndex = new Map();
            const sources = [];
            const sourcesContent = [];
            Array.from(this.sourcesContent.keys()).forEach((url, i) => {
                sourcesIndex.set(url, i);
                sources.push(url);
                sourcesContent.push(this.sourcesContent.get(url) || null);
            });
            let mappings = '';
            let lastCol0 = 0;
            let lastSourceIndex = 0;
            let lastSourceLine0 = 0;
            let lastSourceCol0 = 0;
            this.lines.forEach((segments) => {
                lastCol0 = 0;
                mappings += segments
                    .map((segment) => {
                    // zero-based starting column of the line in the generated code
                    let segAsStr = toBase64VLQ(segment.col0 - lastCol0);
                    lastCol0 = segment.col0;
                    if (segment.sourceUrl != null) {
                        // zero-based index into the “sources” list
                        segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);
                        lastSourceIndex = sourcesIndex.get(segment.sourceUrl);
                        // the zero-based starting line in the original source
                        segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);
                        lastSourceLine0 = segment.sourceLine0;
                        // the zero-based starting column in the original source
                        segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);
                        lastSourceCol0 = segment.sourceCol0;
                    }
                    return segAsStr;
                })
                    .join(',');
                mappings += ';';
            });
            mappings = mappings.slice(0, -1);
            return {
                'file': this.file || '',
                'version': VERSION,
                'sourceRoot': '',
                'sources': sources,
                'sourcesContent': sourcesContent,
                'mappings': mappings,
            };
        }
        toJsComment() {
            return this.hasMappings
                ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0))
                : '';
        }
    }
    function toBase64String(value) {
        let b64 = '';
        const encoded = utf8Encode(value);
        for (let i = 0; i < encoded.length;) {
            const i1 = encoded[i++];
            const i2 = i < encoded.length ? encoded[i++] : null;
            const i3 = i < encoded.length ? encoded[i++] : null;
            b64 += toBase64Digit(i1 >> 2);
            b64 += toBase64Digit(((i1 & 3) << 4) | (i2 === null ? 0 : i2 >> 4));
            b64 += i2 === null ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 === null ? 0 : i3 >> 6));
            b64 += i2 === null || i3 === null ? '=' : toBase64Digit(i3 & 63);
        }
        return b64;
    }
    function toBase64VLQ(value) {
        value = value < 0 ? (-value << 1) + 1 : value << 1;
        let out = '';
        do {
            let digit = value & 31;
            value = value >> 5;
            if (value > 0) {
                digit = digit | 32;
            }
            out += toBase64Digit(digit);
        } while (value > 0);
        return out;
    }
    const B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    function toBase64Digit(value) {
        if (value < 0 || value >= 64) {
            throw new Error(`Can only encode value in the range [0, 63]`);
        }
        return B64_DIGITS[value];
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    const _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
    const _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
    const _INDENT_WITH = '  ';
    class _EmittedLine {
        constructor(indent) {
            this.indent = indent;
            this.partsLength = 0;
            this.parts = [];
            this.srcSpans = [];
        }
    }
    class EmitterVisitorContext {
        static createRoot() {
            return new EmitterVisitorContext(0);
        }
        constructor(_indent) {
            this._indent = _indent;
            this._lines = [new _EmittedLine(_indent)];
        }
        /**
         * @internal strip this from published d.ts files due to
         * https://github.com/microsoft/TypeScript/issues/36216
         */
        get _currentLine() {
            return this._lines[this._lines.length - 1];
        }
        println(from, lastPart = '') {
            this.print(from || null, lastPart, true);
        }
        lineIsEmpty() {
            return this._currentLine.parts.length === 0;
        }
        lineLength() {
            return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;
        }
        print(from, part, newLine = false) {
            if (part.length > 0) {
                this._currentLine.parts.push(part);
                this._currentLine.partsLength += part.length;
                this._currentLine.srcSpans.push((from && from.sourceSpan) || null);
            }
            if (newLine) {
                this._lines.push(new _EmittedLine(this._indent));
            }
        }
        removeEmptyLastLine() {
            if (this.lineIsEmpty()) {
                this._lines.pop();
            }
        }
        incIndent() {
            this._indent++;
            if (this.lineIsEmpty()) {
                this._currentLine.indent = this._indent;
            }
        }
        decIndent() {
            this._indent--;
            if (this.lineIsEmpty()) {
                this._currentLine.indent = this._indent;
            }
        }
        toSource() {
            return this.sourceLines
                .map((l) => (l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : ''))
                .join('\n');
        }
        toSourceMapGenerator(genFilePath, startsAtLine = 0) {
            const map = new SourceMapGenerator(genFilePath);
            let firstOffsetMapped = false;
            const mapFirstOffsetIfNeeded = () => {
                if (!firstOffsetMapped) {
                    // Add a single space so that tools won't try to load the file from disk.
                    // Note: We are using virtual urls like `ng:///`, so we have to
                    // provide a content here.
                    map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);
                    firstOffsetMapped = true;
                }
            };
            for (let i = 0; i < startsAtLine; i++) {
                map.addLine();
                mapFirstOffsetIfNeeded();
            }
            this.sourceLines.forEach((line, lineIdx) => {
                map.addLine();
                const spans = line.srcSpans;
                const parts = line.parts;
                let col0 = line.indent * _INDENT_WITH.length;
                let spanIdx = 0;
                // skip leading parts without source spans
                while (spanIdx < spans.length && !spans[spanIdx]) {
                    col0 += parts[spanIdx].length;
                    spanIdx++;
                }
                if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {
                    firstOffsetMapped = true;
                }
                else {
                    mapFirstOffsetIfNeeded();
                }
                while (spanIdx < spans.length) {
                    const span = spans[spanIdx];
                    const source = span.start.file;
                    const sourceLine = span.start.line;
                    const sourceCol = span.start.col;
                    map
                        .addSource(source.url, source.content)
                        .addMapping(col0, source.url, sourceLine, sourceCol);
                    col0 += parts[spanIdx].length;
                    spanIdx++;
                    // assign parts without span or the same span to the previous segment
                    while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
                        col0 += parts[spanIdx].length;
                        spanIdx++;
                    }
                }
            });
            return map;
        }
        spanOf(line, column) {
            const emittedLine = this._lines[line];
            if (emittedLine) {
                let columnsLeft = column - _createIndent(emittedLine.indent).length;
                for (let partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {
                    const part = emittedLine.parts[partIndex];
                    if (part.length > columnsLeft) {
                        return emittedLine.srcSpans[partIndex];
                    }
                    columnsLeft -= part.length;
                }
            }
            return null;
        }
        /**
         * @internal strip this from published d.ts files due to
         * https://github.com/microsoft/TypeScript/issues/36216
         */
        get sourceLines() {
            if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
                return this._lines.slice(0, -1);
            }
            return this._lines;
        }
    }
    class AbstractEmitterVisitor {
        constructor(_escapeDollarInStrings) {
            this._escapeDollarInStrings = _escapeDollarInStrings;
        }
        printLeadingComments(stmt, ctx) {
            if (stmt.leadingComments === undefined) {
                return;
            }
            for (const comment of stmt.leadingComments) {
                if (comment instanceof JSDocComment) {
                    ctx.print(stmt, `/*${comment.toString()}*/`, comment.trailingNewline);
                }
                else {
                    if (comment.multiline) {
                        ctx.print(stmt, `/* ${comment.text} */`, comment.trailingNewline);
                    }
                    else {
                        comment.text.split('\n').forEach((line) => {
                            ctx.println(stmt, `// ${line}`);
                        });
                    }
                }
            }
        }
        visitExpressionStmt(stmt, ctx) {
            this.printLeadingComments(stmt, ctx);
            stmt.expr.visitExpression(this, ctx);
            ctx.println(stmt, ';');
            return null;
        }
        visitReturnStmt(stmt, ctx) {
            this.printLeadingComments(stmt, ctx);
            ctx.print(stmt, `return `);
            stmt.value.visitExpression(this, ctx);
            ctx.println(stmt, ';');
            return null;
        }
        visitIfStmt(stmt, ctx) {
            this.printLeadingComments(stmt, ctx);
            ctx.print(stmt, `if (`);
            stmt.condition.visitExpression(this, ctx);
            ctx.print(stmt, `) {`);
            const hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;
            if (stmt.trueCase.length <= 1 && !hasElseCase) {
                ctx.print(stmt, ` `);
                this.visitAllStatements(stmt.trueCase, ctx);
                ctx.removeEmptyLastLine();
                ctx.print(stmt, ` `);
            }
            else {
                ctx.println();
                ctx.incIndent();
                this.visitAllStatements(stmt.trueCase, ctx);
                ctx.decIndent();
                if (hasElseCase) {
                    ctx.println(stmt, `} else {`);
                    ctx.incIndent();
                    this.visitAllStatements(stmt.falseCase, ctx);
                    ctx.decIndent();
                }
            }
            ctx.println(stmt, `}`);
            return null;
        }
        visitWriteVarExpr(expr, ctx) {
            const lineWasEmpty = ctx.lineIsEmpty();
            if (!lineWasEmpty) {
                ctx.print(expr, '(');
            }
            ctx.print(expr, `${expr.name} = `);
            expr.value.visitExpression(this, ctx);
            if (!lineWasEmpty) {
                ctx.print(expr, ')');
            }
            return null;
        }
        visitWriteKeyExpr(expr, ctx) {
            const lineWasEmpty = ctx.lineIsEmpty();
            if (!lineWasEmpty) {
                ctx.print(expr, '(');
            }
            expr.receiver.visitExpression(this, ctx);
            ctx.print(expr, `[`);
            expr.index.visitExpression(this, ctx);
            ctx.print(expr, `] = `);
            expr.value.visitExpression(this, ctx);
            if (!lineWasEmpty) {
                ctx.print(expr, ')');
            }
            return null;
        }
        visitWritePropExpr(expr, ctx) {
            const lineWasEmpty = ctx.lineIsEmpty();
            if (!lineWasEmpty) {
                ctx.print(expr, '(');
            }
            expr.receiver.visitExpression(this, ctx);
            ctx.print(expr, `.${expr.name} = `);
            expr.value.visitExpression(this, ctx);
            if (!lineWasEmpty) {
                ctx.print(expr, ')');
            }
            return null;
        }
        visitInvokeFunctionExpr(expr, ctx) {
            const shouldParenthesize = expr.fn instanceof ArrowFunctionExpr;
            if (shouldParenthesize) {
                ctx.print(expr.fn, '(');
            }
            expr.fn.visitExpression(this, ctx);
            if (shouldParenthesize) {
                ctx.print(expr.fn, ')');
            }
            ctx.print(expr, `(`);
            this.visitAllExpressions(expr.args, ctx, ',');
            ctx.print(expr, `)`);
            return null;
        }
        visitTaggedTemplateExpr(expr, ctx) {
            expr.tag.visitExpression(this, ctx);
            ctx.print(expr, '`' + expr.template.elements[0].rawText);
            for (let i = 1; i < expr.template.elements.length; i++) {
                ctx.print(expr, '${');
                expr.template.expressions[i - 1].visitExpression(this, ctx);
                ctx.print(expr, `}${expr.template.elements[i].rawText}`);
            }
            ctx.print(expr, '`');
            return null;
        }
        visitWrappedNodeExpr(ast, ctx) {
            throw new Error('Abstract emitter cannot visit WrappedNodeExpr.');
        }
        visitTypeofExpr(expr, ctx) {
            ctx.print(expr, 'typeof ');
            expr.expr.visitExpression(this, ctx);
        }
        visitReadVarExpr(ast, ctx) {
            ctx.print(ast, ast.name);
            return null;
        }
        visitInstantiateExpr(ast, ctx) {
            ctx.print(ast, `new `);
            ast.classExpr.visitExpression(this, ctx);
            ctx.print(ast, `(`);
            this.visitAllExpressions(ast.args, ctx, ',');
            ctx.print(ast, `)`);
            return null;
        }
        visitLiteralExpr(ast, ctx) {
            const value = ast.value;
            if (typeof value === 'string') {
                ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
            }
            else {
                ctx.print(ast, `${value}`);
            }
            return null;
        }
        visitLocalizedString(ast, ctx) {
            const head = ast.serializeI18nHead();
            ctx.print(ast, '$localize `' + head.raw);
            for (let i = 1; i < ast.messageParts.length; i++) {
                ctx.print(ast, '${');
                ast.expressions[i - 1].visitExpression(this, ctx);
                ctx.print(ast, `}${ast.serializeI18nTemplatePart(i).raw}`);
            }
            ctx.print(ast, '`');
            return null;
        }
        visitConditionalExpr(ast, ctx) {
            ctx.print(ast, `(`);
            ast.condition.visitExpression(this, ctx);
            ctx.print(ast, '? ');
            ast.trueCase.visitExpression(this, ctx);
            ctx.print(ast, ': ');
            ast.falseCase.visitExpression(this, ctx);
            ctx.print(ast, `)`);
            return null;
        }
        visitDynamicImportExpr(ast, ctx) {
            ctx.print(ast, `import(${ast.url})`);
        }
        visitNotExpr(ast, ctx) {
            ctx.print(ast, '!');
            ast.condition.visitExpression(this, ctx);
            return null;
        }
        visitUnaryOperatorExpr(ast, ctx) {
            let opStr;
            switch (ast.operator) {
                case UnaryOperator.Plus:
                    opStr = '+';
                    break;
                case UnaryOperator.Minus:
                    opStr = '-';
                    break;
                default:
                    throw new Error(`Unknown operator ${ast.operator}`);
            }
            if (ast.parens)
                ctx.print(ast, `(`);
            ctx.print(ast, opStr);
            ast.expr.visitExpression(this, ctx);
            if (ast.parens)
                ctx.print(ast, `)`);
            return null;
        }
        visitBinaryOperatorExpr(ast, ctx) {
            let opStr;
            switch (ast.operator) {
                case BinaryOperator.Equals:
                    opStr = '==';
                    break;
                case BinaryOperator.Identical:
                    opStr = '===';
                    break;
                case BinaryOperator.NotEquals:
                    opStr = '!=';
                    break;
                case BinaryOperator.NotIdentical:
                    opStr = '!==';
                    break;
                case BinaryOperator.And:
                    opStr = '&&';
                    break;
                case BinaryOperator.BitwiseOr:
                    opStr = '|';
                    break;
                case BinaryOperator.BitwiseAnd:
                    opStr = '&';
                    break;
                case BinaryOperator.Or:
                    opStr = '||';
                    break;
                case BinaryOperator.Plus:
                    opStr = '+';
                    break;
                case BinaryOperator.Minus:
                    opStr = '-';
                    break;
                case BinaryOperator.Divide:
                    opStr = '/';
                    break;
                case BinaryOperator.Multiply:
                    opStr = '*';
                    break;
                case BinaryOperator.Modulo:
                    opStr = '%';
                    break;
                case BinaryOperator.Lower:
                    opStr = '<';
                    break;
                case BinaryOperator.LowerEquals:
                    opStr = '<=';
                    break;
                case BinaryOperator.Bigger:
                    opStr = '>';
                    break;
                case BinaryOperator.BiggerEquals:
                    opStr = '>=';
                    break;
                case BinaryOperator.NullishCoalesce:
                    opStr = '??';
                    break;
                default:
                    throw new Error(`Unknown operator ${ast.operator}`);
            }
            if (ast.parens)
                ctx.print(ast, `(`);
            ast.lhs.visitExpression(this, ctx);
            ctx.print(ast, ` ${opStr} `);
            ast.rhs.visitExpression(this, ctx);
            if (ast.parens)
                ctx.print(ast, `)`);
            return null;
        }
        visitReadPropExpr(ast, ctx) {
            ast.receiver.visitExpression(this, ctx);
            ctx.print(ast, `.`);
            ctx.print(ast, ast.name);
            return null;
        }
        visitReadKeyExpr(ast, ctx) {
            ast.receiver.visitExpression(this, ctx);
            ctx.print(ast, `[`);
            ast.index.visitExpression(this, ctx);
            ctx.print(ast, `]`);
            return null;
        }
        visitLiteralArrayExpr(ast, ctx) {
            ctx.print(ast, `[`);
            this.visitAllExpressions(ast.entries, ctx, ',');
            ctx.print(ast, `]`);
            return null;
        }
        visitLiteralMapExpr(ast, ctx) {
            ctx.print(ast, `{`);
            this.visitAllObjects((entry) => {
                ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);
                entry.value.visitExpression(this, ctx);
            }, ast.entries, ctx, ',');
            ctx.print(ast, `}`);
            return null;
        }
        visitCommaExpr(ast, ctx) {
            ctx.print(ast, '(');
            this.visitAllExpressions(ast.parts, ctx, ',');
            ctx.print(ast, ')');
            return null;
        }
        visitAllExpressions(expressions, ctx, separator) {
            this.visitAllObjects((expr) => expr.visitExpression(this, ctx), expressions, ctx, separator);
        }
        visitAllObjects(handler, expressions, ctx, separator) {
            let incrementedIndent = false;
            for (let i = 0; i < expressions.length; i++) {
                if (i > 0) {
                    if (ctx.lineLength() > 80) {
                        ctx.print(null, separator, true);
                        if (!incrementedIndent) {
                            // continuation are marked with double indent.
                            ctx.incIndent();
                            ctx.incIndent();
                            incrementedIndent = true;
                        }
                    }
                    else {
                        ctx.print(null, separator, false);
                    }
                }
                handler(expressions[i]);
            }
            if (incrementedIndent) {
                // continuation are marked with double indent.
                ctx.decIndent();
                ctx.decIndent();
            }
        }
        visitAllStatements(statements, ctx) {
            statements.forEach((stmt) => stmt.visitStatement(this, ctx));
        }
    }
    function escapeIdentifier(input, escapeDollar, alwaysQuote = true) {
        if (input == null) {
            return null;
        }
        const body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match) => {
            if (match[0] == '$') {
                return escapeDollar ? '\\$' : '$';
            }
            else if (match[0] == '\n') {
                return '\\n';
            }
            else if (match[0] == '\r') {
                return '\\r';
            }
            else {
                return `\\${match[0]}`;
            }
        });
        const requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
        return requiresQuotes ? `'${body}'` : body;
    }
    function _createIndent(count) {
        let res = '';
        for (let i = 0; i < count; i++) {
            res += _INDENT_WITH;
        }
        return res;
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    function typeWithParameters(type, numParams) {
        if (numParams === 0) {
            return expressionType(type);
        }
        const params = [];
        for (let i = 0; i < numParams; i++) {
            params.push(DYNAMIC_TYPE);
        }
        return expressionType(type, undefined, params);
    }
    function getSafePropertyAccessString(accessor, name) {
        const escapedName = escapeIdentifier(name, false, false);
        return escapedName !== name ? `${accessor}[${escapedName}]` : `${accessor}.${name}`;
    }
    function jitOnlyGuardedExpression(expr) {
        return guardedExpression('ngJitMode', expr);
    }
    function devOnlyGuardedExpression(expr) {
        return guardedExpression('ngDevMode', expr);
    }
    function guardedExpression(guard, expr) {
        const guardExpr = new ExternalExpr({ name: guard, moduleName: null });
        const guardNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(guardExpr), literal$1('undefined'));
        const guardUndefinedOrTrue = new BinaryOperatorExpr(BinaryOperator.Or, guardNotDefined, guardExpr, 
        /* type */ undefined, 
        /* sourceSpan */ undefined, true);
        return new BinaryOperatorExpr(BinaryOperator.And, guardUndefinedOrTrue, expr);
    }
    function wrapReference(value) {
        const wrapped = new WrappedNodeExpr(value);
        return { value: wrapped, type: wrapped };
    }
    function refsToArray(refs, shouldForwardDeclare) {
        const values = literalArr(refs.map((ref) => ref.value));
        return shouldForwardDeclare ? arrowFn([], values) : values;
    }
    function createMayBeForwardRefExpression(expression, forwardRef) {
        return { expression, forwardRef };
    }
    /**
     * Convert a `MaybeForwardRefExpression` to an `Expression`, possibly wrapping its expression in a
     * `forwardRef()` call.
     *
     * If `MaybeForwardRefExpression.forwardRef` is `ForwardRefHandling.Unwrapped` then the expression
     * was originally wrapped in a `forwardRef()` call to prevent the value from being eagerly evaluated
     * in the code.
     *
     * See `packages/compiler-cli/src/ngtsc/annotations/src/injectable.ts` and
     * `packages/compiler/src/jit_compiler_facade.ts` for more information.
     */
    function convertFromMaybeForwardRefExpression({ expression, forwardRef, }) {
        switch (forwardRef) {
            case 0 /* ForwardRefHandling.None */:
            case 1 /* ForwardRefHandling.Wrapped */:
                return expression;
            case 2 /* ForwardRefHandling.Unwrapped */:
                return generateForwardRef(expression);
        }
    }
    /**
     * Generate an expression that has the given `expr` wrapped in the following form:
     *
     * ```
     * forwardRef(() => expr)
     * ```
     */
    function generateForwardRef(expr) {
        return importExpr(Identifiers.forwardRef).callFn([arrowFn([], expr)]);
    }

    var R3FactoryDelegateType;
    (function (R3FactoryDelegateType) {
        R3FactoryDelegateType[R3FactoryDelegateType["Class"] = 0] = "Class";
        R3FactoryDelegateType[R3FactoryDelegateType["Function"] = 1] = "Function";
    })(R3FactoryDelegateType || (R3FactoryDelegateType = {}));
    var FactoryTarget$1;
    (function (FactoryTarget) {
        FactoryTarget[FactoryTarget["Directive"] = 0] = "Directive";
        FactoryTarget[FactoryTarget["Component"] = 1] = "Component";
        FactoryTarget[FactoryTarget["Injectable"] = 2] = "Injectable";
        FactoryTarget[FactoryTarget["Pipe"] = 3] = "Pipe";
        FactoryTarget[FactoryTarget["NgModule"] = 4] = "NgModule";
    })(FactoryTarget$1 || (FactoryTarget$1 = {}));
    /**
     * Construct a factory function expression for the given `R3FactoryMetadata`.
     */
    function compileFactoryFunction(meta) {
        const t = variable('t');
        let baseFactoryVar = null;
        // The type to instantiate via constructor invocation. If there is no delegated factory, meaning
        // this type is always created by constructor invocation, then this is the type-to-create
        // parameter provided by the user (t) if specified, or the current type if not. If there is a
        // delegated factory (which is used to create the current type) then this is only the type-to-
        // create parameter (t).
        const typeForCtor = !isDelegatedFactoryMetadata(meta)
            ? new BinaryOperatorExpr(BinaryOperator.Or, t, meta.type.value)
            : t;
        let ctorExpr = null;
        if (meta.deps !== null) {
            // There is a constructor (either explicitly or implicitly defined).
            if (meta.deps !== 'invalid') {
                ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.target));
            }
        }
        else {
            // There is no constructor, use the base class' factory to construct typeForCtor.
            baseFactoryVar = variable(`ɵ${meta.name}_BaseFactory`);
            ctorExpr = baseFactoryVar.callFn([typeForCtor]);
        }
        const body = [];
        let retExpr = null;
        function makeConditionalFactory(nonCtorExpr) {
            const r = variable('r');
            body.push(r.set(NULL_EXPR).toDeclStmt());
            const ctorStmt = ctorExpr !== null
                ? r.set(ctorExpr).toStmt()
                : importExpr(Identifiers.invalidFactory).callFn([]).toStmt();
            body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));
            return r;
        }
        if (isDelegatedFactoryMetadata(meta)) {
            // This type is created with a delegated factory. If a type parameter is not specified, call
            // the factory instead.
            const delegateArgs = injectDependencies(meta.delegateDeps, meta.target);
            // Either call `new delegate(...)` or `delegate(...)` depending on meta.delegateType.
            const factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ? InstantiateExpr : InvokeFunctionExpr)(meta.delegate, delegateArgs);
            retExpr = makeConditionalFactory(factoryExpr);
        }
        else if (isExpressionFactoryMetadata(meta)) {
            // TODO(alxhub): decide whether to lower the value here or in the caller
            retExpr = makeConditionalFactory(meta.expression);
        }
        else {
            retExpr = ctorExpr;
        }
        if (retExpr === null) {
            // The expression cannot be formed so render an `ɵɵinvalidFactory()` call.
            body.push(importExpr(Identifiers.invalidFactory).callFn([]).toStmt());
        }
        else if (baseFactoryVar !== null) {
            // This factory uses a base factory, so call `ɵɵgetInheritedFactory()` to compute it.
            const getInheritedFactoryCall = importExpr(Identifiers.getInheritedFactory).callFn([meta.type.value]);
            // Memoize the base factoryFn: `baseFactory || (baseFactory = ɵɵgetInheritedFactory(...))`
            const baseFactory = new BinaryOperatorExpr(BinaryOperator.Or, baseFactoryVar, baseFactoryVar.set(getInheritedFactoryCall));
            body.push(new ReturnStatement(baseFactory.callFn([typeForCtor])));
        }
        else {
            // This is straightforward factory, just return it.
            body.push(new ReturnStatement(retExpr));
        }
        let factoryFn = fn([new FnParam('t', DYNAMIC_TYPE)], body, INFERRED_TYPE, undefined, `${meta.name}_Factory`);
        if (baseFactoryVar !== null) {
            // There is a base factory variable so wrap its declaration along with the factory function into
            // an IIFE.
            factoryFn = arrowFn([], [new DeclareVarStmt(baseFactoryVar.name), new ReturnStatement(factoryFn)])
                .callFn([], /* sourceSpan */ undefined, /* pure */ true);
        }
        return {
            expression: factoryFn,
            statements: [],
            type: createFactoryType(meta),
        };
    }
    function createFactoryType(meta) {
        const ctorDepsType = meta.deps !== null && meta.deps !== 'invalid' ? createCtorDepsType(meta.deps) : NONE_TYPE;
        return expressionType(importExpr(Identifiers.FactoryDeclaration, [
            typeWithParameters(meta.type.type, meta.typeArgumentCount),
            ctorDepsType,
        ]));
    }
    function injectDependencies(deps, target) {
        return deps.map((dep, index) => compileInjectDependency(dep, target, index));
    }
    function compileInjectDependency(dep, target, index) {
        // Interpret the dependency according to its resolved type.
        if (dep.token === null) {
            return importExpr(Identifiers.invalidFactoryDep).callFn([literal$1(index)]);
        }
        else if (dep.attributeNameType === null) {
            // Build up the injection flags according to the metadata.
            const flags = 0 /* InjectFlags.Default */ |
                (dep.self ? 2 /* InjectFlags.Self */ : 0) |
                (dep.skipSelf ? 4 /* InjectFlags.SkipSelf */ : 0) |
                (dep.host ? 1 /* InjectFlags.Host */ : 0) |
                (dep.optional ? 8 /* InjectFlags.Optional */ : 0) |
                (target === FactoryTarget$1.Pipe ? 16 /* InjectFlags.ForPipe */ : 0);
            // If this dependency is optional or otherwise has non-default flags, then additional
            // parameters describing how to inject the dependency must be passed to the inject function
            // that's being used.
            let flagsParam = flags !== 0 /* InjectFlags.Default */ || dep.optional ? literal$1(flags) : null;
            // Build up the arguments to the injectFn call.
            const injectArgs = [dep.token];
            if (flagsParam) {
                injectArgs.push(flagsParam);
            }
            const injectFn = getInjectFn(target);
            return importExpr(injectFn).callFn(injectArgs);
        }
        else {
            // The `dep.attributeTypeName` value is defined, which indicates that this is an `@Attribute()`
            // type dependency. For the generated JS we still want to use the `dep.token` value in case the
            // name given for the attribute is not a string literal. For example given `@Attribute(foo())`,
            // we want to generate `ɵɵinjectAttribute(foo())`.
            //
            // The `dep.attributeTypeName` is only actually used (in `createCtorDepType()`) to generate
            // typings.
            return importExpr(Identifiers.injectAttribute).callFn([dep.token]);
        }
    }
    function createCtorDepsType(deps) {
        let hasTypes = false;
        const attributeTypes = deps.map((dep) => {
            const type = createCtorDepType(dep);
            if (type !== null) {
                hasTypes = true;
                return type;
            }
            else {
                return literal$1(null);
            }
        });
        if (hasTypes) {
            return expressionType(literalArr(attributeTypes));
        }
        else {
            return NONE_TYPE;
        }
    }
    function createCtorDepType(dep) {
        const entries = [];
        if (dep.attributeNameType !== null) {
            entries.push({ key: 'attribute', value: dep.attributeNameType, quoted: false });
        }
        if (dep.optional) {
            entries.push({ key: 'optional', value: literal$1(true), quoted: false });
        }
        if (dep.host) {
            entries.push({ key: 'host', value: literal$1(true), quoted: false });
        }
        if (dep.self) {
            entries.push({ key: 'self', value: literal$1(true), quoted: false });
        }
        if (dep.skipSelf) {
            entries.push({ key: 'skipSelf', value: literal$1(true), quoted: false });
        }
        return entries.length > 0 ? literalMap(entries) : null;
    }
    function isDelegatedFactoryMetadata(meta) {
        return meta.delegateType !== undefined;
    }
    function isExpressionFactoryMetadata(meta) {
        return meta.expression !== undefined;
    }
    function getInjectFn(target) {
        switch (target) {
            case FactoryTarget$1.Component:
            case FactoryTarget$1.Directive:
            case FactoryTarget$1.Pipe:
                return Identifiers.directiveInject;
            case FactoryTarget$1.NgModule:
            case FactoryTarget$1.Injectable:
            default:
                return Identifiers.inject;
        }
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    class ParserError {
        constructor(message, input, errLocation, ctxLocation) {
            this.input = input;
            this.errLocation = errLocation;
            this.ctxLocation = ctxLocation;
            this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;
        }
    }
    class ParseSpan {
        constructor(start, end) {
            this.start = start;
            this.end = end;
        }
        toAbsolute(absoluteOffset) {
            return new AbsoluteSourceSpan$1(absoluteOffset + this.start, absoluteOffset + this.end);
        }
    }
    class AST {
        constructor(span, 
        /**
         * Absolute location of the expression AST in a source code file.
         */
        sourceSpan) {
            this.span = span;
            this.sourceSpan = sourceSpan;
        }
        toString() {
            return 'AST';
        }
    }
    class ASTWithName extends AST {
        constructor(span, sourceSpan, nameSpan) {
            super(span, sourceSpan);
            this.nameSpan = nameSpan;
        }
    }
    class EmptyExpr$1 extends AST {
        visit(visitor, context = null) {
            // do nothing
        }
    }
    class ImplicitReceiver extends AST {
        visit(visitor, context = null) {
            return visitor.visitImplicitReceiver(this, context);
        }
    }
    /**
     * Receiver when something is accessed through `this` (e.g. `this.foo`). Note that this class
     * inherits from `ImplicitReceiver`, because accessing something through `this` is treated the
     * same as accessing it implicitly inside of an Angular template (e.g. `[attr.title]="this.title"`
     * is the same as `[attr.title]="title"`.). Inheriting allows for the `this` accesses to be treated
     * the same as implicit ones, except for a couple of exceptions like `$event` and `$any`.
     * TODO: we should find a way for this class not to extend from `ImplicitReceiver` in the future.
     */
    class ThisReceiver extends ImplicitReceiver {
        visit(visitor, context = null) {
            return visitor.visitThisReceiver?.(this, context);
        }
    }
    /**
     * Multiple expressions separated by a semicolon.
     */
    class Chain extends AST {
        constructor(span, sourceSpan, expressions) {
            super(span, sourceSpan);
            this.expressions = expressions;
        }
        visit(visitor, context = null) {
            return visitor.visitChain(this, context);
        }
    }
    class Conditional extends AST {
        constructor(span, sourceSpan, condition, trueExp, falseExp) {
            super(span, sourceSpan);
            this.condition = condition;
            this.trueExp = trueExp;
            this.falseExp = falseExp;
        }
        visit(visitor, context = null) {
            return visitor.visitConditional(this, context);
        }
    }
    class PropertyRead extends ASTWithName {
        constructor(span, sourceSpan, nameSpan, receiver, name) {
            super(span, sourceSpan, nameSpan);
            this.receiver = receiver;
            this.name = name;
        }
        visit(visitor, context = null) {
            return visitor.visitPropertyRead(this, context);
        }
    }
    class PropertyWrite extends ASTWithName {
        constructor(span, sourceSpan, nameSpan, receiver, name, value) {
            super(span, sourceSpan, nameSpan);
            this.receiver = receiver;
            this.name = name;
            this.value = value;
        }
        visit(visitor, context = null) {
            return visitor.visitPropertyWrite(this, context);
        }
    }
    class SafePropertyRead extends ASTWithName {
        constructor(span, sourceSpan, nameSpan, receiver, name) {
            super(span, sourceSpan, nameSpan);
            this.receiver = receiver;
            this.name = name;
        }
        visit(visitor, context = null) {
            return visitor.visitSafePropertyRead(this, context);
        }
    }
    class KeyedRead extends AST {
        constructor(span, sourceSpan, receiver, key) {
            super(span, sourceSpan);
            this.receiver = receiver;
            this.key = key;
        }
        visit(visitor, context = null) {
            return visitor.visitKeyedRead(this, context);
        }
    }
    class SafeKeyedRead extends AST {
        constructor(span, sourceSpan, receiver, key) {
            super(span, sourceSpan);
            this.receiver = receiver;
            this.key = key;
        }
        visit(visitor, context = null) {
            return visitor.visitSafeKeyedRead(this, context);
        }
    }
    class KeyedWrite extends AST {
        constructor(span, sourceSpan, receiver, key, value) {
            super(span, sourceSpan);
            this.receiver = receiver;
            this.key = key;
            this.value = value;
        }
        visit(visitor, context = null) {
            return visitor.visitKeyedWrite(this, context);
        }
    }
    class BindingPipe extends ASTWithName {
        constructor(span, sourceSpan, exp, name, args, nameSpan) {
            super(span, sourceSpan, nameSpan);
            this.exp = exp;
            this.name = name;
            this.args = args;
        }
        visit(visitor, context = null) {
            return visitor.visitPipe(this, context);
        }
    }
    class LiteralPrimitive extends AST {
        constructor(span, sourceSpan, value) {
            super(span, sourceSpan);
            this.value = value;
        }
        visit(visitor, context = null) {
            return visitor.visitLiteralPrimitive(this, context);
        }
    }
    class LiteralArray extends AST {
        constructor(span, sourceSpan, expressions) {
            super(span, sourceSpan);
            this.expressions = expressions;
        }
        visit(visitor, context = null) {
            return visitor.visitLiteralArray(this, context);
        }
    }
    class LiteralMap extends AST {
        constructor(span, sourceSpan, keys, values) {
            super(span, sourceSpan);
            this.keys = keys;
            this.values = values;
        }
        visit(visitor, context = null) {
            return visitor.visitLiteralMap(this, context);
        }
    }
    class Interpolation$1 extends AST {
        constructor(span, sourceSpan, strings, expressions) {
            super(span, sourceSpan);
            this.strings = strings;
            this.expressions = expressions;
        }
        visit(visitor, context = null) {
            return visitor.visitInterpolation(this, context);
        }
    }
    class Binary extends AST {
        constructor(span, sourceSpan, operation, left, right) {
            super(span, sourceSpan);
            this.operation = operation;
            this.left = left;
            this.right = right;
        }
        visit(visitor, context = null) {
            return visitor.visitBinary(this, context);
        }
    }
    /**
     * For backwards compatibility reasons, `Unary` inherits from `Binary` and mimics the binary AST
     * node that was originally used. This inheritance relation can be deleted in some future major,
     * after consumers have been given a chance to fully support Unary.
     */
    class Unary extends Binary {
        /**
         * Creates a unary minus expression "-x", represented as `Binary` using "0 - x".
         */
        static createMinus(span, sourceSpan, expr) {
            return new Unary(span, sourceSpan, '-', expr, '-', new LiteralPrimitive(span, sourceSpan, 0), expr);
        }
        /**
         * Creates a unary plus expression "+x", represented as `Binary` using "x - 0".
         */
        static createPlus(span, sourceSpan, expr) {
            return new Unary(span, sourceSpan, '+', expr, '-', expr, new LiteralPrimitive(span, sourceSpan, 0));
        }
        /**
         * During the deprecation period this constructor is private, to avoid consumers from creating
         * a `Unary` with the fallback properties for `Binary`.
         */
        constructor(span, sourceSpan, operator, expr, binaryOp, binaryLeft, binaryRight) {
            super(span, sourceSpan, binaryOp, binaryLeft, binaryRight);
            this.operator = operator;
            this.expr = expr;
            // Redeclare the properties that are inherited from `Binary` as `never`, as consumers should not
            // depend on these fields when operating on `Unary`.
            this.left = null;
            this.right = null;
            this.operation = null;
        }
        visit(visitor, context = null) {
            if (visitor.visitUnary !== undefined) {
                return visitor.visitUnary(this, context);
            }
            return visitor.visitBinary(this, context);
        }
    }
    class PrefixNot extends AST {
        constructor(span, sourceSpan, expression) {
            super(span, sourceSpan);
            this.expression = expression;
        }
        visit(visitor, context = null) {
            return visitor.visitPrefixNot(this, context);
        }
    }
    class NonNullAssert extends AST {
        constructor(span, sourceSpan, expression) {
            super(span, sourceSpan);
            this.expression = expression;
        }
        visit(visitor, context = null) {
            return visitor.visitNonNullAssert(this, context);
        }
    }
    class Call extends AST {
        constructor(span, sourceSpan, receiver, args, argumentSpan) {
            super(span, sourceSpan);
            this.receiver = receiver;
            this.args = args;
            this.argumentSpan = argumentSpan;
        }
        visit(visitor, context = null) {
            return visitor.visitCall(this, context);
        }
    }
    class SafeCall extends AST {
        constructor(span, sourceSpan, receiver, args, argumentSpan) {
            super(span, sourceSpan);
            this.receiver = receiver;
            this.args = args;
            this.argumentSpan = argumentSpan;
        }
        visit(visitor, context = null) {
            return visitor.visitSafeCall(this, context);
        }
    }
    /**
     * Records the absolute position of a text span in a source file, where `start` and `end` are the
     * starting and ending byte offsets, respectively, of the text span in a source file.
     */
    class AbsoluteSourceSpan$1 {
        constructor(start, end) {
            this.start = start;
            this.end = end;
        }
    }
    class ASTWithSource extends AST {
        constructor(ast, source, location, absoluteOffset, errors) {
            super(new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan$1(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length));
            this.ast = ast;
            this.source = source;
            this.location = location;
            this.errors = errors;
        }
        visit(visitor, context = null) {
            if (visitor.visitASTWithSource) {
                return visitor.visitASTWithSource(this, context);
            }
            return this.ast.visit(visitor, context);
        }
        toString() {
            return `${this.source} in ${this.location}`;
        }
    }
    class VariableBinding {
        /**
         * @param sourceSpan entire span of the binding.
         * @param key name of the LHS along with its span.
         * @param value optional value for the RHS along with its span.
         */
        constructor(sourceSpan, key, value) {
            this.sourceSpan = sourceSpan;
            this.key = key;
            this.value = value;
        }
    }
    class ExpressionBinding {
        /**
         * @param sourceSpan entire span of the binding.
         * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its
         * span. Note that the length of the span may not be the same as
         * `key.source.length`. For example,
         * 1. key.source = ngFor, key.span is for "ngFor"
         * 2. key.source = ngForOf, key.span is for "of"
         * 3. key.source = ngForTrackBy, key.span is for "trackBy"
         * @param value optional expression for the RHS.
         */
        constructor(sourceSpan, key, value) {
            this.sourceSpan = sourceSpan;
            this.key = key;
            this.value = value;
        }
    }
    class RecursiveAstVisitor {
        visit(ast, context) {
            // The default implementation just visits every node.
            // Classes that extend RecursiveAstVisitor should override this function
            // to selectively visit the specified node.
            ast.visit(this, context);
        }
        visitUnary(ast, context) {
            this.visit(ast.expr, context);
        }
        visitBinary(ast, context) {
            this.visit(ast.left, context);
            this.visit(ast.right, context);
        }
        visitChain(ast, context) {
            this.visitAll(ast.expressions, context);
        }
        visitConditional(ast, context) {
            this.visit(ast.condition, context);
            this.visit(ast.trueExp, context);
            this.visit(ast.falseExp, context);
        }
        visitPipe(ast, context) {
            this.visit(ast.exp, context);
            this.visitAll(ast.args, context);
        }
        visitImplicitReceiver(ast, context) { }
        visitThisReceiver(ast, context) { }
        visitInterpolation(ast, context) {
            this.visitAll(ast.expressions, context);
        }
        visitKeyedRead(ast, context) {
            this.visit(ast.receiver, context);
            this.visit(ast.key, context);
        }
        visitKeyedWrite(ast, context) {
            this.visit(ast.receiver, context);
            this.visit(ast.key, context);
            this.visit(ast.value, context);
        }
        visitLiteralArray(ast, context) {
            this.visitAll(ast.expressions, context);
        }
        visitLiteralMap(ast, context) {
            this.visitAll(ast.values, context);
        }
        visitLiteralPrimitive(ast, context) { }
        visitPrefixNot(ast, context) {
            this.visit(ast.expression, context);
        }
        visitNonNullAssert(ast, context) {
            this.visit(ast.expression, context);
        }
        visitPropertyRead(ast, context) {
            this.visit(ast.receiver, context);
        }
        visitPropertyWrite(ast, context) {
            this.visit(ast.receiver, context);
            this.visit(ast.value, context);
        }
        visitSafePropertyRead(ast, context) {
            this.visit(ast.receiver, context);
        }
        visitSafeKeyedRead(ast, context) {
            this.visit(ast.receiver, context);
            this.visit(ast.key, context);
        }
        visitCall(ast, context) {
            this.visit(ast.receiver, context);
            this.visitAll(ast.args, context);
        }
        visitSafeCall(ast, context) {
            this.visit(ast.receiver, context);
            this.visitAll(ast.args, context);
        }
        // This is not part of the AstVisitor interface, just a helper method
        visitAll(asts, context) {
            for (const ast of asts) {
                this.visit(ast, context);
            }
        }
    }
    // Bindings
    class ParsedProperty {
        constructor(name, expression, type, sourceSpan, keySpan, valueSpan) {
            this.name = name;
            this.expression = expression;
            this.type = type;
            this.sourceSpan = sourceSpan;
            this.keySpan = keySpan;
            this.valueSpan = valueSpan;
            this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;
            this.isAnimation = this.type === ParsedPropertyType.ANIMATION;
        }
    }
    var ParsedPropertyType;
    (function (ParsedPropertyType) {
        ParsedPropertyType[ParsedPropertyType["DEFAULT"] = 0] = "DEFAULT";
        ParsedPropertyType[ParsedPropertyType["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
        ParsedPropertyType[ParsedPropertyType["ANIMATION"] = 2] = "ANIMATION";
        ParsedPropertyType[ParsedPropertyType["TWO_WAY"] = 3] = "TWO_WAY";
    })(ParsedPropertyType || (ParsedPropertyType = {}));
    var ParsedEventType;
    (function (ParsedEventType) {
        // DOM or Directive event
        ParsedEventType[ParsedEventType["Regular"] = 0] = "Regular";
        // Animation specific event
        ParsedEventType[ParsedEventType["Animation"] = 1] = "Animation";
        // Event side of a two-way binding (e.g. `[(property)]="expression"`).
        ParsedEventType[ParsedEventType["TwoWay"] = 2] = "TwoWay";
    })(ParsedEventType || (ParsedEventType = {}));
    class ParsedEvent {
        constructor(name, targetOrPhase, type, handler, sourceSpan, handlerSpan, keySpan) {
            this.name = name;
            this.targetOrPhase = targetOrPhase;
            this.type = type;
            this.handler = handler;
            this.sourceSpan = sourceSpan;
            this.handlerSpan = handlerSpan;
            this.keySpan = keySpan;
        }
    }
    /**
     * ParsedVariable represents a variable declaration in a microsyntax expression.
     */
    class ParsedVariable {
        constructor(name, value, sourceSpan, keySpan, valueSpan) {
            this.name = name;
            this.value = value;
            this.sourceSpan = sourceSpan;
            this.keySpan = keySpan;
            this.valueSpan = valueSpan;
        }
    }
    var BindingType;
    (function (BindingType) {
        // A regular binding to a property (e.g. `[property]="expression"`).
        BindingType[BindingType["Property"] = 0] = "Property";
        // A binding to an element attribute (e.g. `[attr.name]="expression"`).
        BindingType[BindingType["Attribute"] = 1] = "Attribute";
        // A binding to a CSS class (e.g. `[class.name]="condition"`).
        BindingType[BindingType["Class"] = 2] = "Class";
        // A binding to a style rule (e.g. `[style.rule]="expression"`).
        BindingType[BindingType["Style"] = 3] = "Style";
        // A binding to an animation reference (e.g. `[animate.key]="expression"`).
        BindingType[BindingType["Animation"] = 4] = "Animation";
        // Property side of a two-way binding (e.g. `[(property)]="expression"`).
        BindingType[BindingType["TwoWay"] = 5] = "TwoWay";
    })(BindingType || (BindingType = {}));
    class BoundElementProperty {
        constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan) {
            this.name = name;
            this.type = type;
            this.securityContext = securityContext;
            this.value = value;
            this.unit = unit;
            this.sourceSpan = sourceSpan;
            this.keySpan = keySpan;
            this.valueSpan = valueSpan;
        }
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var TagContentType;
    (function (TagContentType) {
        TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
        TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
        TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
    })(TagContentType || (TagContentType = {}));
    function splitNsName(elementName, fatal = true) {
        if (elementName[0] != ':') {
            return [null, elementName];
        }
        const colonIndex = elementName.indexOf(':', 1);
        if (colonIndex === -1) {
            if (fatal) {
                throw new Error(`Unsupported format "${elementName}" expecting ":namespace:name"`);
            }
            else {
                return [null, elementName];
            }
        }
        return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
    }
    // `<ng-container>` tags work the same regardless the namespace
    function isNgContainer(tagName) {
        return splitNsName(tagName)[1] === 'ng-container';
    }
    // `<ng-content>` tags work the same regardless the namespace
    function isNgContent(tagName) {
        return splitNsName(tagName)[1] === 'ng-content';
    }
    // `<ng-template>` tags work the same regardless the namespace
    function isNgTemplate(tagName) {
        return splitNsName(tagName)[1] === 'ng-template';
    }
    function getNsPrefix(fullName) {
        return fullName === null ? null : splitNsName(fullName)[0];
    }
    function mergeNsAndName(prefix, localName) {
        return prefix ? `:${prefix}:${localName}` : localName;
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * This is an R3 `Node`-like wrapper for a raw `html.Comment` node. We do not currently
     * require the implementation of a visitor for Comments as they are only collected at
     * the top-level of the R3 AST, and only if `Render3ParseOptions['collectCommentNodes']`
     * is true.
     */
    class Comment$1 {
        constructor(value, sourceSpan) {
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        visit(_visitor) {
            throw new Error('visit() not implemented for Comment');
        }
    }
    class Text$2 {
        constructor(value, sourceSpan) {
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        visit(visitor) {
            return visitor.visitText(this);
        }
    }
    class BoundText {
        constructor(value, sourceSpan, i18n) {
            this.value = value;
            this.sourceSpan = sourceSpan;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitBoundText(this);
        }
    }
    /**
     * Represents a text attribute in the template.
     *
     * `valueSpan` may not be present in cases where there is no value `<div a></div>`.
     * `keySpan` may also not be present for synthetic attributes from ICU expansions.
     */
    class TextAttribute {
        constructor(name, value, sourceSpan, keySpan, valueSpan, i18n) {
            this.name = name;
            this.value = value;
            this.sourceSpan = sourceSpan;
            this.keySpan = keySpan;
            this.valueSpan = valueSpan;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitTextAttribute(this);
        }
    }
    class BoundAttribute {
        constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n) {
            this.name = name;
            this.type = type;
            this.securityContext = securityContext;
            this.value = value;
            this.unit = unit;
            this.sourceSpan = sourceSpan;
            this.keySpan = keySpan;
            this.valueSpan = valueSpan;
            this.i18n = i18n;
        }
        static fromBoundElementProperty(prop, i18n) {
            if (prop.keySpan === undefined) {
                throw new Error(`Unexpected state: keySpan must be defined for bound attributes but was not for ${prop.name}: ${prop.sourceSpan}`);
            }
            return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n);
        }
        visit(visitor) {
            return visitor.visitBoundAttribute(this);
        }
    }
    class BoundEvent {
        constructor(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {
            this.name = name;
            this.type = type;
            this.handler = handler;
            this.target = target;
            this.phase = phase;
            this.sourceSpan = sourceSpan;
            this.handlerSpan = handlerSpan;
            this.keySpan = keySpan;
        }
        static fromParsedEvent(event) {
            const target = event.type === ParsedEventType.Regular ? event.targetOrPhase : null;
            const phase = event.type === ParsedEventType.Animation ? event.targetOrPhase : null;
            if (event.keySpan === undefined) {
                throw new Error(`Unexpected state: keySpan must be defined for bound event but was not for ${event.name}: ${event.sourceSpan}`);
            }
            return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);
        }
        visit(visitor) {
            return visitor.visitBoundEvent(this);
        }
    }
    class Element$1 {
        constructor(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
            this.name = name;
            this.attributes = attributes;
            this.inputs = inputs;
            this.outputs = outputs;
            this.children = children;
            this.references = references;
            this.sourceSpan = sourceSpan;
            this.startSourceSpan = startSourceSpan;
            this.endSourceSpan = endSourceSpan;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitElement(this);
        }
    }
    class DeferredTrigger {
        constructor(nameSpan, sourceSpan, prefetchSpan, whenOrOnSourceSpan) {
            this.nameSpan = nameSpan;
            this.sourceSpan = sourceSpan;
            this.prefetchSpan = prefetchSpan;
            this.whenOrOnSourceSpan = whenOrOnSourceSpan;
        }
        visit(visitor) {
            return visitor.visitDeferredTrigger(this);
        }
    }
    class BoundDeferredTrigger extends DeferredTrigger {
        constructor(value, sourceSpan, prefetchSpan, whenSourceSpan) {
            // BoundDeferredTrigger is for 'when' triggers. These aren't really "triggers" and don't have a
            // nameSpan. Trigger names are the built in event triggers like hover, interaction, etc.
            super(/** nameSpan */ null, sourceSpan, prefetchSpan, whenSourceSpan);
            this.value = value;
        }
    }
    class IdleDeferredTrigger extends DeferredTrigger {
    }
    class ImmediateDeferredTrigger extends DeferredTrigger {
    }
    class HoverDeferredTrigger extends DeferredTrigger {
        constructor(reference, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {
            super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
            this.reference = reference;
        }
    }
    class TimerDeferredTrigger extends DeferredTrigger {
        constructor(delay, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {
            super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
            this.delay = delay;
        }
    }
    class InteractionDeferredTrigger extends DeferredTrigger {
        constructor(reference, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {
            super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
            this.reference = reference;
        }
    }
    class ViewportDeferredTrigger extends DeferredTrigger {
        constructor(reference, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {
            super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
            this.reference = reference;
        }
    }
    class BlockNode {
        constructor(nameSpan, sourceSpan, startSourceSpan, endSourceSpan) {
            this.nameSpan = nameSpan;
            this.sourceSpan = sourceSpan;
            this.startSourceSpan = startSourceSpan;
            this.endSourceSpan = endSourceSpan;
        }
    }
    class DeferredBlockPlaceholder extends BlockNode {
        constructor(children, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
            super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
            this.children = children;
            this.minimumTime = minimumTime;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitDeferredBlockPlaceholder(this);
        }
    }
    class DeferredBlockLoading extends BlockNode {
        constructor(children, afterTime, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
            super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
            this.children = children;
            this.afterTime = afterTime;
            this.minimumTime = minimumTime;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitDeferredBlockLoading(this);
        }
    }
    class DeferredBlockError extends BlockNode {
        constructor(children, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
            super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
            this.children = children;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitDeferredBlockError(this);
        }
    }
    class DeferredBlock extends BlockNode {
        constructor(children, triggers, prefetchTriggers, placeholder, loading, error, nameSpan, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, i18n) {
            super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
            this.children = children;
            this.placeholder = placeholder;
            this.loading = loading;
            this.error = error;
            this.mainBlockSpan = mainBlockSpan;
            this.i18n = i18n;
            this.triggers = triggers;
            this.prefetchTriggers = prefetchTriggers;
            // We cache the keys since we know that they won't change and we
            // don't want to enumarate them every time we're traversing the AST.
            this.definedTriggers = Object.keys(triggers);
            this.definedPrefetchTriggers = Object.keys(prefetchTriggers);
        }
        visit(visitor) {
            return visitor.visitDeferredBlock(this);
        }
        visitAll(visitor) {
            this.visitTriggers(this.definedTriggers, this.triggers, visitor);
            this.visitTriggers(this.definedPrefetchTriggers, this.prefetchTriggers, visitor);
            visitAll$1(visitor, this.children);
            const remainingBlocks = [this.placeholder, this.loading, this.error].filter((x) => x !== null);
            visitAll$1(visitor, remainingBlocks);
        }
        visitTriggers(keys, triggers, visitor) {
            visitAll$1(visitor, keys.map((k) => triggers[k]));
        }
    }
    class SwitchBlock extends BlockNode {
        constructor(expression, cases, 
        /**
         * These blocks are only captured to allow for autocompletion in the language service. They
         * aren't meant to be processed in any other way.
         */
        unknownBlocks, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {
            super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
            this.expression = expression;
            this.cases = cases;
            this.unknownBlocks = unknownBlocks;
        }
        visit(visitor) {
            return visitor.visitSwitchBlock(this);
        }
    }
    class SwitchBlockCase extends BlockNode {
        constructor(expression, children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {
            super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
            this.expression = expression;
            this.children = children;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitSwitchBlockCase(this);
        }
    }
    class ForLoopBlock extends BlockNode {
        constructor(item, expression, trackBy, trackKeywordSpan, contextVariables, children, empty, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {
            super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
            this.item = item;
            this.expression = expression;
            this.trackBy = trackBy;
            this.trackKeywordSpan = trackKeywordSpan;
            this.contextVariables = contextVariables;
            this.children = children;
            this.empty = empty;
            this.mainBlockSpan = mainBlockSpan;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitForLoopBlock(this);
        }
    }
    class ForLoopBlockEmpty extends BlockNode {
        constructor(children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {
            super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
            this.children = children;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitForLoopBlockEmpty(this);
        }
    }
    class IfBlock extends BlockNode {
        constructor(branches, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {
            super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
            this.branches = branches;
        }
        visit(visitor) {
            return visitor.visitIfBlock(this);
        }
    }
    class IfBlockBranch extends BlockNode {
        constructor(expression, children, expressionAlias, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n) {
            super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
            this.expression = expression;
            this.children = children;
            this.expressionAlias = expressionAlias;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitIfBlockBranch(this);
        }
    }
    class UnknownBlock {
        constructor(name, sourceSpan, nameSpan) {
            this.name = name;
            this.sourceSpan = sourceSpan;
            this.nameSpan = nameSpan;
        }
        visit(visitor) {
            return visitor.visitUnknownBlock(this);
        }
    }
    class Template {
        constructor(
        // tagName is the name of the container element, if applicable.
        // `null` is a special case for when there is a structural directive on an `ng-template` so
        // the renderer can differentiate between the synthetic template and the one written in the
        // file.
        tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
            this.tagName = tagName;
            this.attributes = attributes;
            this.inputs = inputs;
            this.outputs = outputs;
            this.templateAttrs = templateAttrs;
            this.children = children;
            this.references = references;
            this.variables = variables;
            this.sourceSpan = sourceSpan;
            this.startSourceSpan = startSourceSpan;
            this.endSourceSpan = endSourceSpan;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitTemplate(this);
        }
    }
    class Content {
        constructor(selector, attributes, children, sourceSpan, i18n) {
            this.selector = selector;
            this.attributes = attributes;
            this.children = children;
            this.sourceSpan = sourceSpan;
            this.i18n = i18n;
            this.name = 'ng-content';
        }
        visit(visitor) {
            return visitor.visitContent(this);
        }
    }
    class Variable {
        constructor(name, value, sourceSpan, keySpan, valueSpan) {
            this.name = name;
            this.value = value;
            this.sourceSpan = sourceSpan;
            this.keySpan = keySpan;
            this.valueSpan = valueSpan;
        }
        visit(visitor) {
            return visitor.visitVariable(this);
        }
    }
    class Reference$1 {
        constructor(name, value, sourceSpan, keySpan, valueSpan) {
            this.name = name;
            this.value = value;
            this.sourceSpan = sourceSpan;
            this.keySpan = keySpan;
            this.valueSpan = valueSpan;
        }
        visit(visitor) {
            return visitor.visitReference(this);
        }
    }
    class Icu$1 {
        constructor(vars, placeholders, sourceSpan, i18n) {
            this.vars = vars;
            this.placeholders = placeholders;
            this.sourceSpan = sourceSpan;
            this.i18n = i18n;
        }
        visit(visitor) {
            return visitor.visitIcu(this);
        }
    }
    class RecursiveVisitor {
        visitElement(element) {
            visitAll$1(this, element.attributes);
            visitAll$1(this, element.inputs);
            visitAll$1(this, element.outputs);
            visitAll$1(this, element.children);
            visitAll$1(this, element.references);
        }
        visitTemplate(template) {
            visitAll$1(this, template.attributes);
            visitAll$1(this, template.inputs);
            visitAll$1(this, template.outputs);
            visitAll$1(this, template.children);
            visitAll$1(this, template.references);
            visitAll$1(this, template.variables);
        }
        visitDeferredBlock(deferred) {
            deferred.visitAll(this);
        }
        visitDeferredBlockPlaceholder(block) {
            visitAll$1(this, block.children);
        }
        visitDeferredBlockError(block) {
            visitAll$1(this, block.children);
        }
        visitDeferredBlockLoading(block) {
            visitAll$1(this, block.children);
        }
        visitSwitchBlock(block) {
            visitAll$1(this, block.cases);
        }
        visitSwitchBlockCase(block) {
            visitAll$1(this, block.children);
        }
        visitForLoopBlock(block) {
            const blockItems = [block.item, ...block.contextVariables, ...block.children];
            block.empty && blockItems.push(block.empty);
            visitAll$1(this, blockItems);
        }
        visitForLoopBlockEmpty(block) {
            visitAll$1(this, block.children);
        }
        visitIfBlock(block) {
            visitAll$1(this, block.branches);
        }
        visitIfBlockBranch(block) {
            const blockItems = block.children;
            block.expressionAlias && blockItems.push(block.expressionAlias);
            visitAll$1(this, blockItems);
        }
        visitContent(content) {
            visitAll$1(this, content.children);
        }
        visitVariable(variable) { }
        visitReference(reference) { }
        visitTextAttribute(attribute) { }
        visitBoundAttribute(attribute) { }
        visitBoundEvent(attribute) { }
        visitText(text) { }
        visitBoundText(text) { }
        visitIcu(icu) { }
        visitDeferredTrigger(trigger) { }
        visitUnknownBlock(block) { }
    }
    function visitAll$1(visitor, nodes) {
        const result = [];
        if (visitor.visit) {
            for (const node of nodes) {
                visitor.visit(node) || node.visit(visitor);
            }
        }
        else {
            for (const node of nodes) {
                const newNode = node.visit(visitor);
                if (newNode) {
                    result.push(newNode);
                }
            }
        }
        return result;
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    class Message {
        /**
         * @param nodes message AST
         * @param placeholders maps placeholder names to static content and their source spans
         * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
         * @param meaning
         * @param description
         * @param customId
         */
        constructor(nodes, placeholders, placeholderToMessage, meaning, description, customId) {
            this.nodes = nodes;
            this.placeholders = placeholders;
            this.placeholderToMessage = placeholderToMessage;
            this.meaning = meaning;
            this.description = description;
            this.customId = customId;
            /** The ids to use if there are no custom id and if `i18nLegacyMessageIdFormat` is not empty */
            this.legacyIds = [];
            this.id = this.customId;
            this.messageString = serializeMessage(this.nodes);
            if (nodes.length) {
                this.sources = [
                    {
                        filePath: nodes[0].sourceSpan.start.file.url,
                        startLine: nodes[0].sourceSpan.start.line + 1,
                        startCol: nodes[0].sourceSpan.start.col + 1,
                        endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,
                        endCol: nodes[0].sourceSpan.start.col + 1,
                    },
                ];
            }
            else {
                this.sources = [];
            }
        }
    }
    class Text$1 {
        constructor(value, sourceSpan) {
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        visit(visitor, context) {
            return visitor.visitText(this, context);
        }
    }
    // TODO(vicb): do we really need this node (vs an array) ?
    class Container {
        constructor(children, sourceSpan) {
            this.children = children;
            this.sourceSpan = sourceSpan;
        }
        visit(visitor, context) {
            return visitor.visitContainer(this, context);
        }
    }
    class Icu {
        constructor(expression, type, cases, sourceSpan, expressionPlaceholder) {
            this.expression = expression;
            this.type = type;
            this.cases = cases;
            this.sourceSpan = sourceSpan;
            this.expressionPlaceholder = expressionPlaceholder;
        }
        visit(visitor, context) {
            return visitor.visitIcu(this, context);
        }
    }
    class TagPlaceholder {
        constructor(tag, attrs, startName, closeName, children, isVoid, 
        // TODO sourceSpan should cover all (we need a startSourceSpan and endSourceSpan)
        sourceSpan, startSourceSpan, endSourceSpan) {
            this.tag = tag;
            this.attrs = attrs;
            this.startName = startName;
            this.closeName = closeName;
            this.children = children;
            this.isVoid = isVoid;
            this.sourceSpan = sourceSpan;
            this.startSourceSpan = startSourceSpan;
            this.endSourceSpan = endSourceSpan;
        }
        visit(visitor, context) {
            return visitor.visitTagPlaceholder(this, context);
        }
    }
    class Placeholder {
        constructor(value, name, sourceSpan) {
            this.value = value;
            this.name = name;
            this.sourceSpan = sourceSpan;
        }
        visit(visitor, context) {
            return visitor.visitPlaceholder(this, context);
        }
    }
    class IcuPlaceholder {
        constructor(value, name, sourceSpan) {
            this.value = value;
            this.name = name;
            this.sourceSpan = sourceSpan;
        }
        visit(visitor, context) {
            return visitor.visitIcuPlaceholder(this, context);
        }
    }
    class BlockPlaceholder {
        constructor(name, parameters, startName, closeName, children, sourceSpan, startSourceSpan, endSourceSpan) {
            this.name = name;
            this.parameters = parameters;
            this.startName = startName;
            this.closeName = closeName;
            this.children = children;
            this.sourceSpan = sourceSpan;
            this.startSourceSpan = startSourceSpan;
            this.endSourceSpan = endSourceSpan;
        }
        visit(visitor, context) {
            return visitor.visitBlockPlaceholder(this, context);
        }
    }
    /**
     * Serialize the message to the Localize backtick string format that would appear in compiled code.
     */
    function serializeMessage(messageNodes) {
        const visitor = new LocalizeMessageStringVisitor();
        const str = messageNodes.map((n) => n.visit(visitor)).join('');
        return str;
    }
    class LocalizeMessageStringVisitor {
        visitText(text) {
            return text.value;
        }
        visitContainer(container) {
            return container.children.map((child) => child.visit(this)).join('');
        }
        visitIcu(icu) {
            const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
            return `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;
        }
        visitTagPlaceholder(ph) {
            const children = ph.children.map((child) => child.visit(this)).join('');
            return `{$${ph.startName}}${children}{$${ph.closeName}}`;
        }
        visitPlaceholder(ph) {
            return `{$${ph.name}}`;
        }
        visitIcuPlaceholder(ph) {
            return `{$${ph.name}}`;
        }
        visitBlockPlaceholder(ph) {
            const children = ph.children.map((child) => child.visit(this)).join('');
            return `{$${ph.startName}}${children}{$${ph.closeName}}`;
        }
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // XMB/XTB placeholders can only contain A-Z, 0-9 and _
    function toPublicName(internalName) {
        return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');
    }

    /** Name of the i18n attributes **/
    const I18N_ATTR = 'i18n';
    const I18N_ATTR_PREFIX = 'i18n-';
    /** Prefix of var expressions used in ICUs */
    const I18N_ICU_VAR_PREFIX = 'VAR_';
    function isI18nAttribute(name) {
        return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);
    }
    function hasI18nAttrs(element) {
        return element.attrs.some((attr) => isI18nAttribute(attr.name));
    }
    function icuFromI18nMessage(message) {
        return message.nodes[0];
    }
    /**
     * Format the placeholder names in a map of placeholders to expressions.
     *
     * The placeholder names are converted from "internal" format (e.g. `START_TAG_DIV_1`) to "external"
     * format (e.g. `startTagDiv_1`).
     *
     * @param params A map of placeholder names to expressions.
     * @param useCamelCase whether to camelCase the placeholder name when formatting.
     * @returns A new map of formatted placeholder names to expressions.
     */
    function formatI18nPlaceholderNamesInMap(params = {}, useCamelCase) {
        const _params = {};
        if (params && Object.keys(params).length) {
            Object.keys(params).forEach((key) => (_params[formatI18nPlaceholderName(key, useCamelCase)] = params[key]));
        }
        return _params;
    }
    /**
     * Converts internal placeholder names to public-facing format
     * (for example to use in goog.getMsg call).
     * Example: `START_TAG_DIV_1` is converted to `startTagDiv_1`.
     *
     * @param name The placeholder name that should be formatted
     * @returns Formatted placeholder name
     */
    function formatI18nPlaceholderName(name, useCamelCase = true) {
        const publicName = toPublicName(name);
        if (!useCamelCase) {
            return publicName;
        }
        const chunks = publicName.split('_');
        if (chunks.length === 1) {
            // if no "_" found - just lowercase the value
            return name.toLowerCase();
        }
        let postfix;
        // eject last element if it's a number
        if (/^\d+$/.test(chunks[chunks.length - 1])) {
            postfix = chunks.pop();
        }
        let raw = chunks.shift().toLowerCase();
        if (chunks.length) {
            raw += chunks.map((c) => c.charAt(0).toUpperCase() + c.slice(1).toLowerCase()).join('');
        }
        return postfix ? `${raw}_${postfix}` : raw;
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Checks whether an object key contains potentially unsafe chars, thus the key should be wrapped in
     * quotes. Note: we do not wrap all keys into quotes, as it may have impact on minification and may
     * not work in some cases when object keys are mangled by a minifier.
     *
     * TODO(FW-1136): this is a temporary solution, we need to come up with a better way of working with
     * inputs that contain potentially unsafe chars.
     */
    const UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;
    /** Name of the temporary to use during data binding */
    const TEMPORARY_NAME = '_t';
    /** Name of the context parameter passed into a template function */
    const CONTEXT_NAME = 'ctx';
    /** Name of the RenderFlag passed into a template function */
    const RENDER_FLAGS = 'rf';
    /**
     * Creates an allocator for a temporary variable.
     *
     * A variable declaration is added to the statements the first time the allocator is invoked.
     */
    function temporaryAllocator(pushStatement, name) {
        let temp = null;
        return () => {
            if (!temp) {
                pushStatement(new DeclareVarStmt(TEMPORARY_NAME, undefined, DYNAMIC_TYPE));
                temp = variable(name);
            }
            return temp;
        };
    }
    function asLiteral(value) {
        if (Array.isArray(value)) {
            return literalArr(value.map(asLiteral));
        }
        return literal$1(value, INFERRED_TYPE);
    }
    /**
     * Serializes inputs and outputs for `defineDirective` and `defineComponent`.
     *
     * This will attempt to generate optimized data structures to minimize memory or
     * file size of fully compiled applications.
     */
    function conditionallyCreateDirectiveBindingLiteral(map, forInputs) {
        const keys = Object.getOwnPropertyNames(map);
        if (keys.length === 0) {
            return null;
        }
        return literalMap(keys.map((key) => {
            const value = map[key];
            let declaredName;
            let publicName;
            let minifiedName;
            let expressionValue;
            if (typeof value === 'string') {
                // canonical syntax: `dirProp: publicProp`
                declaredName = key;
                minifiedName = key;
                publicName = value;
                expressionValue = asLiteral(publicName);
            }
            else {
                minifiedName = key;
                declaredName = value.classPropertyName;
                publicName = value.bindingPropertyName;
                const differentDeclaringName = publicName !== declaredName;
                const hasDecoratorInputTransform = value.transformFunction !== null;
                let flags = InputFlags.None;
                // Build up input flags
                if (value.isSignal) {
                    flags |= InputFlags.SignalBased;
                }
                if (hasDecoratorInputTransform) {
                    flags |= InputFlags.HasDecoratorInputTransform;
                }
                // Inputs, compared to outputs, will track their declared name (for `ngOnChanges`), support
                // decorator input transform functions, or store flag information if there is any.
                if (forInputs &&
                    (differentDeclaringName || hasDecoratorInputTransform || flags !== InputFlags.None)) {
                    const result = [literal$1(flags), asLiteral(publicName)];
                    if (differentDeclaringName || hasDecoratorInputTransform) {
                        result.push(asLiteral(declaredName));
                        if (hasDecoratorInputTransform) {
                            result.push(value.transformFunction);
                        }
                    }
                    expressionValue = literalArr(result);
                }
                else {
                    expressionValue = asLiteral(publicName);
                }
            }
            return {
                key: minifiedName,
                // put quotes around keys that contain potentially unsafe characters
                quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),
                value: expressionValue,
            };
        }));
    }
    /**
     * A representation for an object literal used during codegen of definition objects. The generic
     * type `T` allows to reference a documented type of the generated structure, such that the
     * property names that are set can be resolved to their documented declaration.
     */
    class DefinitionMap {
        constructor() {
            this.values = [];
        }
        set(key, value) {
            if (value) {
                const existing = this.values.find((value) => value.key === key);
                if (existing) {
                    existing.value = value;
                }
                else {
                    this.values.push({ key: key, value, quoted: false });
                }
            }
        }
        toLiteralMap() {
            return literalMap(this.values);
        }
    }
    /**
     * Creates a `CssSelector` from an AST node.
     */
    function createCssSelectorFromNode(node) {
        const elementName = node instanceof Element$1 ? node.name : 'ng-template';
        const attributes = getAttrsForDirectiveMatching(node);
        const cssSelector = new CssSelector();
        const elementNameNoNs = splitNsName(elementName)[1];
        cssSelector.setElement(elementNameNoNs);
        Object.getOwnPropertyNames(attributes).forEach((name) => {
            const nameNoNs = splitNsName(name)[1];
            const value = attributes[name];
            cssSelector.addAttribute(nameNoNs, value);
            if (name.toLowerCase() === 'class') {
                const classes = value.trim().split(/\s+/);
                classes.forEach((className) => cssSelector.addClassName(className));
            }
        });
        return cssSelector;
    }
    /**
     * Extract a map of properties to values for a given element or template node, which can be used
     * by the directive matching machinery.
     *
     * @param elOrTpl the element or template in question
     * @return an object set up for directive matching. For attributes on the element/template, this
     * object maps a property name to its (static) value. For any bindings, this map simply maps the
     * property name to an empty string.
     */
    function getAttrsForDirectiveMatching(elOrTpl) {
        const attributesMap = {};
        if (elOrTpl instanceof Template && elOrTpl.tagName !== 'ng-template') {
            elOrTpl.templateAttrs.forEach((a) => (attributesMap[a.name] = ''));
        }
        else {
            elOrTpl.attributes.forEach((a) => {
                if (!isI18nAttribute(a.name)) {
                    attributesMap[a.name] = a.value;
                }
            });
            elOrTpl.inputs.forEach((i) => {
                if (i.type === BindingType.Property || i.type === BindingType.TwoWay) {
                    attributesMap[i.name] = '';
                }
            });
            elOrTpl.outputs.forEach((o) => {
                attributesMap[o.name] = '';
            });
        }
        return attributesMap;
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    function compileInjectable(meta, resolveForwardRefs) {
        let result = null;
        const factoryMeta = {
            name: meta.name,
            type: meta.type,
            typeArgumentCount: meta.typeArgumentCount,
            deps: [],
            target: FactoryTarget$1.Injectable,
        };
        if (meta.useClass !== undefined) {
            // meta.useClass has two modes of operation. Either deps are specified, in which case `new` is
            // used to instantiate the class with dependencies injected, or deps are not specified and
            // the factory of the class is used to instantiate it.
            //
            // A special case exists for useClass: Type where Type is the injectable type itself and no
            // deps are specified, in which case 'useClass' is effectively ignored.
            const useClassOnSelf = meta.useClass.expression.isEquivalent(meta.type.value);
            let deps = undefined;
            if (meta.deps !== undefined) {
                deps = meta.deps;
            }
            if (deps !== undefined) {
                // factory: () => new meta.useClass(...deps)
                result = compileFactoryFunction({
                    ...factoryMeta,
                    delegate: meta.useClass.expression,
                    delegateDeps: deps,
                    delegateType: R3FactoryDelegateType.Class,
                });
            }
            else if (useClassOnSelf) {
                result = compileFactoryFunction(factoryMeta);
            }
            else {
                result = {
                    statements: [],
                    expression: delegateToFactory(meta.type.value, meta.useClass.expression, resolveForwardRefs),
                };
            }
        }
        else if (meta.useFactory !== undefined) {
            if (meta.deps !== undefined) {
                result = compileFactoryFunction({
                    ...factoryMeta,
                    delegate: meta.useFactory,
                    delegateDeps: meta.deps || [],
                    delegateType: R3FactoryDelegateType.Function,
                });
            }
            else {
                result = { statements: [], expression: arrowFn([], meta.useFactory.callFn([])) };
            }
        }
        else if (meta.useValue !== undefined) {
            // Note: it's safe to use `meta.useValue` instead of the `USE_VALUE in meta` check used for
            // client code because meta.useValue is an Expression which will be defined even if the actual
            // value is undefined.
            result = compileFactoryFunction({
                ...factoryMeta,
                expression: meta.useValue.expression,
            });
        }
        else if (meta.useExisting !== undefined) {
            // useExisting is an `inject` call on the existing token.
            result = compileFactoryFunction({
                ...factoryMeta,
                expression: importExpr(Identifiers.inject).callFn([meta.useExisting.expression]),
            });
        }
        else {
            result = {
                statements: [],
                expression: delegateToFactory(meta.type.value, meta.type.value, resolveForwardRefs),
            };
        }
        const token = meta.type.value;
        const injectableProps = new DefinitionMap();
        injectableProps.set('token', token);
        injectableProps.set('factory', result.expression);
        // Only generate providedIn property if it has a non-null value
        if (meta.providedIn.expression.value !== null) {
            injectableProps.set('providedIn', convertFromMaybeForwardRefExpression(meta.providedIn));
        }
        const expression = importExpr(Identifiers.ɵɵdefineInjectable)
            .callFn([injectableProps.toLiteralMap()], undefined, true);
        return {
            expression,
            type: createInjectableType(meta),
            statements: result.statements,
        };
    }
    function createInjectableType(meta) {
        return new ExpressionType(importExpr(Identifiers.InjectableDeclaration, [
            typeWithParameters(meta.type.type, meta.typeArgumentCount),
        ]));
    }
    function delegateToFactory(type, useType, unwrapForwardRefs) {
        if (type.node === useType.node) {
            // The types are the same, so we can simply delegate directly to the type's factory.
            // ```
            // factory: type.ɵfac
            // ```
            return useType.prop('ɵfac');
        }
        if (!unwrapForwardRefs) {
            // The type is not wrapped in a `forwardRef()`, so we create a simple factory function that
            // accepts a sub-type as an argument.
            // ```
            // factory: function(t) { return useType.ɵfac(t); }
            // ```
            return createFactoryFunction(useType);
        }
        // The useType is actually wrapped in a `forwardRef()` so we need to resolve that before
        // calling its factory.
        // ```
        // factory: function(t) { return core.resolveForwardRef(type).ɵfac(t); }
        // ```
        const unwrappedType = importExpr(Identifiers.resolveForwardRef).callFn([useType]);
        return createFactoryFunction(unwrappedType);
    }
    function createFactoryFunction(type) {
        return arrowFn([new FnParam('t', DYNAMIC_TYPE)], type.prop('ɵfac').callFn([variable('t')]));
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    const UNUSABLE_INTERPOLATION_REGEXPS = [
        /@/, // control flow reserved symbol
        /^\s*$/, // empty
        /[<>]/, // html tag
        /^[{}]$/, // i18n expansion
        /&(#|[a-z])/i, // character reference,
        /^\/\//, // comment
    ];
    function assertInterpolationSymbols(identifier, value) {
        if (value != null && !(Array.isArray(value) && value.length == 2)) {
            throw new Error(`Expected '${identifier}' to be an array, [start, end].`);
        }
        else if (value != null) {
            const start = value[0];
            const end = value[1];
            // Check for unusable interpolation symbols
            UNUSABLE_INTERPOLATION_REGEXPS.forEach((regexp) => {
                if (regexp.test(start) || regexp.test(end)) {
                    throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);
                }
            });
        }
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    class InterpolationConfig {
        static fromArray(markers) {
            if (!markers) {
                return DEFAULT_INTERPOLATION_CONFIG;
            }
            assertInterpolationSymbols('interpolation', markers);
            return new InterpolationConfig(markers[0], markers[1]);
        }
        constructor(start, end) {
            this.start = start;
            this.end = end;
        }
    }
    const DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
    const DEFAULT_CONTAINER_BLOCKS = new Set(['switch']);

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    const $EOF = 0;
    const $BSPACE = 8;
    const $TAB = 9;
    const $LF = 10;
    const $VTAB = 11;
    const $FF = 12;
    const $CR = 13;
    const $SPACE = 32;
    const $BANG = 33;
    const $DQ = 34;
    const $HASH = 35;
    const $$ = 36;
    const $PERCENT = 37;
    const $AMPERSAND = 38;
    const $SQ = 39;
    const $LPAREN = 40;
    const $RPAREN = 41;
    const $STAR = 42;
    const $PLUS = 43;
    const $COMMA = 44;
    const $MINUS = 45;
    const $PERIOD = 46;
    const $SLASH = 47;
    const $COLON = 58;
    const $SEMICOLON = 59;
    const $LT = 60;
    const $EQ = 61;
    const $GT = 62;
    const $QUESTION = 63;
    const $0 = 48;
    const $7 = 55;
    const $9 = 57;
    const $A = 65;
    const $E = 69;
    const $F = 70;
    const $X = 88;
    const $Z = 90;
    const $LBRACKET = 91;
    const $BACKSLASH = 92;
    const $RBRACKET = 93;
    const $CARET = 94;
    const $_ = 95;
    const $a = 97;
    const $b = 98;
    const $e = 101;
    const $f = 102;
    const $n = 110;
    const $r = 114;
    const $t = 116;
    const $u = 117;
    const $v = 118;
    const $x = 120;
    const $z = 122;
    const $LBRACE = 123;
    const $BAR = 124;
    const $RBRACE = 125;
    const $NBSP = 160;
    const $AT = 64;
    const $BT = 96;
    function isWhitespace(code) {
        return (code >= $TAB && code <= $SPACE) || code == $NBSP;
    }
    function isDigit(code) {
        return $0 <= code && code <= $9;
    }
    function isAsciiLetter(code) {
        return (code >= $a && code <= $z) || (code >= $A && code <= $Z);
    }
    function isAsciiHexDigit(code) {
        return (code >= $a && code <= $f) || (code >= $A && code <= $F) || isDigit(code);
    }
    function isNewLine(code) {
        return code === $LF || code === $CR;
    }
    function isOctalDigit(code) {
        return $0 <= code && code <= $7;
    }
    function isQuote(code) {
        return code === $SQ || code === $DQ || code === $BT;
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    class ParseLocation {
        constructor(file, offset, line, col) {
            this.file = file;
            this.offset = offset;
            this.line = line;
            this.col = col;
        }
        toString() {
            return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;
        }
        moveBy(delta) {
            const source = this.file.content;
            const len = source.length;
            let offset = this.offset;
            let line = this.line;
            let col = this.col;
            while (offset > 0 && delta < 0) {
                offset--;
                delta++;
                const ch = source.charCodeAt(offset);
                if (ch == $LF) {
                    line--;
                    const priorLine = source
                        .substring(0, offset - 1)
                        .lastIndexOf(String.fromCharCode($LF));
                    col = priorLine > 0 ? offset - priorLine : offset;
                }
                else {
                    col--;
                }
            }
            while (offset < len && delta > 0) {
                const ch = source.charCodeAt(offset);
                offset++;
                delta--;
                if (ch == $LF) {
                    line++;
                    col = 0;
                }
                else {
                    col++;
                }
            }
            return new ParseLocation(this.file, offset, line, col);
        }
        // Return the source around the location
        // Up to `maxChars` or `maxLines` on each side of the location
        getContext(maxChars, maxLines) {
            const content = this.file.content;
            let startOffset = this.offset;
            if (startOffset != null) {
                if (startOffset > content.length - 1) {
                    startOffset = content.length - 1;
                }
                let endOffset = startOffset;
                let ctxChars = 0;
                let ctxLines = 0;
                while (ctxChars < maxChars && startOffset > 0) {
                    startOffset--;
                    ctxChars++;
                    if (content[startOffset] == '\n') {
                        if (++ctxLines == maxLines) {
                            break;
                        }
                    }
                }
                ctxChars = 0;
                ctxLines = 0;
                while (ctxChars < maxChars && endOffset < content.length - 1) {
                    endOffset++;
                    ctxChars++;
                    if (content[endOffset] == '\n') {
                        if (++ctxLines == maxLines) {
                            break;
                        }
                    }
                }
                return {
                    before: content.substring(startOffset, this.offset),
                    after: content.substring(this.offset, endOffset + 1),
                };
            }
            return null;
        }
    }
    class ParseSourceFile {
        constructor(content, url) {
            this.content = content;
            this.url = url;
        }
    }
    class ParseSourceSpan {
        /**
         * Create an object that holds information about spans of tokens/nodes captured during
         * lexing/parsing of text.
         *
         * @param start
         * The location of the start of the span (having skipped leading trivia).
         * Skipping leading trivia makes source-spans more "user friendly", since things like HTML
         * elements will appear to begin at the start of the opening tag, rather than at the start of any
         * leading trivia, which could include newlines.
         *
         * @param end
         * The location of the end of the span.
         *
         * @param fullStart
         * The start of the token without skipping the leading trivia.
         * This is used by tooling that splits tokens further, such as extracting Angular interpolations
         * from text tokens. Such tooling creates new source-spans relative to the original token's
         * source-span. If leading trivia characters have been skipped then the new source-spans may be
         * incorrectly offset.
         *
         * @param details
         * Additional information (such as identifier names) that should be associated with the span.
         */
        constructor(start, end, fullStart = start, details = null) {
            this.start = start;
            this.end = end;
            this.fullStart = fullStart;
            this.details = details;
        }
        toString() {
            return this.start.file.content.substring(this.start.offset, this.end.offset);
        }
    }
    var ParseErrorLevel;
    (function (ParseErrorLevel) {
        ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
        ParseErrorLevel[ParseErrorLevel["ERROR"] = 1] = "ERROR";
    })(ParseErrorLevel || (ParseErrorLevel = {}));
    class ParseError {
        constructor(span, msg, level = ParseErrorLevel.ERROR) {
            this.span = span;
            this.msg = msg;
            this.level = level;
        }
        contextualMessage() {
            const ctx = this.span.start.getContext(100, 3);
            return ctx
                ? `${this.msg} ("${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}")`
                : this.msg;
        }
        toString() {
            const details = this.span.details ? `, ${this.span.details}` : '';
            return `${this.contextualMessage()}: ${this.span.start}${details}`;
        }
    }
    /**
     * Generates Source Span object for a given R3 Type for JIT mode.
     *
     * @param kind Component or Directive.
     * @param typeName name of the Component or Directive.
     * @param sourceUrl reference to Component or Directive source.
     * @returns instance of ParseSourceSpan that represent a given Component or Directive.
     */
    function r3JitTypeSourceSpan(kind, typeName, sourceUrl) {
        const sourceFileName = `in ${kind} ${typeName} in ${sourceUrl}`;
        const sourceFile = new ParseSourceFile('', sourceFileName);
        return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
    }
    let _anonymousTypeIndex = 0;
    function identifierName(compileIdentifier) {
        if (!compileIdentifier || !compileIdentifier.reference) {
            return null;
        }
        const ref = compileIdentifier.reference;
        if (ref['__anonymousType']) {
            return ref['__anonymousType'];
        }
        if (ref['__forward_ref__']) {
            // We do not want to try to stringify a `forwardRef()` function because that would cause the
            // inner function to be evaluated too early, defeating the whole point of the `forwardRef`.
            return '__forward_ref__';
        }
        let identifier = stringify(ref);
        if (identifier.indexOf('(') >= 0) {
            // case: anonymous functions!
            identifier = `anonymous_${_anonymousTypeIndex++}`;
            ref['__anonymousType'] = identifier;
        }
        else {
            identifier = sanitizeIdentifier(identifier);
        }
        return identifier;
    }
    function sanitizeIdentifier(name) {
        return name.replace(/\W/g, '_');
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * In TypeScript, tagged template functions expect a "template object", which is an array of
     * "cooked" strings plus a `raw` property that contains an array of "raw" strings. This is
     * typically constructed with a function called `__makeTemplateObject(cooked, raw)`, but it may not
     * be available in all environments.
     *
     * This is a JavaScript polyfill that uses __makeTemplateObject when it's available, but otherwise
     * creates an inline helper with the same functionality.
     *
     * In the inline function, if `Object.defineProperty` is available we use that to attach the `raw`
     * array.
     */
    const makeTemplateObjectPolyfill = '(this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e})';
    class AbstractJsEmitterVisitor extends AbstractEmitterVisitor {
        constructor() {
            super(false);
        }
        visitWrappedNodeExpr(ast, ctx) {
            throw new Error('Cannot emit a WrappedNodeExpr in Javascript.');
        }
        visitDeclareVarStmt(stmt, ctx) {
            ctx.print(stmt, `var ${stmt.name}`);
            if (stmt.value) {
                ctx.print(stmt, ' = ');
                stmt.value.visitExpression(this, ctx);
            }
            ctx.println(stmt, `;`);
            return null;
        }
        visitTaggedTemplateExpr(ast, ctx) {
            // The following convoluted piece of code is effectively the downlevelled equivalent of
            // ```
            // tag`...`
            // ```
            // which is effectively like:
            // ```
            // tag(__makeTemplateObject(cooked, raw), expression1, expression2, ...);
            // ```
            const elements = ast.template.elements;
            ast.tag.visitExpression(this, ctx);
            ctx.print(ast, `(${makeTemplateObjectPolyfill}(`);
            ctx.print(ast, `[${elements.map((part) => escapeIdentifier(part.text, false)).join(', ')}], `);
            ctx.print(ast, `[${elements.map((part) => escapeIdentifier(part.rawText, false)).join(', ')}])`);
            ast.template.expressions.forEach((expression) => {
                ctx.print(ast, ', ');
                expression.visitExpression(this, ctx);
            });
            ctx.print(ast, ')');
            return null;
        }
        visitFunctionExpr(ast, ctx) {
            ctx.print(ast, `function${ast.name ? ' ' + ast.name : ''}(`);
            this._visitParams(ast.params, ctx);
            ctx.println(ast, `) {`);
            ctx.incIndent();
            this.visitAllStatements(ast.statements, ctx);
            ctx.decIndent();
            ctx.print(ast, `}`);
            return null;
        }
        visitArrowFunctionExpr(ast, ctx) {
            ctx.print(ast, '(');
            this._visitParams(ast.params, ctx);
            ctx.print(ast, ') =>');
            if (Array.isArray(ast.body)) {
                ctx.println(ast, `{`);
                ctx.incIndent();
                this.visitAllStatements(ast.body, ctx);
                ctx.decIndent();
                ctx.print(ast, `}`);
            }
            else {
                const isObjectLiteral = ast.body instanceof LiteralMapExpr;
                if (isObjectLiteral) {
                    ctx.print(ast, '(');
                }
                ast.body.visitExpression(this, ctx);
                if (isObjectLiteral) {
                    ctx.print(ast, ')');
                }
            }
            return null;
        }
        visitDeclareFunctionStmt(stmt, ctx) {
            ctx.print(stmt, `function ${stmt.name}(`);
            this._visitParams(stmt.params, ctx);
            ctx.println(stmt, `) {`);
            ctx.incIndent();
            this.visitAllStatements(stmt.statements, ctx);
            ctx.decIndent();
            ctx.println(stmt, `}`);
            return null;
        }
        visitLocalizedString(ast, ctx) {
            // The following convoluted piece of code is effectively the downlevelled equivalent of
            // ```
            // $localize `...`
            // ```
            // which is effectively like:
            // ```
            // $localize(__makeTemplateObject(cooked, raw), expression1, expression2, ...);
            // ```
            ctx.print(ast, `$localize(${makeTemplateObjectPolyfill}(`);
            const parts = [ast.serializeI18nHead()];
            for (let i = 1; i < ast.messageParts.length; i++) {
                parts.push(ast.serializeI18nTemplatePart(i));
            }
            ctx.print(ast, `[${parts.map((part) => escapeIdentifier(part.cooked, false)).join(', ')}], `);
            ctx.print(ast, `[${parts.map((part) => escapeIdentifier(part.raw, false)).join(', ')}])`);
            ast.expressions.forEach((expression) => {
                ctx.print(ast, ', ');
                expression.visitExpression(this, ctx);
            });
            ctx.print(ast, ')');
            return null;
        }
        _visitParams(params, ctx) {
            this.visitAllObjects((param) => ctx.print(null, param.name), params, ctx, ',');
        }
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * The Trusted Types policy, or null if Trusted Types are not
     * enabled/supported, or undefined if the policy has not been created yet.
     */
    let policy;
    /**
     * Returns the Trusted Types policy, or null if Trusted Types are not
     * enabled/supported. The first call to this function will create the policy.
     */
    function getPolicy() {
        if (policy === undefined) {
            const trustedTypes = _global['trustedTypes'];
            policy = null;
            if (trustedTypes) {
                try {
                    policy = trustedTypes.createPolicy('angular#unsafe-jit', {
                        createScript: (s) => s,
                    });
                }
                catch {
                    // trustedTypes.createPolicy throws if called with a name that is
                    // already registered, even in report-only mode. Until the API changes,
                    // catch the error not to break the applications functionally. In such
                    // cases, the code will fall back to using strings.
                }
            }
        }
        return policy;
    }
    /**
     * Unsafely promote a string to a TrustedScript, falling back to strings when
     * Trusted Types are not available.
     * @security In particular, it must be assured that the provided string will
     * never cause an XSS vulnerability if used in a context that will be
     * interpreted and executed as a script by a browser, e.g. when calling eval.
     */
    function trustedScriptFromString(script) {
        return getPolicy()?.createScript(script) || script;
    }
    /**
     * Unsafely call the Function constructor with the given string arguments.
     * @security This is a security-sensitive function; any use of this function
     * must go through security review. In particular, it must be assured that it
     * is only called from the JIT compiler, as use in other code can lead to XSS
     * vulnerabilities.
     */
    function newTrustedFunctionForJIT(...args) {
        if (!_global['trustedTypes']) {
            // In environments that don't support Trusted Types, fall back to the most
            // straightforward implementation:
            return new Function(...args);
        }
        // Chrome currently does not support passing TrustedScript to the Function
        // constructor. The following implements the workaround proposed on the page
        // below, where the Chromium bug is also referenced:
        // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor
        const fnArgs = args.slice(0, -1).join(',');
        const fnBody = args[args.length - 1];
        const body = `(function anonymous(${fnArgs}
) { ${fnBody}
})`;
        // Using eval directly confuses the compiler and prevents this module from
        // being stripped out of JS binaries even if not used. The global['eval']
        // indirection fixes that.
        const fn = _global['eval'](trustedScriptFromString(body));
        if (fn.bind === undefined) {
            // Workaround for a browser bug that only exists in Chrome 83, where passing
            // a TrustedScript to eval just returns the TrustedScript back without
            // evaluating it. In that case, fall back to the most straightforward
            // implementation:
            return new Function(...args);
        }
        // To completely mimic the behavior of calling "new Function", two more
        // things need to happen:
        // 1. Stringifying the resulting function should return its source code
        fn.toString = () => body;
        // 2. When calling the resulting function, `this` should refer to `global`
        return fn.bind(_global);
        // When Trusted Types support in Function constructors is widely available,
        // the implementation of this function can be simplified to:
        // return new Function(...args.map(a => trustedScriptFromString(a)));
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A helper class to manage the evaluation of JIT generated code.
     */
    class JitEvaluator {
        /**
         *
         * @param sourceUrl The URL of the generated code.
         * @param statements An array of Angular statement AST nodes to be evaluated.
         * @param refResolver Resolves `o.ExternalReference`s into values.
         * @param createSourceMaps If true then create a source-map for the generated code and include it
         * inline as a source-map comment.
         * @returns A map of all the variables in the generated code.
         */
        evaluateStatements(sourceUrl, statements, refResolver, createSourceMaps) {
            const converter = new JitEmitterVisitor(refResolver);
            const ctx = EmitterVisitorContext.createRoot();
            // Ensure generated code is in strict mode
            if (statements.length > 0 && !isUseStrictStatement(statements[0])) {
                statements = [literal$1('use strict').toStmt(), ...statements];
            }
            converter.visitAllStatements(statements, ctx);
            converter.createReturnStmt(ctx);
            return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);
        }
        /**
         * Evaluate a piece of JIT generated code.
         * @param sourceUrl The URL of this generated code.
         * @param ctx A context object that contains an AST of the code to be evaluated.
         * @param vars A map containing the names and values of variables that the evaluated code might
         * reference.
         * @param createSourceMap If true then create a source-map for the generated code and include it
         * inline as a source-map comment.
         * @returns The result of evaluating the code.
         */
        evaluateCode(sourceUrl, ctx, vars, createSourceMap) {
            let fnBody = `"use strict";${ctx.toSource()}\n//# sourceURL=${sourceUrl}`;
            const fnArgNames = [];
            const fnArgValues = [];
            for (const argName in vars) {
                fnArgValues.push(vars[argName]);
                fnArgNames.push(argName);
            }
            if (createSourceMap) {
                // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise
                // E.g. ```
                // function anonymous(a,b,c
                // /**/) { ... }```
                // We don't want to hard code this fact, so we auto detect it via an empty function first.
                const emptyFn = newTrustedFunctionForJIT(...fnArgNames.concat('return null;')).toString();
                const headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\n').length - 1;
                fnBody += `\n${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;
            }
            const fn = newTrustedFunctionForJIT(...fnArgNames.concat(fnBody));
            return this.executeFunction(fn, fnArgValues);
        }
        /**
         * Execute a JIT generated function by calling it.
         *
         * This method can be overridden in tests to capture the functions that are generated
         * by this `JitEvaluator` class.
         *
         * @param fn A function to execute.
         * @param args The arguments to pass to the function being executed.
         * @returns The return value of the executed function.
         */
        executeFunction(fn, args) {
            return fn(...args);
        }
    }
    /**
     * An Angular AST visitor that converts AST nodes into executable JavaScript code.
     */
    class JitEmitterVisitor extends AbstractJsEmitterVisitor {
        constructor(refResolver) {
            super();
            this.refResolver = refResolver;
            this._evalArgNames = [];
            this._evalArgValues = [];
            this._evalExportedVars = [];
        }
        createReturnStmt(ctx) {
            const stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map((resultVar) => new LiteralMapEntry(resultVar, variable(resultVar), false))));
            stmt.visitStatement(this, ctx);
        }
        getArgs() {
            const result = {};
            for (let i = 0; i < this._evalArgNames.length; i++) {
                result[this._evalArgNames[i]] = this._evalArgValues[i];
            }
            return result;
        }
        visitExternalExpr(ast, ctx) {
            this._emitReferenceToExternal(ast, this.refResolver.resolveExternalReference(ast.value), ctx);
            return null;
        }
        visitWrappedNodeExpr(ast, ctx) {
            this._emitReferenceToExternal(ast, ast.node, ctx);
            return null;
        }
        visitDeclareVarStmt(stmt, ctx) {
            if (stmt.hasModifier(StmtModifier.Exported)) {
                this._evalExportedVars.push(stmt.name);
            }
            return super.visitDeclareVarStmt(stmt, ctx);
        }
        visitDeclareFunctionStmt(stmt, ctx) {
            if (stmt.hasModifier(StmtModifier.Exported)) {
                this._evalExportedVars.push(stmt.name);
            }
            return super.visitDeclareFunctionStmt(stmt, ctx);
        }
        _emitReferenceToExternal(ast, value, ctx) {
            let id = this._evalArgValues.indexOf(value);
            if (id === -1) {
                id = this._evalArgValues.length;
                this._evalArgValues.push(value);
                const name = identifierName({ reference: value }) || 'val';
                this._evalArgNames.push(`jit_${name}_${id}`);
            }
            ctx.print(ast, this._evalArgNames[id]);
        }
    }
    function isUseStrictStatement(statement) {
        return statement.isEquivalent(literal$1('use strict').toStmt());
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    function compileInjector(meta) {
        const definitionMap = new DefinitionMap();
        if (meta.providers !== null) {
            definitionMap.set('providers', meta.providers);
        }
        if (meta.imports.length > 0) {
            definitionMap.set('imports', literalArr(meta.imports));
        }
        const expression = importExpr(Identifiers.defineInjector)
            .callFn([definitionMap.toLiteralMap()], undefined, true);
        const type = createInjectorType(meta);
        return { expression, type, statements: [] };
    }
    function createInjectorType(meta) {
        return new ExpressionType(importExpr(Identifiers.InjectorDeclaration, [new ExpressionType(meta.type.type)]));
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Implementation of `CompileReflector` which resolves references to @angular/core
     * symbols at runtime, according to a consumer-provided mapping.
     *
     * Only supports `resolveExternalReference`, all other methods throw.
     */
    class R3JitReflector {
        constructor(context) {
            this.context = context;
        }
        resolveExternalReference(ref) {
            // This reflector only handles @angular/core imports.
            if (ref.moduleName !== '@angular/core') {
                throw new Error(`Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);
            }
            if (!this.context.hasOwnProperty(ref.name)) {
                throw new Error(`No value provided for @angular/core symbol '${ref.name}'.`);
            }
            return this.context[ref.name];
        }
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * How the selector scope of an NgModule (its declarations, imports, and exports) should be emitted
     * as a part of the NgModule definition.
     */
    var R3SelectorScopeMode;
    (function (R3SelectorScopeMode) {
        /**
         * Emit the declarations inline into the module definition.
         *
         * This option is useful in certain contexts where it's known that JIT support is required. The
         * tradeoff here is that this emit style prevents directives and pipes from being tree-shaken if
         * they are unused, but the NgModule is used.
         */
        R3SelectorScopeMode[R3SelectorScopeMode["Inline"] = 0] = "Inline";
        /**
         * Emit the declarations using a side effectful function call, `ɵɵsetNgModuleScope`, that is
         * guarded with the `ngJitMode` flag.
         *
         * This form of emit supports JIT and can be optimized away if the `ngJitMode` flag is set to
         * false, which allows unused directives and pipes to be tree-shaken.
         */
        R3SelectorScopeMode[R3SelectorScopeMode["SideEffect"] = 1] = "SideEffect";
        /**
         * Don't generate selector scopes at all.
         *
         * This is useful for contexts where JIT support is known to be unnecessary.
         */
        R3SelectorScopeMode[R3SelectorScopeMode["Omit"] = 2] = "Omit";
    })(R3SelectorScopeMode || (R3SelectorScopeMode = {}));
    /**
     * The type of the NgModule meta data.
     * - Global: Used for full and partial compilation modes which mainly includes R3References.
     * - Local: Used for the local compilation mode which mainly includes the raw expressions as appears
     * in the NgModule decorator.
     */
    var R3NgModuleMetadataKind;
    (function (R3NgModuleMetadataKind) {
        R3NgModuleMetadataKind[R3NgModuleMetadataKind["Global"] = 0] = "Global";
        R3NgModuleMetadataKind[R3NgModuleMetadataKind["Local"] = 1] = "Local";
    })(R3NgModuleMetadataKind || (R3NgModuleMetadataKind = {}));
    /**
     * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.
     */
    function compileNgModule(meta) {
        const statements = [];
        const definitionMap = new DefinitionMap();
        definitionMap.set('type', meta.type.value);
        // Assign bootstrap definition. In local compilation mode (i.e., for
        // `R3NgModuleMetadataKind.LOCAL`) we assign the bootstrap field using the runtime
        // `ɵɵsetNgModuleScope`.
        if (meta.kind === R3NgModuleMetadataKind.Global && meta.bootstrap.length > 0) {
            definitionMap.set('bootstrap', refsToArray(meta.bootstrap, meta.containsForwardDecls));
        }
        if (meta.selectorScopeMode === R3SelectorScopeMode.Inline) {
            // If requested to emit scope information inline, pass the `declarations`, `imports` and
            // `exports` to the `ɵɵdefineNgModule()` call directly.
            if (meta.declarations.length > 0) {
                definitionMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));
            }
            if (meta.imports.length > 0) {
                definitionMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));
            }
            if (meta.exports.length > 0) {
                definitionMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));
            }
        }
        else if (meta.selectorScopeMode === R3SelectorScopeMode.SideEffect) {
            // In this mode, scope information is not passed into `ɵɵdefineNgModule` as it
            // would prevent tree-shaking of the declarations, imports and exports references. Instead, it's
            // patched onto the NgModule definition with a `ɵɵsetNgModuleScope` call that's guarded by the
            // `ngJitMode` flag.
            const setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);
            if (setNgModuleScopeCall !== null) {
                statements.push(setNgModuleScopeCall);
            }
        }
        else ;
        if (meta.schemas !== null && meta.schemas.length > 0) {
            definitionMap.set('schemas', literalArr(meta.schemas.map((ref) => ref.value)));
        }
        if (meta.id !== null) {
            definitionMap.set('id', meta.id);
            // Generate a side-effectful call to register this NgModule by its id, as per the semantics of
            // NgModule ids.
            statements.push(importExpr(Identifiers.registerNgModuleType).callFn([meta.type.value, meta.id]).toStmt());
        }
        const expression = importExpr(Identifiers.defineNgModule)
            .callFn([definitionMap.toLiteralMap()], undefined, true);
        const type = createNgModuleType(meta);
        return { expression, type, statements };
    }
    /**
     * This function is used in JIT mode to generate the call to `ɵɵdefineNgModule()` from a call to
     * `ɵɵngDeclareNgModule()`.
     */
    function compileNgModuleDeclarationExpression(meta) {
        const definitionMap = new DefinitionMap();
        definitionMap.set('type', new WrappedNodeExpr(meta.type));
        if (meta.bootstrap !== undefined) {
            definitionMap.set('bootstrap', new WrappedNodeExpr(meta.bootstrap));
        }
        if (meta.declarations !== undefined) {
            definitionMap.set('declarations', new WrappedNodeExpr(meta.declarations));
        }
        if (meta.imports !== undefined) {
            definitionMap.set('imports', new WrappedNodeExpr(meta.imports));
        }
        if (meta.exports !== undefined) {
            definitionMap.set('exports', new WrappedNodeExpr(meta.exports));
        }
        if (meta.schemas !== undefined) {
            definitionMap.set('schemas', new WrappedNodeExpr(meta.schemas));
        }
        if (meta.id !== undefined) {
            definitionMap.set('id', new WrappedNodeExpr(meta.id));
        }
        return importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()]);
    }
    function createNgModuleType(meta) {
        if (meta.kind === R3NgModuleMetadataKind.Local) {
            return new ExpressionType(meta.type.value);
        }
        const { type: moduleType, declarations, exports, imports, includeImportTypes, publicDeclarationTypes, } = meta;
        return new ExpressionType(importExpr(Identifiers.NgModuleDeclaration, [
            new ExpressionType(moduleType.type),
            publicDeclarationTypes === null
                ? tupleTypeOf(declarations)
                : tupleOfTypes(publicDeclarationTypes),
            includeImportTypes ? tupleTypeOf(imports) : NONE_TYPE,
            tupleTypeOf(exports),
        ]));
    }
    /**
     * Generates a function call to `ɵɵsetNgModuleScope` with all necessary information so that the
     * transitive module scope can be computed during runtime in JIT mode. This call is marked pure
     * such that the references to declarations, imports and exports may be elided causing these
     * symbols to become tree-shakeable.
     */
    function generateSetNgModuleScopeCall(meta) {
        const scopeMap = new DefinitionMap();
        if (meta.kind === R3NgModuleMetadataKind.Global) {
            if (meta.declarations.length > 0) {
                scopeMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));
            }
        }
        else {
            if (meta.declarationsExpression) {
                scopeMap.set('declarations', meta.declarationsExpression);
            }
        }
        if (meta.kind === R3NgModuleMetadataKind.Global) {
            if (meta.imports.length > 0) {
                scopeMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));
            }
        }
        else {
            if (meta.importsExpression) {
                scopeMap.set('imports', meta.importsExpression);
            }
        }
        if (meta.kind === R3NgModuleMetadataKind.Global) {
            if (meta.exports.length > 0) {
                scopeMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));
            }
        }
        else {
            if (meta.exportsExpression) {
                scopeMap.set('exports', meta.exportsExpression);
            }
        }
        if (meta.kind === R3NgModuleMetadataKind.Local && meta.bootstrapExpression) {
            scopeMap.set('bootstrap', meta.bootstrapExpression);
        }
        if (Object.keys(scopeMap.values).length === 0) {
            return null;
        }
        // setNgModuleScope(...)
        const fnCall = new InvokeFunctionExpr(
        /* fn */ importExpr(Identifiers.setNgModuleScope), 
        /* args */ [meta.type.value, scopeMap.toLiteralMap()]);
        // (ngJitMode guard) && setNgModuleScope(...)
        const guardedCall = jitOnlyGuardedExpression(fnCall);
        // function() { (ngJitMode guard) && setNgModuleScope(...); }
        const iife = new FunctionExpr(/* params */ [], /* statements */ [guardedCall.toStmt()]);
        // (function() { (ngJitMode guard) && setNgModuleScope(...); })()
        const iifeCall = new InvokeFunctionExpr(/* fn */ iife, /* args */ []);
        return iifeCall.toStmt();
    }
    function tupleTypeOf(exp) {
        const types = exp.map((ref) => typeofExpr(ref.type));
        return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;
    }
    function tupleOfTypes(types) {
        const typeofTypes = types.map((type) => typeofExpr(type));
        return types.length > 0 ? expressionType(literalArr(typeofTypes)) : NONE_TYPE;
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    function compilePipeFromMetadata(metadata) {
        const definitionMapValues = [];
        // e.g. `name: 'myPipe'`
        definitionMapValues.push({ key: 'name', value: literal$1(metadata.pipeName), quoted: false });
        // e.g. `type: MyPipe`
        definitionMapValues.push({ key: 'type', value: metadata.type.value, quoted: false });
        // e.g. `pure: true`
        definitionMapValues.push({ key: 'pure', value: literal$1(metadata.pure), quoted: false });
        if (metadata.isStandalone) {
            definitionMapValues.push({ key: 'standalone', value: literal$1(true), quoted: false });
        }
        const expression = importExpr(Identifiers.definePipe)
            .callFn([literalMap(definitionMapValues)], undefined, true);
        const type = createPipeType(metadata);
        return { expression, type, statements: [] };
    }
    function createPipeType(metadata) {
        return new ExpressionType(importExpr(Identifiers.PipeDeclaration, [
            typeWithParameters(metadata.type.type, metadata.typeArgumentCount),
            new ExpressionType(new LiteralExpr(metadata.pipeName)),
            new ExpressionType(new LiteralExpr(metadata.isStandalone)),
        ]));
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var R3TemplateDependencyKind;
    (function (R3TemplateDependencyKind) {
        R3TemplateDependencyKind[R3TemplateDependencyKind["Directive"] = 0] = "Directive";
        R3TemplateDependencyKind[R3TemplateDependencyKind["Pipe"] = 1] = "Pipe";
        R3TemplateDependencyKind[R3TemplateDependencyKind["NgModule"] = 2] = "NgModule";
    })(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * The following set contains all keywords that can be used in the animation css shorthand
     * property and is used during the scoping of keyframes to make sure such keywords
     * are not modified.
     */
    const animationKeywords = new Set([
        // global values
        'inherit',
        'initial',
        'revert',
        'unset',
        // animation-direction
        'alternate',
        'alternate-reverse',
        'normal',
        'reverse',
        // animation-fill-mode
        'backwards',
        'both',
        'forwards',
        'none',
        // animation-play-state
        'paused',
        'running',
        // animation-timing-function
        'ease',
        'ease-in',
        'ease-in-out',
        'ease-out',
        'linear',
        'step-start',
        'step-end',
        // `steps()` function
        'end',
        'jump-both',
        'jump-end',
        'jump-none',
        'jump-start',
        'start',
    ]);
    /**
     * The following array contains all of the CSS at-rule identifiers which are scoped.
     */
    const scopedAtRuleIdentifiers = [
        '@media',
        '@supports',
        '@document',
        '@layer',
        '@container',
        '@scope',
        '@starting-style',
    ];
    /**
     * The following class has its origin from a port of shadowCSS from webcomponents.js to TypeScript.
     * It has since diverge in many ways to tailor Angular's needs.
     *
     * Source:
     * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
     *
     * The original file level comment is reproduced below
     */
    /*
      This is a limited shim for ShadowDOM css styling.
      https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

      The intention here is to support only the styling features which can be
      relatively simply implemented. The goal is to allow users to avoid the
      most obvious pitfalls and do so without compromising performance significantly.
      For ShadowDOM styling that's not covered here, a set of best practices
      can be provided that should allow users to accomplish more complex styling.

      The following is a list of specific ShadowDOM styling features and a brief
      discussion of the approach used to shim.

      Shimmed features:

      * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
      element using the :host rule. To shim this feature, the :host styles are
      reformatted and prefixed with a given scope name and promoted to a
      document level stylesheet.
      For example, given a scope name of .foo, a rule like this:

        :host {
            background: red;
          }
        }

      becomes:

        .foo {
          background: red;
        }

      * encapsulation: Styles defined within ShadowDOM, apply only to
      dom inside the ShadowDOM.
      The selectors are scoped by adding an attribute selector suffix to each
      simple selector that contains the host element tag name. Each element
      in the element's ShadowDOM template is also given the scope attribute.
      Thus, these rules match only elements that have the scope attribute.
      For example, given a scope name of x-foo, a rule like this:

        div {
          font-weight: bold;
        }

      becomes:

        div[x-foo] {
          font-weight: bold;
        }

      Note that elements that are dynamically added to a scope must have the scope
      selector added to them manually.

      * upper/lower bound encapsulation: Styles which are defined outside a
      shadowRoot should not cross the ShadowDOM boundary and should not apply
      inside a shadowRoot.

      This styling behavior is not emulated. Some possible ways to do this that
      were rejected due to complexity and/or performance concerns include: (1) reset
      every possible property for every possible selector for a given scope name;
      (2) re-implement css in javascript.

      As an alternative, users should make sure to use selectors
      specific to the scope in which they are working.

      * ::distributed: This behavior is not emulated. It's often not necessary
      to style the contents of a specific insertion point and instead, descendants
      of the host element can be styled selectively. Users can also create an
      extra node around an insertion point and style that node's contents
      via descendent selectors. For example, with a shadowRoot like this:

        <style>
          ::content(div) {
            background: red;
          }
        </style>
        <content></content>

      could become:

        <style>
          / *@polyfill .content-container div * /
          ::content(div) {
            background: red;
          }
        </style>
        <div class="content-container">
          <content></content>
        </div>

      Note the use of @polyfill in the comment above a ShadowDOM specific style
      declaration. This is a directive to the styling shim to use the selector
      in comments in lieu of the next selector when running under polyfill.
    */
    class ShadowCss {
        constructor() {
            /**
             * Regular expression used to extrapolate the possible keyframes from an
             * animation declaration (with possibly multiple animation definitions)
             *
             * The regular expression can be divided in three parts
             *  - (^|\s+)
             *    simply captures how many (if any) leading whitespaces are present
             *  - (?:(?:(['"])((?:\\\\|\\\2|(?!\2).)+)\2)|(-?[A-Za-z][\w\-]*))
             *    captures two different possible keyframes, ones which are quoted or ones which are valid css
             * idents (custom properties excluded)
             *  - (?=[,\s;]|$)
             *    simply matches the end of the possible keyframe, valid endings are: a comma, a space, a
             * semicolon or the end of the string
             */
            this._animationDeclarationKeyframesRe = /(^|\s+)(?:(?:(['"])((?:\\\\|\\\2|(?!\2).)+)\2)|(-?[A-Za-z][\w\-]*))(?=[,\s]|$)/g;
        }
        /*
         * Shim some cssText with the given selector. Returns cssText that can be included in the document
         *
         * The selector is the attribute added to all elements inside the host,
         * The hostSelector is the attribute added to the host itself.
         */
        shimCssText(cssText, selector, hostSelector = '') {
            // **NOTE**: Do not strip comments as this will cause component sourcemaps to break
            // due to shift in lines.
            // Collect comments and replace them with a placeholder, this is done to avoid complicating
            // the rule parsing RegExp and keep it safer.
            const comments = [];
            cssText = cssText.replace(_commentRe, (m) => {
                if (m.match(_commentWithHashRe)) {
                    comments.push(m);
                }
                else {
                    // Replace non hash comments with empty lines.
                    // This is done so that we do not leak any sensitive data in comments.
                    const newLinesMatches = m.match(_newLinesRe);
                    comments.push((newLinesMatches?.join('') ?? '') + '\n');
                }
                return COMMENT_PLACEHOLDER;
            });
            cssText = this._insertDirectives(cssText);
            const scopedCssText = this._scopeCssText(cssText, selector, hostSelector);
            // Add back comments at the original position.
            let commentIdx = 0;
            return scopedCssText.replace(_commentWithHashPlaceHolderRe, () => comments[commentIdx++]);
        }
        _insertDirectives(cssText) {
            cssText = this._insertPolyfillDirectivesInCssText(cssText);
            return this._insertPolyfillRulesInCssText(cssText);
        }
        /**
         * Process styles to add scope to keyframes.
         *
         * Modify both the names of the keyframes defined in the component styles and also the css
         * animation rules using them.
         *
         * Animation rules using keyframes defined elsewhere are not modified to allow for globally
         * defined keyframes.
         *
         * For example, we convert this css:
         *
         * ```
         * .box {
         *   animation: box-animation 1s forwards;
         * }
         *
         * @keyframes box-animation {
         *   to {
         *     background-color: green;
         *   }
         * }
         * ```
         *
         * to this:
         *
         * ```
         * .box {
         *   animation: scopeName_box-animation 1s forwards;
         * }
         *
         * @keyframes scopeName_box-animation {
         *   to {
         *     background-color: green;
         *   }
         * }
         * ```
         *
         * @param cssText the component's css text that needs to be scoped.
         * @param scopeSelector the component's scope selector.
         *
         * @returns the scoped css text.
         */
        _scopeKeyframesRelatedCss(cssText, scopeSelector) {
            const unscopedKeyframesSet = new Set();
            const scopedKeyframesCssText = processRules(cssText, (rule) => this._scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet));
            return processRules(scopedKeyframesCssText, (rule) => this._scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet));
        }
        /**
         * Scopes local keyframes names, returning the updated css rule and it also
         * adds the original keyframe name to a provided set to collect all keyframes names
         * so that it can later be used to scope the animation rules.
         *
         * For example, it takes a rule such as:
         *
         * ```
         * @keyframes box-animation {
         *   to {
         *     background-color: green;
         *   }
         * }
         * ```
         *
         * and returns:
         *
         * ```
         * @keyframes scopeName_box-animation {
         *   to {
         *     background-color: green;
         *   }
         * }
         * ```
         * and as a side effect it adds "box-animation" to the `unscopedKeyframesSet` set
         *
         * @param cssRule the css rule to process.
         * @param scopeSelector the component's scope selector.
         * @param unscopedKeyframesSet the set of unscoped keyframes names (which can be
         * modified as a side effect)
         *
         * @returns the css rule modified with the scoped keyframes name.
         */
        _scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet) {
            return {
                ...rule,
                selector: rule.selector.replace(/(^@(?:-webkit-)?keyframes(?:\s+))(['"]?)(.+)\2(\s*)$/, (_, start, quote, keyframeName, endSpaces) => {
                    unscopedKeyframesSet.add(unescapeQuotes(keyframeName, quote));
                    return `${start}${quote}${scopeSelector}_${keyframeName}${quote}${endSpaces}`;
                }),
            };
        }
        /**
         * Function used to scope a keyframes name (obtained from an animation declaration)
         * using an existing set of unscopedKeyframes names to discern if the scoping needs to be
         * performed (keyframes names of keyframes not defined in the component's css need not to be
         * scoped).
         *
         * @param keyframe the keyframes name to check.
         * @param scopeSelector the component's scope selector.
         * @param unscopedKeyframesSet the set of unscoped keyframes names.
         *
         * @returns the scoped name of the keyframe, or the original name is the name need not to be
         * scoped.
         */
        _scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet) {
            return keyframe.replace(/^(\s*)(['"]?)(.+?)\2(\s*)$/, (_, spaces1, quote, name, spaces2) => {
                name = `${unscopedKeyframesSet.has(unescapeQuotes(name, quote)) ? scopeSelector + '_' : ''}${name}`;
                return `${spaces1}${quote}${name}${quote}${spaces2}`;
            });
        }
        /**
         * Scope an animation rule so that the keyframes mentioned in such rule
         * are scoped if defined in the component's css and left untouched otherwise.
         *
         * It can scope values of both the 'animation' and 'animation-name' properties.
         *
         * @param rule css rule to scope.
         * @param scopeSelector the component's scope selector.
         * @param unscopedKeyframesSet the set of unscoped keyframes names.
         *
         * @returns the updated css rule.
         **/
        _scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet) {
            let content = rule.content.replace(/((?:^|\s+|;)(?:-webkit-)?animation(?:\s*):(?:\s*))([^;]+)/g, (_, start, animationDeclarations) => start +
                animationDeclarations.replace(this._animationDeclarationKeyframesRe, (original, leadingSpaces, quote = '', quotedName, nonQuotedName) => {
                    if (quotedName) {
                        return `${leadingSpaces}${this._scopeAnimationKeyframe(`${quote}${quotedName}${quote}`, scopeSelector, unscopedKeyframesSet)}`;
                    }
                    else {
                        return animationKeywords.has(nonQuotedName)
                            ? original
                            : `${leadingSpaces}${this._scopeAnimationKeyframe(nonQuotedName, scopeSelector, unscopedKeyframesSet)}`;
                    }
                }));
            content = content.replace(/((?:^|\s+|;)(?:-webkit-)?animation-name(?:\s*):(?:\s*))([^;]+)/g, (_match, start, commaSeparatedKeyframes) => `${start}${commaSeparatedKeyframes
            .split(',')
            .map((keyframe) => this._scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet))
            .join(',')}`);
            return { ...rule, content };
        }
        /*
         * Process styles to convert native ShadowDOM rules that will trip
         * up the css parser; we rely on decorating the stylesheet with inert rules.
         *
         * For example, we convert this rule:
         *
         * polyfill-next-selector { content: ':host menu-item'; }
         * ::content menu-item {
         *
         * to this:
         *
         * scopeName menu-item {
         *
         **/
        _insertPolyfillDirectivesInCssText(cssText) {
            return cssText.replace(_cssContentNextSelectorRe, function (...m) {
                return m[2] + '{';
            });
        }
        /*
         * Process styles to add rules which will only apply under the polyfill
         *
         * For example, we convert this rule:
         *
         * polyfill-rule {
         *   content: ':host menu-item';
         * ...
         * }
         *
         * to this:
         *
         * scopeName menu-item {...}
         *
         **/
        _insertPolyfillRulesInCssText(cssText) {
            return cssText.replace(_cssContentRuleRe, (...m) => {
                const rule = m[0].replace(m[1], '').replace(m[2], '');
                return m[4] + rule;
            });
        }
        /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
         *
         *  .foo {... }
         *
         *  and converts this to
         *
         *  scopeName .foo { ... }
         */
        _scopeCssText(cssText, scopeSelector, hostSelector) {
            const unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
            // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
            cssText = this._insertPolyfillHostInCssText(cssText);
            cssText = this._convertColonHost(cssText);
            cssText = this._convertColonHostContext(cssText);
            cssText = this._convertShadowDOMSelectors(cssText);
            if (scopeSelector) {
                cssText = this._scopeKeyframesRelatedCss(cssText, scopeSelector);
                cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
            }
            cssText = cssText + '\n' + unscopedRules;
            return cssText.trim();
        }
        /*
         * Process styles to add rules which will only apply under the polyfill
         * and do not process via CSSOM. (CSSOM is destructive to rules on rare
         * occasions, e.g. -webkit-calc on Safari.)
         * For example, we convert this rule:
         *
         * @polyfill-unscoped-rule {
         *   content: 'menu-item';
         * ... }
         *
         * to this:
         *
         * menu-item {...}
         *
         **/
        _extractUnscopedRulesFromCssText(cssText) {
            let r = '';
            let m;
            _cssContentUnscopedRuleRe.lastIndex = 0;
            while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
                const rule = m[0].replace(m[2], '').replace(m[1], m[4]);
                r += rule + '\n\n';
            }
            return r;
        }
        /*
         * convert a rule like :host(.foo) > .bar { }
         *
         * to
         *
         * .foo<scopeName> > .bar
         */
        _convertColonHost(cssText) {
            return cssText.replace(_cssColonHostRe, (_, hostSelectors, otherSelectors) => {
                if (hostSelectors) {
                    const convertedSelectors = [];
                    const hostSelectorArray = hostSelectors.split(',').map((p) => p.trim());
                    for (const hostSelector of hostSelectorArray) {
                        if (!hostSelector)
                            break;
                        const convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, '') + otherSelectors;
                        convertedSelectors.push(convertedSelector);
                    }
                    return convertedSelectors.join(',');
                }
                else {
                    return _polyfillHostNoCombinator + otherSelectors;
                }
            });
        }
        /*
         * convert a rule like :host-context(.foo) > .bar { }
         *
         * to
         *
         * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }
         *
         * and
         *
         * :host-context(.foo:host) .bar { ... }
         *
         * to
         *
         * .foo<scopeName> .bar { ... }
         */
        _convertColonHostContext(cssText) {
            return cssText.replace(_cssColonHostContextReGlobal, (selectorText) => {
                // We have captured a selector that contains a `:host-context` rule.
                // For backward compatibility `:host-context` may contain a comma separated list of selectors.
                // Each context selector group will contain a list of host-context selectors that must match
                // an ancestor of the host.
                // (Normally `contextSelectorGroups` will only contain a single array of context selectors.)
                const contextSelectorGroups = [[]];
                // There may be more than `:host-context` in this selector so `selectorText` could look like:
                // `:host-context(.one):host-context(.two)`.
                // Execute `_cssColonHostContextRe` over and over until we have extracted all the
                // `:host-context` selectors from this selector.
                let match;
                while ((match = _cssColonHostContextRe.exec(selectorText))) {
                    // `match` = [':host-context(<selectors>)<rest>', <selectors>, <rest>]
                    // The `<selectors>` could actually be a comma separated list: `:host-context(.one, .two)`.
                    const newContextSelectors = (match[1] ?? '')
                        .trim()
                        .split(',')
                        .map((m) => m.trim())
                        .filter((m) => m !== '');
                    // We must duplicate the current selector group for each of these new selectors.
                    // For example if the current groups are:
                    // ```
                    // [
                    //   ['a', 'b', 'c'],
                    //   ['x', 'y', 'z'],
                    // ]
                    // ```
                    // And we have a new set of comma separated selectors: `:host-context(m,n)` then the new
                    // groups are:
                    // ```
                    // [
                    //   ['a', 'b', 'c', 'm'],
                    //   ['x', 'y', 'z', 'm'],
                    //   ['a', 'b', 'c', 'n'],
                    //   ['x', 'y', 'z', 'n'],
                    // ]
                    // ```
                    const contextSelectorGroupsLength = contextSelectorGroups.length;
                    repeatGroups(contextSelectorGroups, newContextSelectors.length);
                    for (let i = 0; i < newContextSelectors.length; i++) {
                        for (let j = 0; j < contextSelectorGroupsLength; j++) {
                            contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);
                        }
                    }
                    // Update the `selectorText` and see repeat to see if there are more `:host-context`s.
                    selectorText = match[2];
                }
                // The context selectors now must be combined with each other to capture all the possible
                // selectors that `:host-context` can match. See `combineHostContextSelectors()` for more
                // info about how this is done.
                return contextSelectorGroups
                    .map((contextSelectors) => combineHostContextSelectors(contextSelectors, selectorText))
                    .join(', ');
            });
        }
        /*
         * Convert combinators like ::shadow and pseudo-elements like ::content
         * by replacing with space.
         */
        _convertShadowDOMSelectors(cssText) {
            return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);
        }
        // change a selector like 'div' to 'name div'
        _scopeSelectors(cssText, scopeSelector, hostSelector) {
            return processRules(cssText, (rule) => {
                let selector = rule.selector;
                let content = rule.content;
                if (rule.selector[0] !== '@') {
                    selector = this._scopeSelector(rule.selector, scopeSelector, hostSelector);
                }
                else if (scopedAtRuleIdentifiers.some((atRule) => rule.selector.startsWith(atRule))) {
                    content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);
                }
                else if (rule.selector.startsWith('@font-face') || rule.selector.startsWith('@page')) {
                    content = this._stripScopingSelectors(rule.content);
                }
                return new CssRule(selector, content);
            });
        }
        /**
         * Handle a css text that is within a rule that should not contain scope selectors by simply
         * removing them! An example of such a rule is `@font-face`.
         *
         * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.
         * Normally this would be a syntax error by the author of the styles. But in some rare cases, such
         * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we
         * can end up with broken css if the imported styles happen to contain @font-face rules.
         *
         * For example:
         *
         * ```
         * :host ::ng-deep {
         *   import 'some/lib/containing/font-face';
         * }
         *
         * Similar logic applies to `@page` rules which can contain a particular set of properties,
         * as well as some specific at-rules. Since they can't be encapsulated, we have to strip
         * any scoping selectors from them. For more information: https://www.w3.org/TR/css-page-3
         * ```
         */
        _stripScopingSelectors(cssText) {
            return processRules(cssText, (rule) => {
                const selector = rule.selector
                    .replace(_shadowDeepSelectors, ' ')
                    .replace(_polyfillHostNoCombinatorRe, ' ');
                return new CssRule(selector, rule.content);
            });
        }
        _scopeSelector(selector, scopeSelector, hostSelector) {
            return selector
                .split(/ ?, ?/)
                .map((part) => part.split(_shadowDeepSelectors))
                .map((deepParts) => {
                const [shallowPart, ...otherParts] = deepParts;
                const applyScope = (shallowPart) => {
                    if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {
                        return this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
                    }
                    else {
                        return shallowPart;
                    }
                };
                return [applyScope(shallowPart), ...otherParts].join(' ');
            })
                .join(', ');
        }
        _selectorNeedsScoping(selector, scopeSelector) {
            const re = this._makeScopeMatcher(scopeSelector);
            return !re.test(selector);
        }
        _makeScopeMatcher(scopeSelector) {
            const lre = /\[/g;
            const rre = /\]/g;
            scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
            return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
        }
        // scope via name and [is=name]
        _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {
            // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
            _polyfillHostRe.lastIndex = 0;
            if (_polyfillHostRe.test(selector)) {
                const replaceBy = `[${hostSelector}]`;
                return selector
                    .replace(_polyfillHostNoCombinatorRe, (hnc, selector) => {
                    return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {
                        return before + replaceBy + colon + after;
                    });
                })
                    .replace(_polyfillHostRe, replaceBy + ' ');
            }
            return scopeSelector + ' ' + selector;
        }
        // return a selector with [name] suffix on each simple selector
        // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
        _applySelectorScope(selector, scopeSelector, hostSelector) {
            const isRe = /\[is=([^\]]*)\]/g;
            scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);
            const attrName = '[' + scopeSelector + ']';
            const _scopeSelectorPart = (p) => {
                let scopedP = p.trim();
                if (!scopedP) {
                    return p;
                }
                if (p.includes(_polyfillHostNoCombinator)) {
                    scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
                }
                else {
                    // remove :host since it should be unnecessary
                    const t = p.replace(_polyfillHostRe, '');
                    if (t.length > 0) {
                        const matches = t.match(/([^:]*)(:*)(.*)/);
                        if (matches) {
                            scopedP = matches[1] + attrName + matches[2] + matches[3];
                        }
                    }
                }
                return scopedP;
            };
            const safeContent = new SafeSelector(selector);
            selector = safeContent.content();
            let scopedSelector = '';
            let startIndex = 0;
            let res;
            const sep = /( |>|\+|~(?!=))\s*/g;
            // If a selector appears before :host it should not be shimmed as it
            // matches on ancestor elements and not on elements in the host's shadow
            // `:host-context(div)` is transformed to
            // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`
            // the `div` is not part of the component in the 2nd selectors and should not be scoped.
            // Historically `component-tag:host` was matching the component so we also want to preserve
            // this behavior to avoid breaking legacy apps (it should not match).
            // The behavior should be:
            // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)
            // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a
            //   `:host-context(tag)`)
            const hasHost = selector.includes(_polyfillHostNoCombinator);
            // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present
            let shouldScope = !hasHost;
            while ((res = sep.exec(selector)) !== null) {
                const separator = res[1];
                // Do not trim the selector, as otherwise this will break sourcemaps
                // when they are defined on multiple lines
                // Example:
                //  div,
                //  p { color: red}
                const part = selector.slice(startIndex, res.index);
                // A space following an escaped hex value and followed by another hex character
                // (ie: ".\fc ber" for ".über") is not a separator between 2 selectors
                // also keep in mind that backslashes are replaced by a placeholder by SafeSelector
                // These escaped selectors happen for example when esbuild runs with optimization.minify.
                if (part.match(/__esc-ph-(\d+)__/) && selector[res.index + 1]?.match(/[a-fA-F\d]/)) {
                    continue;
                }
                shouldScope = shouldScope || part.includes(_polyfillHostNoCombinator);
                const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;
                scopedSelector += `${scopedPart} ${separator} `;
                startIndex = sep.lastIndex;
            }
            const part = selector.substring(startIndex);
            shouldScope = shouldScope || part.includes(_polyfillHostNoCombinator);
            scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;
            // replace the placeholders with their original values
            return safeContent.restore(scopedSelector);
        }
        _insertPolyfillHostInCssText(selector) {
            return selector
                .replace(_colonHostContextRe, _polyfillHostContext)
                .replace(_colonHostRe, _polyfillHost);
        }
    }
    class SafeSelector {
        constructor(selector) {
            this.placeholders = [];
            this.index = 0;
            // Replaces attribute selectors with placeholders.
            // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
            selector = this._escapeRegexMatches(selector, /(\[[^\]]*\])/g);
            // CSS allows for certain special characters to be used in selectors if they're escaped.
            // E.g. `.foo:blue` won't match a class called `foo:blue`, because the colon denotes a
            // pseudo-class, but writing `.foo\:blue` will match, because the colon was escaped.
            // Replace all escape sequences (`\` followed by a character) with a placeholder so
            // that our handling of pseudo-selectors doesn't mess with them.
            // Escaped characters have a specific placeholder so they can be detected separately.
            selector = selector.replace(/(\\.)/g, (_, keep) => {
                const replaceBy = `__esc-ph-${this.index}__`;
                this.placeholders.push(keep);
                this.index++;
                return replaceBy;
            });
            // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
            // WS and "+" would otherwise be interpreted as selector separators.
            this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, (_, pseudo, exp) => {
                const replaceBy = `__ph-${this.index}__`;
                this.placeholders.push(exp);
                this.index++;
                return pseudo + replaceBy;
            });
        }
        restore(content) {
            return content.replace(/__(?:ph|esc-ph)-(\d+)__/g, (_ph, index) => this.placeholders[+index]);
        }
        content() {
            return this._content;
        }
        /**
         * Replaces all of the substrings that match a regex within a
         * special string (e.g. `__ph-0__`, `__ph-1__`, etc).
         */
        _escapeRegexMatches(content, pattern) {
            return content.replace(pattern, (_, keep) => {
                const replaceBy = `__ph-${this.index}__`;
                this.placeholders.push(keep);
                this.index++;
                return replaceBy;
            });
        }
    }
    const _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
    const _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
    const _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
    const _polyfillHost = '-shadowcsshost';
    // note: :host-context pre-processed to -shadowcsshostcontext.
    const _polyfillHostContext = '-shadowcsscontext';
    const _parenSuffix = '(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
    const _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix, 'gim');
    const _cssColonHostContextReGlobal = new RegExp(_polyfillHostContext + _parenSuffix, 'gim');
    const _cssColonHostContextRe = new RegExp(_polyfillHostContext + _parenSuffix, 'im');
    const _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
    const _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
    const _shadowDOMSelectorsRe = [
        /::shadow/g,
        /::content/g,
        // Deprecated selectors
        /\/shadow-deep\//g,
        /\/shadow\//g,
    ];
    // The deep combinator is deprecated in the CSS spec
    // Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.
    // see https://github.com/angular/angular/pull/17677
    const _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)|(?:::ng-deep)/g;
    const _selectorReSuffix = '([>\\s~+[.,{:][\\s\\S]*)?$';
    const _polyfillHostRe = /-shadowcsshost/gim;
    const _colonHostRe = /:host/gim;
    const _colonHostContextRe = /:host-context/gim;
    const _newLinesRe = /\r?\n/g;
    const _commentRe = /\/\*[\s\S]*?\*\//g;
    const _commentWithHashRe = /\/\*\s*#\s*source(Mapping)?URL=/g;
    const COMMENT_PLACEHOLDER = '%COMMENT%';
    const _commentWithHashPlaceHolderRe = new RegExp(COMMENT_PLACEHOLDER, 'g');
    const BLOCK_PLACEHOLDER = '%BLOCK%';
    const _ruleRe = new RegExp(`(\\s*(?:${COMMENT_PLACEHOLDER}\\s*)*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))`, 'g');
    const CONTENT_PAIRS = new Map([['{', '}']]);
    const COMMA_IN_PLACEHOLDER = '%COMMA_IN_PLACEHOLDER%';
    const SEMI_IN_PLACEHOLDER = '%SEMI_IN_PLACEHOLDER%';
    const COLON_IN_PLACEHOLDER = '%COLON_IN_PLACEHOLDER%';
    const _cssCommaInPlaceholderReGlobal = new RegExp(COMMA_IN_PLACEHOLDER, 'g');
    const _cssSemiInPlaceholderReGlobal = new RegExp(SEMI_IN_PLACEHOLDER, 'g');
    const _cssColonInPlaceholderReGlobal = new RegExp(COLON_IN_PLACEHOLDER, 'g');
    class CssRule {
        constructor(selector, content) {
            this.selector = selector;
            this.content = content;
        }
    }
    function processRules(input, ruleCallback) {
        const escaped = escapeInStrings(input);
        const inputWithEscapedBlocks = escapeBlocks(escaped, CONTENT_PAIRS, BLOCK_PLACEHOLDER);
        let nextBlockIndex = 0;
        const escapedResult = inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {
            const selector = m[2];
            let content = '';
            let suffix = m[4];
            let contentPrefix = '';
            if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
                content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
                suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
                contentPrefix = '{';
            }
            const rule = ruleCallback(new CssRule(selector, content));
            return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;
        });
        return unescapeInStrings(escapedResult);
    }
    class StringWithEscapedBlocks {
        constructor(escapedString, blocks) {
            this.escapedString = escapedString;
            this.blocks = blocks;
        }
    }
    function escapeBlocks(input, charPairs, placeholder) {
        const resultParts = [];
        const escapedBlocks = [];
        let openCharCount = 0;
        let nonBlockStartIndex = 0;
        let blockStartIndex = -1;
        let openChar;
        let closeChar;
        for (let i = 0; i < input.length; i++) {
            const char = input[i];
            if (char === '\\') {
                i++;
            }
            else if (char === closeChar) {
                openCharCount--;
                if (openCharCount === 0) {
                    escapedBlocks.push(input.substring(blockStartIndex, i));
                    resultParts.push(placeholder);
                    nonBlockStartIndex = i;
                    blockStartIndex = -1;
                    openChar = closeChar = undefined;
                }
            }
            else if (char === openChar) {
                openCharCount++;
            }
            else if (openCharCount === 0 && charPairs.has(char)) {
                openChar = char;
                closeChar = charPairs.get(char);
                openCharCount = 1;
                blockStartIndex = i + 1;
                resultParts.push(input.substring(nonBlockStartIndex, blockStartIndex));
            }
        }
        if (blockStartIndex !== -1) {
            escapedBlocks.push(input.substring(blockStartIndex));
            resultParts.push(placeholder);
        }
        else {
            resultParts.push(input.substring(nonBlockStartIndex));
        }
        return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
    }
    /**
     * Object containing as keys characters that should be substituted by placeholders
     * when found in strings during the css text parsing, and as values the respective
     * placeholders
     */
    const ESCAPE_IN_STRING_MAP = {
        ';': SEMI_IN_PLACEHOLDER,
        ',': COMMA_IN_PLACEHOLDER,
        ':': COLON_IN_PLACEHOLDER,
    };
    /**
     * Parse the provided css text and inside strings (meaning, inside pairs of unescaped single or
     * double quotes) replace specific characters with their respective placeholders as indicated
     * by the `ESCAPE_IN_STRING_MAP` map.
     *
     * For example convert the text
     *  `animation: "my-anim:at\"ion" 1s;`
     * to
     *  `animation: "my-anim%COLON_IN_PLACEHOLDER%at\"ion" 1s;`
     *
     * This is necessary in order to remove the meaning of some characters when found inside strings
     * (for example `;` indicates the end of a css declaration, `,` the sequence of values and `:` the
     * division between property and value during a declaration, none of these meanings apply when such
     * characters are within strings and so in order to prevent parsing issues they need to be replaced
     * with placeholder text for the duration of the css manipulation process).
     *
     * @param input the original css text.
     *
     * @returns the css text with specific characters in strings replaced by placeholders.
     **/
    function escapeInStrings(input) {
        let result = input;
        let currentQuoteChar = null;
        for (let i = 0; i < result.length; i++) {
            const char = result[i];
            if (char === '\\') {
                i++;
            }
            else {
                if (currentQuoteChar !== null) {
                    // index i is inside a quoted sub-string
                    if (char === currentQuoteChar) {
                        currentQuoteChar = null;
                    }
                    else {
                        const placeholder = ESCAPE_IN_STRING_MAP[char];
                        if (placeholder) {
                            result = `${result.substr(0, i)}${placeholder}${result.substr(i + 1)}`;
                            i += placeholder.length - 1;
                        }
                    }
                }
                else if (char === "'" || char === '"') {
                    currentQuoteChar = char;
                }
            }
        }
        return result;
    }
    /**
     * Replace in a string all occurrences of keys in the `ESCAPE_IN_STRING_MAP` map with their
     * original representation, this is simply used to revert the changes applied by the
     * escapeInStrings function.
     *
     * For example it reverts the text:
     *  `animation: "my-anim%COLON_IN_PLACEHOLDER%at\"ion" 1s;`
     * to it's original form of:
     *  `animation: "my-anim:at\"ion" 1s;`
     *
     * Note: For the sake of simplicity this function does not check that the placeholders are
     * actually inside strings as it would anyway be extremely unlikely to find them outside of strings.
     *
     * @param input the css text containing the placeholders.
     *
     * @returns the css text without the placeholders.
     */
    function unescapeInStrings(input) {
        let result = input.replace(_cssCommaInPlaceholderReGlobal, ',');
        result = result.replace(_cssSemiInPlaceholderReGlobal, ';');
        result = result.replace(_cssColonInPlaceholderReGlobal, ':');
        return result;
    }
    /**
     * Unescape all quotes present in a string, but only if the string was actually already
     * quoted.
     *
     * This generates a "canonical" representation of strings which can be used to match strings
     * which would otherwise only differ because of differently escaped quotes.
     *
     * For example it converts the string (assumed to be quoted):
     *  `this \\"is\\" a \\'\\\\'test`
     * to:
     *  `this "is" a '\\\\'test`
     * (note that the latter backslashes are not removed as they are not actually escaping the single
     * quote)
     *
     *
     * @param input the string possibly containing escaped quotes.
     * @param isQuoted boolean indicating whether the string was quoted inside a bigger string (if not
     * then it means that it doesn't represent an inner string and thus no unescaping is required)
     *
     * @returns the string in the "canonical" representation without escaped quotes.
     */
    function unescapeQuotes(str, isQuoted) {
        return !isQuoted ? str : str.replace(/((?:^|[^\\])(?:\\\\)*)\\(?=['"])/g, '$1');
    }
    /**
     * Combine the `contextSelectors` with the `hostMarker` and the `otherSelectors`
     * to create a selector that matches the same as `:host-context()`.
     *
     * Given a single context selector `A` we need to output selectors that match on the host and as an
     * ancestor of the host:
     *
     * ```
     * A <hostMarker>, A<hostMarker> {}
     * ```
     *
     * When there is more than one context selector we also have to create combinations of those
     * selectors with each other. For example if there are `A` and `B` selectors the output is:
     *
     * ```
     * AB<hostMarker>, AB <hostMarker>, A B<hostMarker>,
     * B A<hostMarker>, A B <hostMarker>, B A <hostMarker> {}
     * ```
     *
     * And so on...
     *
     * @param contextSelectors an array of context selectors that will be combined.
     * @param otherSelectors the rest of the selectors that are not context selectors.
     */
    function combineHostContextSelectors(contextSelectors, otherSelectors) {
        const hostMarker = _polyfillHostNoCombinator;
        _polyfillHostRe.lastIndex = 0; // reset the regex to ensure we get an accurate test
        const otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors);
        // If there are no context selectors then just output a host marker
        if (contextSelectors.length === 0) {
            return hostMarker + otherSelectors;
        }
        const combined = [contextSelectors.pop() || ''];
        while (contextSelectors.length > 0) {
            const length = combined.length;
            const contextSelector = contextSelectors.pop();
            for (let i = 0; i < length; i++) {
                const previousSelectors = combined[i];
                // Add the new selector as a descendant of the previous selectors
                combined[length * 2 + i] = previousSelectors + ' ' + contextSelector;
                // Add the new selector as an ancestor of the previous selectors
                combined[length + i] = contextSelector + ' ' + previousSelectors;
                // Add the new selector to act on the same element as the previous selectors
                combined[i] = contextSelector + previousSelectors;
            }
        }
        // Finally connect the selector to the `hostMarker`s: either acting directly on the host
        // (A<hostMarker>) or as an ancestor (A <hostMarker>).
        return combined
            .map((s) => otherSelectorsHasHost
            ? `${s}${otherSelectors}`
            : `${s}${hostMarker}${otherSelectors}, ${s} ${hostMarker}${otherSelectors}`)
            .join(',');
    }
    /**
     * Mutate the given `groups` array so that there are `multiples` clones of the original array
     * stored.
     *
     * For example `repeatGroups([a, b], 3)` will result in `[a, b, a, b, a, b]` - but importantly the
     * newly added groups will be clones of the original.
     *
     * @param groups An array of groups of strings that will be repeated. This array is mutated
     *     in-place.
     * @param multiples The number of times the current groups should appear.
     */
    function repeatGroups(groups, multiples) {
        const length = groups.length;
        for (let i = 1; i < multiples; i++) {
            for (let j = 0; j < length; j++) {
                groups[j + i * length] = groups[j].slice(0);
            }
        }
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Distinguishes different kinds of IR operations.
     *
     * Includes both creation and update operations.
     */
    var OpKind;
    (function (OpKind) {
        /**
         * A special operation type which is used to represent the beginning and end nodes of a linked
         * list of operations.
         */
        OpKind[OpKind["ListEnd"] = 0] = "ListEnd";
        /**
         * An operation which wraps an output AST statement.
         */
        OpKind[OpKind["Statement"] = 1] = "Statement";
        /**
         * An operation which declares and initializes a `SemanticVariable`.
         */
        OpKind[OpKind["Variable"] = 2] = "Variable";
        /**
         * An operation to begin rendering of an element.
         */
        OpKind[OpKind["ElementStart"] = 3] = "ElementStart";
        /**
         * An operation to render an element with no children.
         */
        OpKind[OpKind["Element"] = 4] = "Element";
        /**
         * An operation which declares an embedded view.
         */
        OpKind[OpKind["Template"] = 5] = "Template";
        /**
         * An operation to end rendering of an element previously started with `ElementStart`.
         */
        OpKind[OpKind["ElementEnd"] = 6] = "ElementEnd";
        /**
         * An operation to begin an `ng-container`.
         */
        OpKind[OpKind["ContainerStart"] = 7] = "ContainerStart";
        /**
         * An operation for an `ng-container` with no children.
         */
        OpKind[OpKind["Container"] = 8] = "Container";
        /**
         * An operation to end an `ng-container`.
         */
        OpKind[OpKind["ContainerEnd"] = 9] = "ContainerEnd";
        /**
         * An operation disable binding for subsequent elements, which are descendants of a non-bindable
         * node.
         */
        OpKind[OpKind["DisableBindings"] = 10] = "DisableBindings";
        /**
         * An op to conditionally render a template.
         */
        OpKind[OpKind["Conditional"] = 11] = "Conditional";
        /**
         * An operation to re-enable binding, after it was previously disabled.
         */
        OpKind[OpKind["EnableBindings"] = 12] = "EnableBindings";
        /**
         * An operation to render a text node.
         */
        OpKind[OpKind["Text"] = 13] = "Text";
        /**
         * An operation declaring an event listener for an element.
         */
        OpKind[OpKind["Listener"] = 14] = "Listener";
        /**
         * An operation to interpolate text into a text node.
         */
        OpKind[OpKind["InterpolateText"] = 15] = "InterpolateText";
        /**
         * An intermediate binding op, that has not yet been processed into an individual property,
         * attribute, style, etc.
         */
        OpKind[OpKind["Binding"] = 16] = "Binding";
        /**
         * An operation to bind an expression to a property of an element.
         */
        OpKind[OpKind["Property"] = 17] = "Property";
        /**
         * An operation to bind an expression to a style property of an element.
         */
        OpKind[OpKind["StyleProp"] = 18] = "StyleProp";
        /**
         * An operation to bind an expression to a class property of an element.
         */
        OpKind[OpKind["ClassProp"] = 19] = "ClassProp";
        /**
         * An operation to bind an expression to the styles of an element.
         */
        OpKind[OpKind["StyleMap"] = 20] = "StyleMap";
        /**
         * An operation to bind an expression to the classes of an element.
         */
        OpKind[OpKind["ClassMap"] = 21] = "ClassMap";
        /**
         * An operation to advance the runtime's implicit slot context during the update phase of a view.
         */
        OpKind[OpKind["Advance"] = 22] = "Advance";
        /**
         * An operation to instantiate a pipe.
         */
        OpKind[OpKind["Pipe"] = 23] = "Pipe";
        /**
         * An operation to associate an attribute with an element.
         */
        OpKind[OpKind["Attribute"] = 24] = "Attribute";
        /**
         * An attribute that has been extracted for inclusion in the consts array.
         */
        OpKind[OpKind["ExtractedAttribute"] = 25] = "ExtractedAttribute";
        /**
         * An operation that configures a `@defer` block.
         */
        OpKind[OpKind["Defer"] = 26] = "Defer";
        /**
         * An operation that controls when a `@defer` loads.
         */
        OpKind[OpKind["DeferOn"] = 27] = "DeferOn";
        /**
         * An operation that controls when a `@defer` loads, using a custom expression as the condition.
         */
        OpKind[OpKind["DeferWhen"] = 28] = "DeferWhen";
        /**
         * An i18n message that has been extracted for inclusion in the consts array.
         */
        OpKind[OpKind["I18nMessage"] = 29] = "I18nMessage";
        /**
         * A host binding property.
         */
        OpKind[OpKind["HostProperty"] = 30] = "HostProperty";
        /**
         * A namespace change, which causes the subsequent elements to be processed as either HTML or SVG.
         */
        OpKind[OpKind["Namespace"] = 31] = "Namespace";
        /**
         * Configure a content projeciton definition for the view.
         */
        OpKind[OpKind["ProjectionDef"] = 32] = "ProjectionDef";
        /**
         * Create a content projection slot.
         */
        OpKind[OpKind["Projection"] = 33] = "Projection";
        /**
         * Create a repeater creation instruction op.
         */
        OpKind[OpKind["RepeaterCreate"] = 34] = "RepeaterCreate";
        /**
         * An update up for a repeater.
         */
        OpKind[OpKind["Repeater"] = 35] = "Repeater";
        /**
         * An operation to bind an expression to the property side of a two-way binding.
         */
        OpKind[OpKind["TwoWayProperty"] = 36] = "TwoWayProperty";
        /**
         * An operation declaring the event side of a two-way binding.
         */
        OpKind[OpKind["TwoWayListener"] = 37] = "TwoWayListener";
        /**
         * The start of an i18n block.
         */
        OpKind[OpKind["I18nStart"] = 38] = "I18nStart";
        /**
         * A self-closing i18n on a single element.
         */
        OpKind[OpKind["I18n"] = 39] = "I18n";
        /**
         * The end of an i18n block.
         */
        OpKind[OpKind["I18nEnd"] = 40] = "I18nEnd";
        /**
         * An expression in an i18n message.
         */
        OpKind[OpKind["I18nExpression"] = 41] = "I18nExpression";
        /**
         * An instruction that applies a set of i18n expressions.
         */
        OpKind[OpKind["I18nApply"] = 42] = "I18nApply";
        /**
         * An instruction to create an ICU expression.
         */
        OpKind[OpKind["IcuStart"] = 43] = "IcuStart";
        /**
         * An instruction to update an ICU expression.
         */
        OpKind[OpKind["IcuEnd"] = 44] = "IcuEnd";
        /**
         * An instruction representing a placeholder in an ICU expression.
         */
        OpKind[OpKind["IcuPlaceholder"] = 45] = "IcuPlaceholder";
        /**
         * An i18n context containing information needed to generate an i18n message.
         */
        OpKind[OpKind["I18nContext"] = 46] = "I18nContext";
        /**
         * A creation op that corresponds to i18n attributes on an element.
         */
        OpKind[OpKind["I18nAttributes"] = 47] = "I18nAttributes";
    })(OpKind || (OpKind = {}));
    /**
     * Distinguishes different kinds of IR expressions.
     */
    var ExpressionKind;
    (function (ExpressionKind) {
        /**
         * Read of a variable in a lexical scope.
         */
        ExpressionKind[ExpressionKind["LexicalRead"] = 0] = "LexicalRead";
        /**
         * A reference to the current view context.
         */
        ExpressionKind[ExpressionKind["Context"] = 1] = "Context";
        /**
         * A reference to the view context, for use inside a track function.
         */
        ExpressionKind[ExpressionKind["TrackContext"] = 2] = "TrackContext";
        /**
         * Read of a variable declared in a `VariableOp`.
         */
        ExpressionKind[ExpressionKind["ReadVariable"] = 3] = "ReadVariable";
        /**
         * Runtime operation to navigate to the next view context in the view hierarchy.
         */
        ExpressionKind[ExpressionKind["NextContext"] = 4] = "NextContext";
        /**
         * Runtime operation to retrieve the value of a local reference.
         */
        ExpressionKind[ExpressionKind["Reference"] = 5] = "Reference";
        /**
         * Runtime operation to snapshot the current view context.
         */
        ExpressionKind[ExpressionKind["GetCurrentView"] = 6] = "GetCurrentView";
        /**
         * Runtime operation to restore a snapshotted view.
         */
        ExpressionKind[ExpressionKind["RestoreView"] = 7] = "RestoreView";
        /**
         * Runtime operation to reset the current view context after `RestoreView`.
         */
        ExpressionKind[ExpressionKind["ResetView"] = 8] = "ResetView";
        /**
         * Defines and calls a function with change-detected arguments.
         */
        ExpressionKind[ExpressionKind["PureFunctionExpr"] = 9] = "PureFunctionExpr";
        /**
         * Indicates a positional parameter to a pure function definition.
         */
        ExpressionKind[ExpressionKind["PureFunctionParameterExpr"] = 10] = "PureFunctionParameterExpr";
        /**
         * Binding to a pipe transformation.
         */
        ExpressionKind[ExpressionKind["PipeBinding"] = 11] = "PipeBinding";
        /**
         * Binding to a pipe transformation with a variable number of arguments.
         */
        ExpressionKind[ExpressionKind["PipeBindingVariadic"] = 12] = "PipeBindingVariadic";
        /*
         * A safe property read requiring expansion into a null check.
         */
        ExpressionKind[ExpressionKind["SafePropertyRead"] = 13] = "SafePropertyRead";
        /**
         * A safe keyed read requiring expansion into a null check.
         */
        ExpressionKind[ExpressionKind["SafeKeyedRead"] = 14] = "SafeKeyedRead";
        /**
         * A safe function call requiring expansion into a null check.
         */
        ExpressionKind[ExpressionKind["SafeInvokeFunction"] = 15] = "SafeInvokeFunction";
        /**
         * An intermediate expression that will be expanded from a safe read into an explicit ternary.
         */
        ExpressionKind[ExpressionKind["SafeTernaryExpr"] = 16] = "SafeTernaryExpr";
        /**
         * An empty expression that will be stipped before generating the final output.
         */
        ExpressionKind[ExpressionKind["EmptyExpr"] = 17] = "EmptyExpr";
        /*
         * An assignment to a temporary variable.
         */
        ExpressionKind[ExpressionKind["AssignTemporaryExpr"] = 18] = "AssignTemporaryExpr";
        /**
         * A reference to a temporary variable.
         */
        ExpressionKind[ExpressionKind["ReadTemporaryExpr"] = 19] = "ReadTemporaryExpr";
        /**
         * An expression that will cause a literal slot index to be emitted.
         */
        ExpressionKind[ExpressionKind["SlotLiteralExpr"] = 20] = "SlotLiteralExpr";
        /**
         * A test expression for a conditional op.
         */
        ExpressionKind[ExpressionKind["ConditionalCase"] = 21] = "ConditionalCase";
        /**
         * An expression that will be automatically extracted to the component const array.
         */
        ExpressionKind[ExpressionKind["ConstCollected"] = 22] = "ConstCollected";
        /**
         * Operation that sets the value of a two-way binding.
         */
        ExpressionKind[ExpressionKind["TwoWayBindingSet"] = 23] = "TwoWayBindingSet";
    })(ExpressionKind || (ExpressionKind = {}));
    var VariableFlags;
    (function (VariableFlags) {
        VariableFlags[VariableFlags["None"] = 0] = "None";
        /**
         * Always inline this variable, regardless of the number of times it's used.
         * An `AlwaysInline` variable may not depend on context, because doing so may cause side effects
         * that are illegal when multi-inlined. (The optimizer will enforce this constraint.)
         */
        VariableFlags[VariableFlags["AlwaysInline"] = 1] = "AlwaysInline";
    })(VariableFlags || (VariableFlags = {}));
    /**
     * Distinguishes between different kinds of `SemanticVariable`s.
     */
    var SemanticVariableKind;
    (function (SemanticVariableKind) {
        /**
         * Represents the context of a particular view.
         */
        SemanticVariableKind[SemanticVariableKind["Context"] = 0] = "Context";
        /**
         * Represents an identifier declared in the lexical scope of a view.
         */
        SemanticVariableKind[SemanticVariableKind["Identifier"] = 1] = "Identifier";
        /**
         * Represents a saved state that can be used to restore a view in a listener handler function.
         */
        SemanticVariableKind[SemanticVariableKind["SavedView"] = 2] = "SavedView";
        /**
         * An alias generated by a special embedded view type (e.g. a `@for` block).
         */
        SemanticVariableKind[SemanticVariableKind["Alias"] = 3] = "Alias";
    })(SemanticVariableKind || (SemanticVariableKind = {}));
    /**
     * Whether to compile in compatibilty mode. In compatibility mode, the template pipeline will
     * attempt to match the output of `TemplateDefinitionBuilder` as exactly as possible, at the cost
     * of producing quirky or larger code in some cases.
     */
    var CompatibilityMode;
    (function (CompatibilityMode) {
        CompatibilityMode[CompatibilityMode["Normal"] = 0] = "Normal";
        CompatibilityMode[CompatibilityMode["TemplateDefinitionBuilder"] = 1] = "TemplateDefinitionBuilder";
    })(CompatibilityMode || (CompatibilityMode = {}));
    /**
     * Enumeration of the types of attributes which can be applied to an element.
     */
    var BindingKind;
    (function (BindingKind) {
        /**
         * Static attributes.
         */
        BindingKind[BindingKind["Attribute"] = 0] = "Attribute";
        /**
         * Class bindings.
         */
        BindingKind[BindingKind["ClassName"] = 1] = "ClassName";
        /**
         * Style bindings.
         */
        BindingKind[BindingKind["StyleProperty"] = 2] = "StyleProperty";
        /**
         * Dynamic property bindings.
         */
        BindingKind[BindingKind["Property"] = 3] = "Property";
        /**
         * Property or attribute bindings on a template.
         */
        BindingKind[BindingKind["Template"] = 4] = "Template";
        /**
         * Internationalized attributes.
         */
        BindingKind[BindingKind["I18n"] = 5] = "I18n";
        /**
         * Animation property bindings.
         */
        BindingKind[BindingKind["Animation"] = 6] = "Animation";
        /**
         * Property side of a two-way binding.
         */
        BindingKind[BindingKind["TwoWayProperty"] = 7] = "TwoWayProperty";
    })(BindingKind || (BindingKind = {}));
    /**
     * Enumeration of possible times i18n params can be resolved.
     */
    var I18nParamResolutionTime;
    (function (I18nParamResolutionTime) {
        /**
         * Param is resolved at message creation time. Most params should be resolved at message creation
         * time. However, ICU params need to be handled in post-processing.
         */
        I18nParamResolutionTime[I18nParamResolutionTime["Creation"] = 0] = "Creation";
        /**
         * Param is resolved during post-processing. This should be used for params whose value comes from
         * an ICU.
         */
        I18nParamResolutionTime[I18nParamResolutionTime["Postproccessing"] = 1] = "Postproccessing";
    })(I18nParamResolutionTime || (I18nParamResolutionTime = {}));
    /**
     * The contexts in which an i18n expression can be used.
     */
    var I18nExpressionFor;
    (function (I18nExpressionFor) {
        /**
         * This expression is used as a value (i.e. inside an i18n block).
         */
        I18nExpressionFor[I18nExpressionFor["I18nText"] = 0] = "I18nText";
        /**
         * This expression is used in a binding.
         */
        I18nExpressionFor[I18nExpressionFor["I18nAttribute"] = 1] = "I18nAttribute";
    })(I18nExpressionFor || (I18nExpressionFor = {}));
    /**
     * Flags that describe what an i18n param value. These determine how the value is serialized into
     * the final map.
     */
    var I18nParamValueFlags;
    (function (I18nParamValueFlags) {
        I18nParamValueFlags[I18nParamValueFlags["None"] = 0] = "None";
        /**
         *  This value represents an element tag.
         */
        I18nParamValueFlags[I18nParamValueFlags["ElementTag"] = 1] = "ElementTag";
        /**
         * This value represents a template tag.
         */
        I18nParamValueFlags[I18nParamValueFlags["TemplateTag"] = 2] = "TemplateTag";
        /**
         * This value represents the opening of a tag.
         */
        I18nParamValueFlags[I18nParamValueFlags["OpenTag"] = 4] = "OpenTag";
        /**
         * This value represents the closing of a tag.
         */
        I18nParamValueFlags[I18nParamValueFlags["CloseTag"] = 8] = "CloseTag";
        /**
         * This value represents an i18n expression index.
         */
        I18nParamValueFlags[I18nParamValueFlags["ExpressionIndex"] = 16] = "ExpressionIndex";
    })(I18nParamValueFlags || (I18nParamValueFlags = {}));
    /**
     * Whether the active namespace is HTML, MathML, or SVG mode.
     */
    var Namespace;
    (function (Namespace) {
        Namespace[Namespace["HTML"] = 0] = "HTML";
        Namespace[Namespace["SVG"] = 1] = "SVG";
        Namespace[Namespace["Math"] = 2] = "Math";
    })(Namespace || (Namespace = {}));
    /**
     * The type of a `@defer` trigger, for use in the ir.
     */
    var DeferTriggerKind;
    (function (DeferTriggerKind) {
        DeferTriggerKind[DeferTriggerKind["Idle"] = 0] = "Idle";
        DeferTriggerKind[DeferTriggerKind["Immediate"] = 1] = "Immediate";
        DeferTriggerKind[DeferTriggerKind["Timer"] = 2] = "Timer";
        DeferTriggerKind[DeferTriggerKind["Hover"] = 3] = "Hover";
        DeferTriggerKind[DeferTriggerKind["Interaction"] = 4] = "Interaction";
        DeferTriggerKind[DeferTriggerKind["Viewport"] = 5] = "Viewport";
    })(DeferTriggerKind || (DeferTriggerKind = {}));
    /**
     * Kinds of i18n contexts. They can be created because of root i18n blocks, or ICUs.
     */
    var I18nContextKind;
    (function (I18nContextKind) {
        I18nContextKind[I18nContextKind["RootI18n"] = 0] = "RootI18n";
        I18nContextKind[I18nContextKind["Icu"] = 1] = "Icu";
        I18nContextKind[I18nContextKind["Attr"] = 2] = "Attr";
    })(I18nContextKind || (I18nContextKind = {}));
    var TemplateKind;
    (function (TemplateKind) {
        TemplateKind[TemplateKind["NgTemplate"] = 0] = "NgTemplate";
        TemplateKind[TemplateKind["Structural"] = 1] = "Structural";
        TemplateKind[TemplateKind["Block"] = 2] = "Block";
    })(TemplateKind || (TemplateKind = {}));

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Marker symbol for `ConsumesSlotOpTrait`.
     */
    const ConsumesSlot = Symbol('ConsumesSlot');
    /**
     * Marker symbol for `DependsOnSlotContextOpTrait`.
     */
    const DependsOnSlotContext = Symbol('DependsOnSlotContext');
    /**
     * Marker symbol for `ConsumesVars` trait.
     */
    const ConsumesVarsTrait = Symbol('ConsumesVars');
    /**
     * Marker symbol for `UsesVarOffset` trait.
     */
    const UsesVarOffset = Symbol('UsesVarOffset');
    /**
     * Default values for most `ConsumesSlotOpTrait` fields (used with the spread operator to initialize
     * implementors of the trait).
     */
    const TRAIT_CONSUMES_SLOT = {
        [ConsumesSlot]: true,
        numSlotsUsed: 1,
    };
    /**
     * Default values for most `DependsOnSlotContextOpTrait` fields (used with the spread operator to
     * initialize implementors of the trait).
     */
    const TRAIT_DEPENDS_ON_SLOT_CONTEXT = {
        [DependsOnSlotContext]: true,
    };
    /**
     * Default values for `UsesVars` fields (used with the spread operator to initialize
     * implementors of the trait).
     */
    const TRAIT_CONSUMES_VARS = {
        [ConsumesVarsTrait]: true,
    };
    /**
     * Test whether an operation implements `ConsumesSlotOpTrait`.
     */
    function hasConsumesSlotTrait(op) {
        return op[ConsumesSlot] === true;
    }
    /**
     * Test whether an operation implements `DependsOnSlotContextOpTrait`.
     */
    function hasDependsOnSlotContextTrait(op) {
        return op[DependsOnSlotContext] === true;
    }
    function hasConsumesVarsTrait(value) {
        return value[ConsumesVarsTrait] === true;
    }
    /**
     * Test whether an expression implements `UsesVarOffsetTrait`.
     */
    function hasUsesVarOffsetTrait(expr) {
        return expr[UsesVarOffset] === true;
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Create a `StatementOp`.
     */
    function createStatementOp(statement) {
        return {
            kind: OpKind.Statement,
            statement,
            ...NEW_OP,
        };
    }
    /**
     * Create a `VariableOp`.
     */
    function createVariableOp(xref, variable, initializer, flags) {
        return {
            kind: OpKind.Variable,
            xref,
            variable,
            initializer,
            flags,
            ...NEW_OP,
        };
    }
    /**
     * Static structure shared by all operations.
     *
     * Used as a convenience via the spread operator (`...NEW_OP`) when creating new operations, and
     * ensures the fields are always in the same order.
     */
    const NEW_OP = {
        debugListId: null,
        prev: null,
        next: null,
    };

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * Create an `InterpolationTextOp`.
     */
    function createInterpolateTextOp(xref, interpolation, sourceSpan) {
        return {
            kind: OpKind.InterpolateText,
            target: xref,
            interpolation,
            sourceSpan,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
            ...TRAIT_CONSUMES_VARS,
            ...NEW_OP,
        };
    }
    class Interpolation {
        constructor(strings, expressions, i18nPlaceholders) {
            this.strings = strings;
            this.expressions = expressions;
            this.i18nPlaceholders = i18nPlaceholders;
            if (i18nPlaceholders.length !== 0 && i18nPlaceholders.length !== expressions.length) {
                throw new Error(`Expected ${expressions.length} placeholders to match interpolation expression count, but got ${i18nPlaceholders.length}`);
            }
        }
    }
    /**
     * Create a `BindingOp`, not yet transformed into a particular type of binding.
     */
    function createBindingOp(target, kind, name, expression, unit, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {
        return {
            kind: OpKind.Binding,
            bindingKind: kind,
            target,
            name,
            expression,
            unit,
            securityContext,
            isTextAttribute,
            isStructuralTemplateAttribute,
            templateKind,
            i18nContext: null,
            i18nMessage,
            sourceSpan,
            ...NEW_OP,
        };
    }
    /**
     * Create a `PropertyOp`.
     */
    function createPropertyOp(target, name, expression, isAnimationTrigger, securityContext, isStructuralTemplateAttribute, templateKind, i18nContext, i18nMessage, sourceSpan) {
        return {
            kind: OpKind.Property,
            target,
            name,
            expression,
            isAnimationTrigger,
            securityContext,
            sanitizer: null,
            isStructuralTemplateAttribute,
            templateKind,
            i18nContext,
            i18nMessage,
            sourceSpan,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
            ...TRAIT_CONSUMES_VARS,
            ...NEW_OP,
        };
    }
    /**
     * Create a `TwoWayPropertyOp`.
     */
    function createTwoWayPropertyOp(target, name, expression, securityContext, isStructuralTemplateAttribute, templateKind, i18nContext, i18nMessage, sourceSpan) {
        return {
            kind: OpKind.TwoWayProperty,
            target,
            name,
            expression,
            securityContext,
            sanitizer: null,
            isStructuralTemplateAttribute,
            templateKind,
            i18nContext,
            i18nMessage,
            sourceSpan,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
            ...TRAIT_CONSUMES_VARS,
            ...NEW_OP,
        };
    }
    /** Create a `StylePropOp`. */
    function createStylePropOp(xref, name, expression, unit, sourceSpan) {
        return {
            kind: OpKind.StyleProp,
            target: xref,
            name,
            expression,
            unit,
            sourceSpan,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
            ...TRAIT_CONSUMES_VARS,
            ...NEW_OP,
        };
    }
    /**
     * Create a `ClassPropOp`.
     */
    function createClassPropOp(xref, name, expression, sourceSpan) {
        return {
            kind: OpKind.ClassProp,
            target: xref,
            name,
            expression,
            sourceSpan,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
            ...TRAIT_CONSUMES_VARS,
            ...NEW_OP,
        };
    }
    /** Create a `StyleMapOp`. */
    function createStyleMapOp(xref, expression, sourceSpan) {
        return {
            kind: OpKind.StyleMap,
            target: xref,
            expression,
            sourceSpan,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
            ...TRAIT_CONSUMES_VARS,
            ...NEW_OP,
        };
    }
    /**
     * Create a `ClassMapOp`.
     */
    function createClassMapOp(xref, expression, sourceSpan) {
        return {
            kind: OpKind.ClassMap,
            target: xref,
            expression,
            sourceSpan,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
            ...TRAIT_CONSUMES_VARS,
            ...NEW_OP,
        };
    }
    /**
     * Create an `AttributeOp`.
     */
    function createAttributeOp(target, namespace, name, expression, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {
        return {
            kind: OpKind.Attribute,
            target,
            namespace,
            name,
            expression,
            securityContext,
            sanitizer: null,
            isTextAttribute,
            isStructuralTemplateAttribute,
            templateKind,
            i18nContext: null,
            i18nMessage,
            sourceSpan,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
            ...TRAIT_CONSUMES_VARS,
            ...NEW_OP,
        };
    }
    /**
     * Create an `AdvanceOp`.
     */
    function createAdvanceOp(delta, sourceSpan) {
        return {
            kind: OpKind.Advance,
            delta,
            sourceSpan,
            ...NEW_OP,
        };
    }
    /**
     * Create a conditional op, which will display an embedded view according to a condtion.
     */
    function createConditionalOp(target, test, conditions, sourceSpan) {
        return {
            kind: OpKind.Conditional,
            target,
            test,
            conditions,
            processed: null,
            sourceSpan,
            contextValue: null,
            ...NEW_OP,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
            ...TRAIT_CONSUMES_VARS,
        };
    }
    function createRepeaterOp(repeaterCreate, targetSlot, collection, sourceSpan) {
        return {
            kind: OpKind.Repeater,
            target: repeaterCreate,
            targetSlot,
            collection,
            sourceSpan,
            ...NEW_OP,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
        };
    }
    function createDeferWhenOp(target, expr, prefetch, sourceSpan) {
        return {
            kind: OpKind.DeferWhen,
            target,
            expr,
            prefetch,
            sourceSpan,
            ...NEW_OP,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
            ...TRAIT_CONSUMES_VARS,
        };
    }
    /**
     * Create an i18n expression op.
     */
    function createI18nExpressionOp(context, target, i18nOwner, handle, expression, icuPlaceholder, i18nPlaceholder, resolutionTime, usage, name, sourceSpan) {
        return {
            kind: OpKind.I18nExpression,
            context,
            target,
            i18nOwner,
            handle,
            expression,
            icuPlaceholder,
            i18nPlaceholder,
            resolutionTime,
            usage,
            name,
            sourceSpan,
            ...NEW_OP,
            ...TRAIT_CONSUMES_VARS,
            ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
        };
    }
    /**
     * Creates an op to apply i18n expression ops.
     */
    function createI18nApplyOp(owner, handle, sourceSpan) {
        return {
            kind: OpKind.I18nApply,
            owner,
            handle,
            sourceSpan,
            ...NEW_OP,
        };
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var _a, _b, _c, _d, _e, _f;
    /**
     * Check whether a given `o.Expression` is a logical IR expression type.
     */
    function isIrExpression(expr) {
        return expr instanceof ExpressionBase;
    }
    /**
     * Base type used for all logical IR expressions.
     */
    class ExpressionBase extends Expression {
        constructor(sourceSpan = null) {
            super(null, sourceSpan);
        }
    }
    /**
     * Logical expression representing a lexical read of a variable name.
     */
    class LexicalReadExpr extends ExpressionBase {
        constructor(name) {
            super();
            this.name = name;
            this.kind = ExpressionKind.LexicalRead;
        }
        visitExpression(visitor, context) { }
        isEquivalent(other) {
            // We assume that the lexical reads are in the same context, which must be true for parent
            // expressions to be equivalent.
            // TODO: is this generally safe?
            return this.name === other.name;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions() { }
        clone() {
            return new LexicalReadExpr(this.name);
        }
    }
    /**
     * Runtime operation to retrieve the value of a local reference.
     */
    class ReferenceExpr extends ExpressionBase {
        constructor(target, targetSlot, offset) {
            super();
            this.target = target;
            this.targetSlot = targetSlot;
            this.offset = offset;
            this.kind = ExpressionKind.Reference;
        }
        visitExpression() { }
        isEquivalent(e) {
            return e instanceof ReferenceExpr && e.target === this.target;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions() { }
        clone() {
            return new ReferenceExpr(this.target, this.targetSlot, this.offset);
        }
    }
    /**
     * A reference to the current view context (usually the `ctx` variable in a template function).
     */
    class ContextExpr extends ExpressionBase {
        constructor(view) {
            super();
            this.view = view;
            this.kind = ExpressionKind.Context;
        }
        visitExpression() { }
        isEquivalent(e) {
            return e instanceof ContextExpr && e.view === this.view;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions() { }
        clone() {
            return new ContextExpr(this.view);
        }
    }
    /**
     * A reference to the current view context inside a track function.
     */
    class TrackContextExpr extends ExpressionBase {
        constructor(view) {
            super();
            this.view = view;
            this.kind = ExpressionKind.TrackContext;
        }
        visitExpression() { }
        isEquivalent(e) {
            return e instanceof TrackContextExpr && e.view === this.view;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions() { }
        clone() {
            return new TrackContextExpr(this.view);
        }
    }
    /**
     * Runtime operation to navigate to the next view context in the view hierarchy.
     */
    class NextContextExpr extends ExpressionBase {
        constructor() {
            super();
            this.kind = ExpressionKind.NextContext;
            this.steps = 1;
        }
        visitExpression() { }
        isEquivalent(e) {
            return e instanceof NextContextExpr && e.steps === this.steps;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions() { }
        clone() {
            const expr = new NextContextExpr();
            expr.steps = this.steps;
            return expr;
        }
    }
    /**
     * Runtime operation to snapshot the current view context.
     *
     * The result of this operation can be stored in a variable and later used with the `RestoreView`
     * operation.
     */
    class GetCurrentViewExpr extends ExpressionBase {
        constructor() {
            super();
            this.kind = ExpressionKind.GetCurrentView;
        }
        visitExpression() { }
        isEquivalent(e) {
            return e instanceof GetCurrentViewExpr;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions() { }
        clone() {
            return new GetCurrentViewExpr();
        }
    }
    /**
     * Runtime operation to restore a snapshotted view.
     */
    class RestoreViewExpr extends ExpressionBase {
        constructor(view) {
            super();
            this.view = view;
            this.kind = ExpressionKind.RestoreView;
        }
        visitExpression(visitor, context) {
            if (typeof this.view !== 'number') {
                this.view.visitExpression(visitor, context);
            }
        }
        isEquivalent(e) {
            if (!(e instanceof RestoreViewExpr) || typeof e.view !== typeof this.view) {
                return false;
            }
            if (typeof this.view === 'number') {
                return this.view === e.view;
            }
            else {
                return this.view.isEquivalent(e.view);
            }
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) {
            if (typeof this.view !== 'number') {
                this.view = transformExpressionsInExpression(this.view, transform, flags);
            }
        }
        clone() {
            return new RestoreViewExpr(this.view instanceof Expression ? this.view.clone() : this.view);
        }
    }
    /**
     * Runtime operation to reset the current view context after `RestoreView`.
     */
    class ResetViewExpr extends ExpressionBase {
        constructor(expr) {
            super();
            this.expr = expr;
            this.kind = ExpressionKind.ResetView;
        }
        visitExpression(visitor, context) {
            this.expr.visitExpression(visitor, context);
        }
        isEquivalent(e) {
            return e instanceof ResetViewExpr && this.expr.isEquivalent(e.expr);
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) {
            this.expr = transformExpressionsInExpression(this.expr, transform, flags);
        }
        clone() {
            return new ResetViewExpr(this.expr.clone());
        }
    }
    class TwoWayBindingSetExpr extends ExpressionBase {
        constructor(target, value) {
            super();
            this.target = target;
            this.value = value;
            this.kind = ExpressionKind.TwoWayBindingSet;
        }
        visitExpression(visitor, context) {
            this.target.visitExpression(visitor, context);
            this.value.visitExpression(visitor, context);
        }
        isEquivalent(other) {
            return this.target.isEquivalent(other.target) && this.value.isEquivalent(other.value);
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) {
            this.target = transformExpressionsInExpression(this.target, transform, flags);
            this.value = transformExpressionsInExpression(this.value, transform, flags);
        }
        clone() {
            return new TwoWayBindingSetExpr(this.target, this.value);
        }
    }
    /**
     * Read of a variable declared as an `ir.VariableOp` and referenced through its `ir.XrefId`.
     */
    class ReadVariableExpr extends ExpressionBase {
        constructor(xref) {
            super();
            this.xref = xref;
            this.kind = ExpressionKind.ReadVariable;
            this.name = null;
        }
        visitExpression() { }
        isEquivalent(other) {
            return other instanceof ReadVariableExpr && other.xref === this.xref;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions() { }
        clone() {
            const expr = new ReadVariableExpr(this.xref);
            expr.name = this.name;
            return expr;
        }
    }
    class PureFunctionExpr extends ExpressionBase {
        static { _a = ConsumesVarsTrait, _b = UsesVarOffset; }
        constructor(expression, args) {
            super();
            this.kind = ExpressionKind.PureFunctionExpr;
            this[_a] = true;
            this[_b] = true;
            this.varOffset = null;
            /**
             * Once extracted to the `ConstantPool`, a reference to the function which defines the computation
             * of `body`.
             */
            this.fn = null;
            this.body = expression;
            this.args = args;
        }
        visitExpression(visitor, context) {
            this.body?.visitExpression(visitor, context);
            for (const arg of this.args) {
                arg.visitExpression(visitor, context);
            }
        }
        isEquivalent(other) {
            if (!(other instanceof PureFunctionExpr) || other.args.length !== this.args.length) {
                return false;
            }
            return (other.body !== null &&
                this.body !== null &&
                other.body.isEquivalent(this.body) &&
                other.args.every((arg, idx) => arg.isEquivalent(this.args[idx])));
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) {
            if (this.body !== null) {
                // TODO: figure out if this is the right flag to pass here.
                this.body = transformExpressionsInExpression(this.body, transform, flags | VisitorContextFlag.InChildOperation);
            }
            else if (this.fn !== null) {
                this.fn = transformExpressionsInExpression(this.fn, transform, flags);
            }
            for (let i = 0; i < this.args.length; i++) {
                this.args[i] = transformExpressionsInExpression(this.args[i], transform, flags);
            }
        }
        clone() {
            const expr = new PureFunctionExpr(this.body?.clone() ?? null, this.args.map((arg) => arg.clone()));
            expr.fn = this.fn?.clone() ?? null;
            expr.varOffset = this.varOffset;
            return expr;
        }
    }
    class PureFunctionParameterExpr extends ExpressionBase {
        constructor(index) {
            super();
            this.index = index;
            this.kind = ExpressionKind.PureFunctionParameterExpr;
        }
        visitExpression() { }
        isEquivalent(other) {
            return other instanceof PureFunctionParameterExpr && other.index === this.index;
        }
        isConstant() {
            return true;
        }
        transformInternalExpressions() { }
        clone() {
            return new PureFunctionParameterExpr(this.index);
        }
    }
    class PipeBindingExpr extends ExpressionBase {
        static { _c = ConsumesVarsTrait, _d = UsesVarOffset; }
        constructor(target, targetSlot, name, args) {
            super();
            this.target = target;
            this.targetSlot = targetSlot;
            this.name = name;
            this.args = args;
            this.kind = ExpressionKind.PipeBinding;
            this[_c] = true;
            this[_d] = true;
            this.varOffset = null;
        }
        visitExpression(visitor, context) {
            for (const arg of this.args) {
                arg.visitExpression(visitor, context);
            }
        }
        isEquivalent() {
            return false;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) {
            for (let idx = 0; idx < this.args.length; idx++) {
                this.args[idx] = transformExpressionsInExpression(this.args[idx], transform, flags);
            }
        }
        clone() {
            const r = new PipeBindingExpr(this.target, this.targetSlot, this.name, this.args.map((a) => a.clone()));
            r.varOffset = this.varOffset;
            return r;
        }
    }
    class PipeBindingVariadicExpr extends ExpressionBase {
        static { _e = ConsumesVarsTrait, _f = UsesVarOffset; }
        constructor(target, targetSlot, name, args, numArgs) {
            super();
            this.target = target;
            this.targetSlot = targetSlot;
            this.name = name;
            this.args = args;
            this.numArgs = numArgs;
            this.kind = ExpressionKind.PipeBindingVariadic;
            this[_e] = true;
            this[_f] = true;
            this.varOffset = null;
        }
        visitExpression(visitor, context) {
            this.args.visitExpression(visitor, context);
        }
        isEquivalent() {
            return false;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) {
            this.args = transformExpressionsInExpression(this.args, transform, flags);
        }
        clone() {
            const r = new PipeBindingVariadicExpr(this.target, this.targetSlot, this.name, this.args.clone(), this.numArgs);
            r.varOffset = this.varOffset;
            return r;
        }
    }
    class SafePropertyReadExpr extends ExpressionBase {
        constructor(receiver, name) {
            super();
            this.receiver = receiver;
            this.name = name;
            this.kind = ExpressionKind.SafePropertyRead;
        }
        // An alias for name, which allows other logic to handle property reads and keyed reads together.
        get index() {
            return this.name;
        }
        visitExpression(visitor, context) {
            this.receiver.visitExpression(visitor, context);
        }
        isEquivalent() {
            return false;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) {
            this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);
        }
        clone() {
            return new SafePropertyReadExpr(this.receiver.clone(), this.name);
        }
    }
    class SafeKeyedReadExpr extends ExpressionBase {
        constructor(receiver, index, sourceSpan) {
            super(sourceSpan);
            this.receiver = receiver;
            this.index = index;
            this.kind = ExpressionKind.SafeKeyedRead;
        }
        visitExpression(visitor, context) {
            this.receiver.visitExpression(visitor, context);
            this.index.visitExpression(visitor, context);
        }
        isEquivalent() {
            return false;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) {
            this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);
            this.index = transformExpressionsInExpression(this.index, transform, flags);
        }
        clone() {
            return new SafeKeyedReadExpr(this.receiver.clone(), this.index.clone(), this.sourceSpan);
        }
    }
    class SafeInvokeFunctionExpr extends ExpressionBase {
        constructor(receiver, args) {
            super();
            this.receiver = receiver;
            this.args = args;
            this.kind = ExpressionKind.SafeInvokeFunction;
        }
        visitExpression(visitor, context) {
            this.receiver.visitExpression(visitor, context);
            for (const a of this.args) {
                a.visitExpression(visitor, context);
            }
        }
        isEquivalent() {
            return false;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) {
            this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);
            for (let i = 0; i < this.args.length; i++) {
                this.args[i] = transformExpressionsInExpression(this.args[i], transform, flags);
            }
        }
        clone() {
            return new SafeInvokeFunctionExpr(this.receiver.clone(), this.args.map((a) => a.clone()));
        }
    }
    class SafeTernaryExpr extends ExpressionBase {
        constructor(guard, expr) {
            super();
            this.guard = guard;
            this.expr = expr;
            this.kind = ExpressionKind.SafeTernaryExpr;
        }
        visitExpression(visitor, context) {
            this.guard.visitExpression(visitor, context);
            this.expr.visitExpression(visitor, context);
        }
        isEquivalent() {
            return false;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) {
            this.guard = transformExpressionsInExpression(this.guard, transform, flags);
            this.expr = transformExpressionsInExpression(this.expr, transform, flags);
        }
        clone() {
            return new SafeTernaryExpr(this.guard.clone(), this.expr.clone());
        }
    }
    class EmptyExpr extends ExpressionBase {
        constructor() {
            super(...arguments);
            this.kind = ExpressionKind.EmptyExpr;
        }
        visitExpression(visitor, context) { }
        isEquivalent(e) {
            return e instanceof EmptyExpr;
        }
        isConstant() {
            return true;
        }
        clone() {
            return new EmptyExpr();
        }
        transformInternalExpressions() { }
    }
    class AssignTemporaryExpr extends ExpressionBase {
        constructor(expr, xref) {
            super();
            this.expr = expr;
            this.xref = xref;
            this.kind = ExpressionKind.AssignTemporaryExpr;
            this.name = null;
        }
        visitExpression(visitor, context) {
            this.expr.visitExpression(visitor, context);
        }
        isEquivalent() {
            return false;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) {
            this.expr = transformExpressionsInExpression(this.expr, transform, flags);
        }
        clone() {
            const a = new AssignTemporaryExpr(this.expr.clone(), this.xref);
            a.name = this.name;
            return a;
        }
    }
    class ReadTemporaryExpr extends ExpressionBase {
        constructor(xref) {
            super();
            this.xref = xref;
            this.kind = ExpressionKind.ReadTemporaryExpr;
            this.name = null;
        }
        visitExpression(visitor, context) { }
        isEquivalent() {
            return this.xref === this.xref;
        }
        isConstant() {
            return false;
        }
        transformInternalExpressions(transform, flags) { }
        clone() {
            const r = new ReadTemporaryExpr(this.xref);
            r.name = this.name;
            return r;
        }
    }
    class SlotLiteralExpr extends ExpressionBase {
        constructor(slot) {
            super();
            this.slot = slot;
            this.kind = ExpressionKind.SlotLiteralExpr;
        }
        visitExpression(visitor, context) { }
        isEquivalent(e) {
            return e instanceof SlotLiteralExpr && e.slot === this.slot;
        }
        isConstant() {
            return true;
        }
        clone() {
            return new SlotLiteralExpr(this.slot);
        }
        transformInternalExpressions() { }
    }
    class ConditionalCaseExpr extends ExpressionBase {
        /**
         * Create an expression for one branch of a conditional.
         * @param expr The expression to be tested for this case. Might be null, as in an `else` case.
         * @param target The Xref of the view to be displayed if this condition is true.
         */
        constructor(expr, target, targetSlot, alias = null) {
            super();
            this.expr = expr;
            this.target = target;
            this.targetSlot = targetSlot;
            this.alias = alias;
            this.kind = ExpressionKind.ConditionalCase;
        }
        visitExpression(visitor, context) {
            if (this.expr !== null) {
                this.expr.visitExpression(visitor, context);
            }
        }
        isEquivalent(e) {
            return e instanceof ConditionalCaseExpr && e.expr === this.expr;
        }
        isConstant() {
            return true;
        }
        clone() {
            return new ConditionalCaseExpr(this.expr, this.target, this.targetSlot);
        }
        transformInternalExpressions(transform, flags) {
            if (this.expr !== null) {
                this.expr = transformExpressionsInExpression(this.expr, transform, flags);
            }
        }
    }
    class ConstCollectedExpr extends ExpressionBase {
        constructor(expr) {
            super();
            this.expr = expr;
            this.kind = ExpressionKind.ConstCollected;
        }
        transformInternalExpressions(transform, flags) {
            this.expr = transform(this.expr, flags);
        }
        visitExpression(visitor, context) {
            this.expr.visitExpression(visitor, context);
        }
        isEquivalent(e) {
            if (!(e instanceof ConstCollectedExpr)) {
                return false;
            }
            return this.expr.isEquivalent(e.expr);
        }
        isConstant() {
            return this.expr.isConstant();
        }
        clone() {
            return new ConstCollectedExpr(this.expr);
        }
    }
    /**
     * Visits all `Expression`s in the AST of `op` with the `visitor` function.
     */
    function visitExpressionsInOp(op, visitor) {
        transformExpressionsInOp(op, (expr, flags) => {
            visitor(expr, flags);
            return expr;
        }, VisitorContextFlag.None);
    }
    var VisitorContextFlag;
    (function (VisitorContextFlag) {
        VisitorContextFlag[VisitorContextFlag["None"] = 0] = "None";
        VisitorContextFlag[VisitorContextFlag["InChildOperation"] = 1] = "InChildOperation";
    })(VisitorContextFlag || (VisitorContextFlag = {}));
    function transformExpressionsInInterpolation(interpolation, transform, flags) {
        for (let i = 0; i < interpolation.expressions.length; i++) {
            interpolation.expressions[i] = transformExpressionsInExpression(interpolation.expressions[i], transform, flags);
        }
    }
    /**
     * Transform all `Expression`s in the AST of `op` with the `transform` function.
     *
     * All such operations will be replaced with the result of applying `transform`, which may be an
     * identity transformation.
     */
    function transformExpressionsInOp(op, transform, flags) {
        switch (op.kind) {
            case OpKind.StyleProp:
            case OpKind.StyleMap:
            case OpKind.ClassProp:
            case OpKind.ClassMap:
            case OpKind.Binding:
                if (op.expression instanceof Interpolation) {
                    transformExpressionsInInterpolation(op.expression, transform, flags);
                }
                else {
                    op.expression = transformExpressionsInExpression(op.expression, transform, flags);
                }
                break;
            case OpKind.Property:
            case OpKind.HostProperty:
            case OpKind.Attribute:
                if (op.expression instanceof Interpolation) {
                    transformExpressionsInInterpolation(op.expression, transform, flags);
                }
                else {
                    op.expression = transformExpressionsInExpression(op.expression, transform, flags);
                }
                op.sanitizer =
                    op.sanitizer && transformExpressionsInExpression(op.sanitizer, transform, flags);
                break;
            case OpKind.TwoWayProperty:
                op.expression = transformExpressionsInExpression(op.expression, transform, flags);
                op.sanitizer =
                    op.sanitizer && transformExpressionsInExpression(op.sanitizer, transform, flags);
                break;
            case OpKind.I18nExpression:
                op.expression = transformExpressionsInExpression(op.expression, transform, flags);
                break;
            case OpKind.InterpolateText:
                transformExpressionsInInterpolation(op.interpolation, transform, flags);
                break;
            case OpKind.Statement:
                transformExpressionsInStatement(op.statement, transform, flags);
                break;
            case OpKind.Variable:
                op.initializer = transformExpressionsInExpression(op.initializer, transform, flags);
                break;
            case OpKind.Conditional:
                for (const condition of op.conditions) {
                    if (condition.expr === null) {
                        // This is a default case.
                        continue;
                    }
                    condition.expr = transformExpressionsInExpression(condition.expr, transform, flags);
                }
                if (op.processed !== null) {
                    op.processed = transformExpressionsInExpression(op.processed, transform, flags);
                }
                if (op.contextValue !== null) {
                    op.contextValue = transformExpressionsInExpression(op.contextValue, transform, flags);
                }
                break;
            case OpKind.Listener:
            case OpKind.TwoWayListener:
                for (const innerOp of op.handlerOps) {
                    transformExpressionsInOp(innerOp, transform, flags | VisitorContextFlag.InChildOperation);
                }
                break;
            case OpKind.ExtractedAttribute:
                op.expression =
                    op.expression && transformExpressionsInExpression(op.expression, transform, flags);
                op.trustedValueFn =
                    op.trustedValueFn && transformExpressionsInExpression(op.trustedValueFn, transform, flags);
                break;
            case OpKind.RepeaterCreate:
                op.track = transformExpressionsInExpression(op.track, transform, flags);
                if (op.trackByFn !== null) {
                    op.trackByFn = transformExpressionsInExpression(op.trackByFn, transform, flags);
                }
                break;
            case OpKind.Repeater:
                op.collection = transformExpressionsInExpression(op.collection, transform, flags);
                break;
            case OpKind.Defer:
                if (op.loadingConfig !== null) {
                    op.loadingConfig = transformExpressionsInExpression(op.loadingConfig, transform, flags);
                }
                if (op.placeholderConfig !== null) {
                    op.placeholderConfig = transformExpressionsInExpression(op.placeholderConfig, transform, flags);
                }
                if (op.resolverFn !== null) {
                    op.resolverFn = transformExpressionsInExpression(op.resolverFn, transform, flags);
                }
                break;
            case OpKind.I18nMessage:
                for (const [placeholder, expr] of op.params) {
                    op.params.set(placeholder, transformExpressionsInExpression(expr, transform, flags));
                }
                for (const [placeholder, expr] of op.postprocessingParams) {
                    op.postprocessingParams.set(placeholder, transformExpressionsInExpression(expr, transform, flags));
                }
                break;
            case OpKind.DeferWhen:
                op.expr = transformExpressionsInExpression(op.expr, transform, flags);
                break;
            case OpKind.Advance:
            case OpKind.Container:
            case OpKind.ContainerEnd:
            case OpKind.ContainerStart:
            case OpKind.DeferOn:
            case OpKind.DisableBindings:
            case OpKind.Element:
            case OpKind.ElementEnd:
            case OpKind.ElementStart:
            case OpKind.EnableBindings:
            case OpKind.I18n:
            case OpKind.I18nApply:
            case OpKind.I18nContext:
            case OpKind.I18nEnd:
            case OpKind.I18nStart:
            case OpKind.IcuEnd:
            case OpKind.IcuStart:
            case OpKind.Namespace:
            case OpKind.Pipe:
            case OpKind.Projection:
            case OpKind.ProjectionDef:
            case OpKind.Template:
            case OpKind.Text:
            case OpKind.I18nAttributes:
            case OpKind.IcuPlaceholder:
                // These operations contain no expressions.
                break;
            default:
                throw new Error(`AssertionError: transformExpressionsInOp doesn't handle ${OpKind[op.kind]}`);
        }
    }
    /**
     * Transform all `Expression`s in the AST of `expr` with the `transform` function.
     *
     * All such operations will be replaced with the result of applying `transform`, which may be an
     * identity transformation.
     */
    function transformExpressionsInExpression(expr, transform, flags) {
        if (expr instanceof ExpressionBase) {
            expr.transformInternalExpressions(transform, flags);
        }
        else if (expr instanceof BinaryOperatorExpr) {
            expr.lhs = transformExpressionsInExpression(expr.lhs, transform, flags);
            expr.rhs = transformExpressionsInExpression(expr.rhs, transform, flags);
        }
        else if (expr instanceof UnaryOperatorExpr) {
            expr.expr = transformExpressionsInExpression(expr.expr, transform, flags);
        }
        else if (expr instanceof ReadPropExpr) {
            expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);
        }
        else if (expr instanceof ReadKeyExpr) {
            expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);
            expr.index = transformExpressionsInExpression(expr.index, transform, flags);
        }
        else if (expr instanceof WritePropExpr) {
            expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);
            expr.value = transformExpressionsInExpression(expr.value, transform, flags);
        }
        else if (expr instanceof WriteKeyExpr) {
            expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);
            expr.index = transformExpressionsInExpression(expr.index, transform, flags);
            expr.value = transformExpressionsInExpression(expr.value, transform, flags);
        }
        else if (expr instanceof InvokeFunctionExpr) {
            expr.fn = transformExpressionsInExpression(expr.fn, transform, flags);
            for (let i = 0; i < expr.args.length; i++) {
                expr.args[i] = transformExpressionsInExpression(expr.args[i], transform, flags);
            }
        }
        else if (expr instanceof LiteralArrayExpr) {
            for (let i = 0; i < expr.entries.length; i++) {
                expr.entries[i] = transformExpressionsInExpression(expr.entries[i], transform, flags);
            }
        }
        else if (expr instanceof LiteralMapExpr) {
            for (let i = 0; i < expr.entries.length; i++) {
                expr.entries[i].value = transformExpressionsInExpression(expr.entries[i].value, transform, flags);
            }
        }
        else if (expr instanceof ConditionalExpr) {
            expr.condition = transformExpressionsInExpression(expr.condition, transform, flags);
            expr.trueCase = transformExpressionsInExpression(expr.trueCase, transform, flags);
            if (expr.falseCase !== null) {
                expr.falseCase = transformExpressionsInExpression(expr.falseCase, transform, flags);
            }
        }
        else if (expr instanceof TypeofExpr) {
            expr.expr = transformExpressionsInExpression(expr.expr, transform, flags);
        }
        else if (expr instanceof WriteVarExpr) {
            expr.value = transformExpressionsInExpression(expr.value, transform, flags);
        }
        else if (expr instanceof LocalizedString) {
            for (let i = 0; i < expr.expressions.length; i++) {
                expr.expressions[i] = transformExpressionsInExpression(expr.expressions[i], transform, flags);
            }
        }
        else if (expr instanceof NotExpr) {
            expr.condition = transformExpressionsInExpression(expr.condition, transform, flags);
        }
        else if (expr instanceof TaggedTemplateExpr) {
            expr.tag = transformExpressionsInExpression(expr.tag, transform, flags);
            expr.template.expressions = expr.template.expressions.map((e) => transformExpressionsInExpression(e, transform, flags));
        }
        else if (expr instanceof ArrowFunctionExpr) {
            if (Array.isArray(expr.body)) {
                for (let i = 0; i < expr.body.length; i++) {
                    transformExpressionsInStatement(expr.body[i], transform, flags);
                }
            }
            else {
                expr.body = transformExpressionsInExpression(expr.body, transform, flags);
            }
        }
        else if (expr instanceof WrappedNodeExpr) ;
        else if (expr instanceof ReadVarExpr ||
            expr instanceof ExternalExpr ||
            expr instanceof LiteralExpr) ;
        else {
            throw new Error(`Unhandled expression kind: ${expr.constructor.name}`);
        }
        return transform(expr, flags);
    }
    /**
     * Transform all `Expression`s in the AST of `stmt` with the `transform` function.
     *
     * All such operations will be replaced with the result of applying `transform`, which may be an
     * identity transformation.
     */
    function transformExpressionsInStatement(stmt, transform, flags) {
        if (stmt instanceof ExpressionStatement) {
            stmt.expr = transformExpressionsInExpression(stmt.expr, transform, flags);
        }
        else if (stmt instanceof ReturnStatement) {
            stmt.value = transformExpressionsInExpression(stmt.value, transform, flags);
        }
        else if (stmt instanceof DeclareVarStmt) {
            if (stmt.value !== undefined) {
                stmt.value = transformExpressionsInExpression(stmt.value, transform, flags);
            }
        }
        else if (stmt instanceof IfStmt) {
            stmt.condition = transformExpressionsInExpression(stmt.condition, transform, flags);
            for (const caseStatement of stmt.trueCase) {
                transformExpressionsInStatement(caseStatement, transform, flags);
            }
            for (const caseStatement of stmt.falseCase) {
                transformExpressionsInStatement(caseStatement, transform, flags);
            }
        }
        else {
            throw new Error(`Unhandled statement kind: ${stmt.constructor.name}`);
        }
    }
    /**
     * Checks whether the given expression is a string literal.
     */
    function isStringLiteral(expr) {
        return expr instanceof LiteralExpr && typeof expr.value === 'string';
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * A linked list of `Op` nodes of a given subtype.
     *
     * @param OpT specific subtype of `Op` nodes which this list contains.
     */
    class OpList {
        static { this.nextListId = 0; }
        constructor() {
            /**
             * Debug ID of this `OpList` instance.
             */
            this.debugListId = OpList.nextListId++;
            // OpList uses static head/tail nodes of a special `ListEnd` type.
            // This avoids the need for special casing of the first and last list
            // elements in all list operations.
            this.head = {
                kind: OpKind.ListEnd,
                next: null,
                prev: null,
                debugListId: this.debugListId,
            };
            this.tail = {
                kind: OpKind.ListEnd,
                next: null,
                prev: null,
                debugListId: this.debugListId,
            };
            // Link `head` and `tail` together at the start (list is empty).
            this.head.next = this.tail;
            this.tail.prev = this.head;
        }
        /**
         * Push a new operation to the tail of the list.
         */
        push(op) {
            if (Array.isArray(op)) {
                for (const o of op) {
                    this.push(o);
                }
                return;
            }
            OpList.assertIsNotEnd(op);
            OpList.assertIsUnowned(op);
            op.debugListId = this.debugListId;
            // The old "previous" node (which might be the head, if the list is empty).
            const oldLast = this.tail.prev;
            // Insert `op` following the old last node.
            op.prev = oldLast;
            oldLast.next = op;
            // Connect `op` with the list tail.
            op.next = this.tail;
            this.tail.prev = op;
        }
        /**
         * Prepend one or more nodes to the start of the list.
         */
        prepend(ops) {
            if (ops.length === 0) {
                return;
            }
            for (const op of ops) {
                OpList.assertIsNotEnd(op);
                OpList.assertIsUnowned(op);
                op.debugListId = this.debugListId;
            }
            const first = this.head.next;
            let prev = this.head;
            for (const op of ops) {
                prev.next = op;
                op.prev = prev;
                prev = op;
            }
            prev.next = first;
            first.prev = prev;
        }
        /**
         * `OpList` is iterable via the iteration protocol.
         *
         * It's safe to mutate the part of the list that has already been returned by the iterator, up to
         * and including the last operation returned. Mutations beyond that point _may_ be safe, but may
         * also corrupt the iteration position and should be avoided.
         */
        *[Symbol.iterator]() {
            let current = this.head.next;
            while (current !== this.tail) {
                // Guards against corruption of the iterator state by mutations to the tail of the list during
                // iteration.
                OpList.assertIsOwned(current, this.debugListId);
                const next = current.next;
                yield current;
                current = next;
            }
        }
        *reversed() {
            let current = this.tail.prev;
            while (current !== this.head) {
                OpList.assertIsOwned(current, this.debugListId);
                const prev = current.prev;
                yield current;
                current = prev;
            }
        }
        /**
         * Replace `oldOp` with `newOp` in the list.
         */
        static replace(oldOp, newOp) {
            OpList.assertIsNotEnd(oldOp);
            OpList.assertIsNotEnd(newOp);
            OpList.assertIsOwned(oldOp);
            OpList.assertIsUnowned(newOp);
            newOp.debugListId = oldOp.debugListId;
            if (oldOp.prev !== null) {
                oldOp.prev.next = newOp;
                newOp.prev = oldOp.prev;
            }
            if (oldOp.next !== null) {
                oldOp.next.prev = newOp;
                newOp.next = oldOp.next;
            }
            oldOp.debugListId = null;
            oldOp.prev = null;
            oldOp.next = null;
        }
        /**
         * Replace `oldOp` with some number of new operations in the list (which may include `oldOp`).
         */
        static replaceWithMany(oldOp, newOps) {
            if (newOps.length === 0) {
                // Replacing with an empty list -> pure removal.
                OpList.remove(oldOp);
                return;
            }
            OpList.assertIsNotEnd(oldOp);
            OpList.assertIsOwned(oldOp);
            const listId = oldOp.debugListId;
            oldOp.debugListId = null;
            for (const newOp of newOps) {
                OpList.assertIsNotEnd(newOp);
                // `newOp` might be `oldOp`, but at this point it's been marked as unowned.
                OpList.assertIsUnowned(newOp);
            }
            // It should be safe to reuse `oldOp` in the `newOps` list - maybe you want to sandwich an
            // operation between two new ops.
            const { prev: oldPrev, next: oldNext } = oldOp;
            oldOp.prev = null;
            oldOp.next = null;
            let prev = oldPrev;
            for (const newOp of newOps) {
                this.assertIsUnowned(newOp);
                newOp.debugListId = listId;
                prev.next = newOp;
                newOp.prev = prev;
                // This _should_ be the case, but set it just in case.
                newOp.next = null;
                prev = newOp;
            }
            // At the end of iteration, `prev` holds the last node in the list.
            const first = newOps[0];
            const last = prev;
            // Replace `oldOp` with the chain `first` -> `last`.
            if (oldPrev !== null) {
                oldPrev.next = first;
                first.prev = oldPrev;
            }
            if (oldNext !== null) {
                oldNext.prev = last;
                last.next = oldNext;
            }
        }
        /**
         * Remove the given node from the list which contains it.
         */
        static remove(op) {
            OpList.assertIsNotEnd(op);
            OpList.assertIsOwned(op);
            op.prev.next = op.next;
            op.next.prev = op.prev;
            // Break any link between the node and this list to safeguard against its usage in future
            // operations.
            op.debugListId = null;
            op.prev = null;
            op.next = null;
        }
        /**
         * Insert `op` before `target`.
         */
        static insertBefore(op, target) {
            if (Array.isArray(op)) {
                for (const o of op) {
                    this.insertBefore(o, target);
                }
                return;
            }
            OpList.assertIsOwned(target);
            if (target.prev === null) {
                throw new Error(`AssertionError: illegal operation on list start`);
            }
            OpList.assertIsNotEnd(op);
            OpList.assertIsUnowned(op);
            op.debugListId = target.debugListId;
            // Just in case.
            op.prev = null;
            target.prev.next = op;
            op.prev = target.prev;
            op.next = target;
            target.prev = op;
        }
        /**
         * Insert `op` after `target`.
         */
        static insertAfter(op, target) {
            OpList.assertIsOwned(target);
            if (target.next === null) {
                throw new Error(`AssertionError: illegal operation on list end`);
            }
            OpList.assertIsNotEnd(op);
            OpList.assertIsUnowned(op);
            op.debugListId = target.debugListId;
            target.next.prev = op;
            op.next = target.next;
            op.prev = target;
            target.next = op;
        }
        /**
         * Asserts that `op` does not currently belong to a list.
         */
        static assertIsUnowned(op) {
            if (op.debugListId !== null) {
                throw new Error(`AssertionError: illegal operation on owned node: ${OpKind[op.kind]}`);
            }
        }
        /**
         * Asserts that `op` currently belongs to a list. If `byList` is passed, `op` is asserted to
         * specifically belong to that list.
         */
        static assertIsOwned(op, byList) {
            if (op.debugListId === null) {
                throw new Error(`AssertionError: illegal operation on unowned node: ${OpKind[op.kind]}`);
            }
            else if (byList !== undefined && op.debugListId !== byList) {
                throw new Error(`AssertionError: node belongs to the wrong list (expected ${byList}, actual ${op.debugListId})`);
            }
        }
        /**
         * Asserts that `op` is not a special `ListEnd` node.
         */
        static assertIsNotEnd(op) {
            if (op.kind === OpKind.ListEnd) {
                throw new Error(`AssertionError: illegal operation on list head or tail`);
            }
        }
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    class SlotHandle {
        constructor() {
            this.slot = null;
        }
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * The set of OpKinds that represent the creation of an element or container
     */
    const elementContainerOpKinds = new Set([
        OpKind.Element,
        OpKind.ElementStart,
        OpKind.Container,
        OpKind.ContainerStart,
        OpKind.Template,
        OpKind.RepeaterCreate,
    ]);
    /**
     * Checks whether the given operation represents the creation of an element or container.
     */
    function isElementOrContainerOp(op) {
        return elementContainerOpKinds.has(op.kind);
    }
    /**
     * Create an `ElementStartOp`.
     */
    function createElementStartOp(tag, xref, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {
        return {
            kind: OpKind.ElementStart,
            xref,
            tag,
            handle: new SlotHandle(),
            attributes: null,
            localRefs: [],
            nonBindable: false,
            namespace,
            i18nPlaceholder,
            startSourceSpan,
            wholeSourceSpan,
            ...TRAIT_CONSUMES_SLOT,
            ...NEW_OP,
        };
    }
    /**
     * Create a `TemplateOp`.
     */
    function createTemplateOp(xref, templateKind, tag, functionNameSuffix, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {
        return {
            kind: OpKind.Template,
            xref,
            templateKind,
            attributes: null,
            tag,
            handle: new SlotHandle(),
            functionNameSuffix,
            decls: null,
            vars: null,
            localRefs: [],
            nonBindable: false,
            namespace,
            i18nPlaceholder,
            startSourceSpan,
            wholeSourceSpan,
            ...TRAIT_CONSUMES_SLOT,
            ...NEW_OP,
        };
    }
    function createRepeaterCreateOp(primaryView, emptyView, tag, track, varNames, emptyTag, i18nPlaceholder, emptyI18nPlaceholder, startSourceSpan, wholeSourceSpan) {
        return {
            kind: OpKind.RepeaterCreate,
            attributes: null,
            xref: primaryView,
            handle: new SlotHandle(),
            emptyView,
            track,
            trackByFn: null,
            tag,
            emptyTag,
            emptyAttributes: null,
            functionNameSuffix: 'For',
            namespace: Namespace.HTML,
            nonBindable: false,
            localRefs: [],
            decls: null,
            vars: null,
            varNames,
            usesComponentInstance: false,
            i18nPlaceholder,
            emptyI18nPlaceholder,
            startSourceSpan,
            wholeSourceSpan,
            ...TRAIT_CONSUMES_SLOT,
            ...NEW_OP,
            ...TRAIT_CONSUMES_VARS,
            numSlotsUsed: emptyView === null ? 2 : 3,
        };
    }
    /**
     * Create an `ElementEndOp`.
     */
    function createElementEndOp(xref, sourceSpan) {
        return {
            kind: OpKind.ElementEnd,
            xref,
            sourceSpan,
            ...NEW_OP,
        };
    }
    function createDisableBindingsOp(xref) {
        return {
            kind: OpKind.DisableBindings,
            xref,
            ...NEW_OP,
        };
    }
    function createEnableBindingsOp(xref) {
        return {
            kind: OpKind.EnableBindings,
            xref,
            ...NEW_OP,
        };
    }
    /**
     * Create a `TextOp`.
     */
    function createTextOp(xref, initialValue, icuPlaceholder, sourceSpan) {
        return {
            kind: OpKind.Text,
            xref,
            handle: new SlotHandle(),
            initialValue,
            icuPlaceholder,
            sourceSpan,
            ...TRAIT_CONSUMES_SLOT,
            ...NEW_OP,
        };
    }
    /**
     * Create a `ListenerOp`. Host bindings reuse all the listener logic.
     */
    function createListenerOp(target, targetSlot, name, tag, handlerOps, animationPhase, eventTarget, hostListener, sourceSpan) {
        const handlerList = new OpList();
        handlerList.push(handlerOps);
        return {
            kind: OpKind.Listener,
            target,
            targetSlot,
            tag,
            hostListener,
            name,
            handlerOps: handlerList,
            handlerFnName: null,
            consumesDollarEvent: false,
            isAnimationListener: animationPhase !== null,
            animationPhase,
            eventTarget,
            sourceSpan,
            ...NEW_OP,
        };
    }
    /**
     * Create a `TwoWayListenerOp`.
     */
    function createTwoWayListenerOp(target, targetSlot, name, tag, handlerOps, sourceSpan) {
        const handlerList = new OpList();
        handlerList.push(handlerOps);
        return {
            kind: OpKind.TwoWayListener,
            target,
            targetSlot,
            tag,
            name,
            handlerOps: handlerList,
            handlerFnName: null,
            sourceSpan,
            ...NEW_OP,
        };
    }
    function createPipeOp(xref, slot, name) {
        return {
            kind: OpKind.Pipe,
            xref,
            handle: slot,
            name,
            ...NEW_OP,
            ...TRAIT_CONSUMES_SLOT,
        };
    }
    function createNamespaceOp(namespace) {
        return {
            kind: OpKind.Namespace,
            active: namespace,
            ...NEW_OP,
        };
    }
    function createProjectionDefOp(def) {
        return {
            kind: OpKind.ProjectionDef,
            def,
            ...NEW_OP,
        };
    }
    function createProjectionOp(xref, selector, i18nPlaceholder, fallbackView, sourceSpan) {
        return {
            kind: OpKind.Projection,
            xref,
            handle: new SlotHandle(),
            selector,
            i18nPlaceholder,
            fallbackView,
            projectionSlotIndex: 0,
            attributes: null,
            localRefs: [],
            sourceSpan,
            ...NEW_OP,
            ...TRAIT_CONSUMES_SLOT,
            numSlotsUsed: fallbackView === null ? 1 : 2,
        };
    }
    /**
     * Create an `ExtractedAttributeOp`.
     */
    function createExtractedAttributeOp(target, bindingKind, namespace, name, expression, i18nContext, i18nMessage, securityContext) {
        return {
            kind: OpKind.ExtractedAttribute,
            target,
            bindingKind,
            namespace,
            name,
            expression,
            i18nContext,
            i18nMessage,
            securityContext,
            trustedValueFn: null,
            ...NEW_OP,
        };
    }
    function createDeferOp(xref, main, mainSlot, ownResolverFn, resolverFn, sourceSpan) {
        return {
            kind: OpKind.Defer,
            xref,
            handle: new SlotHandle(),
            mainView: main,
            mainSlot,
            loadingView: null,
            loadingSlot: null,
            loadingConfig: null,
            loadingMinimumTime: null,
            loadingAfterTime: null,
            placeholderView: null,
            placeholderSlot: null,
            placeholderConfig: null,
            placeholderMinimumTime: null,
            errorView: null,
            errorSlot: null,
            ownResolverFn,
            resolverFn,
            sourceSpan,
            ...NEW_OP,
            ...TRAIT_CONSUMES_SLOT,
            numSlotsUsed: 2,
        };
    }
    function createDeferOnOp(defer, trigger, prefetch, sourceSpan) {
        return {
            kind: OpKind.DeferOn,
            defer,
            trigger,
            prefetch,
            sourceSpan,
            ...NEW_OP,
        };
    }
    /**
     * Create an `ExtractedMessageOp`.
     */
    function createI18nMessageOp(xref, i18nContext, i18nBlock, message, messagePlaceholder, params, postprocessingParams, needsPostprocessing) {
        return {
            kind: OpKind.I18nMessage,
            xref,
            i18nContext,
            i18nBlock,
            message,
            messagePlaceholder,
            params,
            postprocessingParams,
            needsPostprocessing,
            subMessages: [],
            ...NEW_OP,
        };
    }
    /**
     * Create an `I18nStartOp`.
     */
    function createI18nStartOp(xref, message, root, sourceSpan) {
        return {
            kind: OpKind.I18nStart,
            xref,
            handle: new SlotHandle(),
            root: root ?? xref,
            message,
            messageIndex: null,
            subTemplateIndex: null,
            context: null,
            sourceSpan,
            ...NEW_OP,
            ...TRAIT_CONSUMES_SLOT,
        };
    }
    /**
     * Create an `I18nEndOp`.
     */
    function createI18nEndOp(xref, sourceSpan) {
        return {
            kind: OpKind.I18nEnd,
            xref,
            sourceSpan,
            ...NEW_OP,
        };
    }
    /**
     * Creates an ICU start op.
     */
    function createIcuStartOp(xref, message, messagePlaceholder, sourceSpan) {
        return {
            kind: OpKind.IcuStart,
            xref,
            message,
            messagePlaceholder,
            contex